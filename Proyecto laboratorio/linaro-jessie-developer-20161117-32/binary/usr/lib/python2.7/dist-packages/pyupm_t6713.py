# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_t6713', [dirname(__file__)])
        except ImportError:
            import _pyupm_t6713
            return _pyupm_t6713
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_t6713', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_t6713 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_t6713
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


T6713_COMMAND_RESET = _pyupm_t6713.T6713_COMMAND_RESET
T6713_COMMAND_STATUS = _pyupm_t6713.T6713_COMMAND_STATUS
T6713_COMMAND_GET_FIRMWARE_REVISION = _pyupm_t6713.T6713_COMMAND_GET_FIRMWARE_REVISION
T6713_COMMAND_GET_GAS_PPM = _pyupm_t6713.T6713_COMMAND_GET_GAS_PPM
ERROR_CONDITION = _pyupm_t6713.ERROR_CONDITION
FLASH_ERROR = _pyupm_t6713.FLASH_ERROR
CALIBRATION_ERROR = _pyupm_t6713.CALIBRATION_ERROR
WARMUP_MODE = _pyupm_t6713.WARMUP_MODE
SINGLE_POINT_CALIBRATION = _pyupm_t6713.SINGLE_POINT_CALIBRATION
RS232 = _pyupm_t6713.RS232
I2C = _pyupm_t6713.I2C
RS485 = _pyupm_t6713.RS485
class COMMAND(_object):
    """Proxy of C++ upm::t6713_co2::COMMAND class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COMMAND, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COMMAND, name)
    __repr__ = _swig_repr
    __swig_setmethods__["function_code"] = _pyupm_t6713.COMMAND_function_code_set
    __swig_getmethods__["function_code"] = _pyupm_t6713.COMMAND_function_code_get
    if _newclass:function_code = _swig_property(_pyupm_t6713.COMMAND_function_code_get, _pyupm_t6713.COMMAND_function_code_set)
    __swig_setmethods__["register_address_msb"] = _pyupm_t6713.COMMAND_register_address_msb_set
    __swig_getmethods__["register_address_msb"] = _pyupm_t6713.COMMAND_register_address_msb_get
    if _newclass:register_address_msb = _swig_property(_pyupm_t6713.COMMAND_register_address_msb_get, _pyupm_t6713.COMMAND_register_address_msb_set)
    __swig_setmethods__["register_address_lsb"] = _pyupm_t6713.COMMAND_register_address_lsb_set
    __swig_getmethods__["register_address_lsb"] = _pyupm_t6713.COMMAND_register_address_lsb_get
    if _newclass:register_address_lsb = _swig_property(_pyupm_t6713.COMMAND_register_address_lsb_get, _pyupm_t6713.COMMAND_register_address_lsb_set)
    __swig_setmethods__["input_registers_to_read_msb"] = _pyupm_t6713.COMMAND_input_registers_to_read_msb_set
    __swig_getmethods__["input_registers_to_read_msb"] = _pyupm_t6713.COMMAND_input_registers_to_read_msb_get
    if _newclass:input_registers_to_read_msb = _swig_property(_pyupm_t6713.COMMAND_input_registers_to_read_msb_get, _pyupm_t6713.COMMAND_input_registers_to_read_msb_set)
    __swig_setmethods__["input_registers_to_read_lsb"] = _pyupm_t6713.COMMAND_input_registers_to_read_lsb_set
    __swig_getmethods__["input_registers_to_read_lsb"] = _pyupm_t6713.COMMAND_input_registers_to_read_lsb_get
    if _newclass:input_registers_to_read_lsb = _swig_property(_pyupm_t6713.COMMAND_input_registers_to_read_lsb_get, _pyupm_t6713.COMMAND_input_registers_to_read_lsb_set)
    def __init__(self): 
        """__init__(upm::t6713_co2::COMMAND self) -> COMMAND"""
        this = _pyupm_t6713.new_COMMAND()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_t6713.delete_COMMAND
    __del__ = lambda self : None;
COMMAND_swigregister = _pyupm_t6713.COMMAND_swigregister
COMMAND_swigregister(COMMAND)

class RESPONSE(_object):
    """Proxy of C++ upm::t6713_co2::RESPONSE class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RESPONSE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RESPONSE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["function_code"] = _pyupm_t6713.RESPONSE_function_code_set
    __swig_getmethods__["function_code"] = _pyupm_t6713.RESPONSE_function_code_get
    if _newclass:function_code = _swig_property(_pyupm_t6713.RESPONSE_function_code_get, _pyupm_t6713.RESPONSE_function_code_set)
    __swig_setmethods__["byte_count"] = _pyupm_t6713.RESPONSE_byte_count_set
    __swig_getmethods__["byte_count"] = _pyupm_t6713.RESPONSE_byte_count_get
    if _newclass:byte_count = _swig_property(_pyupm_t6713.RESPONSE_byte_count_get, _pyupm_t6713.RESPONSE_byte_count_set)
    __swig_setmethods__["status_msb"] = _pyupm_t6713.RESPONSE_status_msb_set
    __swig_getmethods__["status_msb"] = _pyupm_t6713.RESPONSE_status_msb_get
    if _newclass:status_msb = _swig_property(_pyupm_t6713.RESPONSE_status_msb_get, _pyupm_t6713.RESPONSE_status_msb_set)
    __swig_setmethods__["status_lsb"] = _pyupm_t6713.RESPONSE_status_lsb_set
    __swig_getmethods__["status_lsb"] = _pyupm_t6713.RESPONSE_status_lsb_get
    if _newclass:status_lsb = _swig_property(_pyupm_t6713.RESPONSE_status_lsb_get, _pyupm_t6713.RESPONSE_status_lsb_set)
    def __init__(self): 
        """__init__(upm::t6713_co2::RESPONSE self) -> RESPONSE"""
        this = _pyupm_t6713.new_RESPONSE()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_t6713.delete_RESPONSE
    __del__ = lambda self : None;
RESPONSE_swigregister = _pyupm_t6713.RESPONSE_swigregister
RESPONSE_swigregister(RESPONSE)

READ_INPUT_REGISTERS = _pyupm_t6713.READ_INPUT_REGISTERS
WRITE_SINGLE_COIL = _pyupm_t6713.WRITE_SINGLE_COIL
WRITE_SINGLE_HOLDING_REGISTER = _pyupm_t6713.WRITE_SINGLE_HOLDING_REGISTER
class T6713(_object):
    """Proxy of C++ upm::T6713 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, T6713, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, T6713, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::T6713 self, int bus) -> T6713

        Parameters:
            bus: int

        """
        this = _pyupm_t6713.new_T6713(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_t6713.delete_T6713
    __del__ = lambda self : None;
    def getModuleName(self):
        """
        getModuleName(T6713 self) -> char const *

        Parameters:
            self: upm::T6713 *

        """
        return _pyupm_t6713.T6713_getModuleName(self)

    def getPpm(self):
        """
        getPpm(T6713 self) -> uint16_t

        Parameters:
            self: upm::T6713 *

        """
        return _pyupm_t6713.T6713_getPpm(self)

    def getFirmwareRevision(self):
        """
        getFirmwareRevision(T6713 self) -> uint16_t

        Parameters:
            self: upm::T6713 *

        """
        return _pyupm_t6713.T6713_getFirmwareRevision(self)

T6713_swigregister = _pyupm_t6713.T6713_swigregister
T6713_swigregister(T6713)

# This file is compatible with both classic and new-style classes.


