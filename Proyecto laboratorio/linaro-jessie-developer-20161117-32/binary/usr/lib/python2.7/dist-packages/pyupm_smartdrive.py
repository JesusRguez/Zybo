# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_smartdrive', [dirname(__file__)])
        except ImportError:
            import _pyupm_smartdrive
            return _pyupm_smartdrive
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_smartdrive', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_smartdrive = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_smartdrive
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SmartDrive_Motor_ID_1 = _pyupm_smartdrive.SmartDrive_Motor_ID_1
SmartDrive_Motor_ID_2 = _pyupm_smartdrive.SmartDrive_Motor_ID_2
SmartDrive_Motor_ID_BOTH = _pyupm_smartdrive.SmartDrive_Motor_ID_BOTH
SmartDrive_Dir_Reverse = _pyupm_smartdrive.SmartDrive_Dir_Reverse
SmartDrive_Dir_Forward = _pyupm_smartdrive.SmartDrive_Dir_Forward
SmartDrive_Action_Float = _pyupm_smartdrive.SmartDrive_Action_Float
SmartDrive_Action_Brake = _pyupm_smartdrive.SmartDrive_Action_Brake
SmartDrive_Action_BrakeHold = _pyupm_smartdrive.SmartDrive_Action_BrakeHold
SmartDrive_Completion_Wait_For = _pyupm_smartdrive.SmartDrive_Completion_Wait_For
SmartDrive_Completion_Dont_Wait = _pyupm_smartdrive.SmartDrive_Completion_Dont_Wait
SmartDrive_DefaultAddress = _pyupm_smartdrive.SmartDrive_DefaultAddress
SmartDrive_VOLTAGE_MULTIPLIER = _pyupm_smartdrive.SmartDrive_VOLTAGE_MULTIPLIER
SmartDrive_Speed_Full = _pyupm_smartdrive.SmartDrive_Speed_Full
SmartDrive_Speed_Medium = _pyupm_smartdrive.SmartDrive_Speed_Medium
SmartDrive_Speed_Slow = _pyupm_smartdrive.SmartDrive_Speed_Slow
SmartDrive_CONTROL_SPEED = _pyupm_smartdrive.SmartDrive_CONTROL_SPEED
SmartDrive_CONTROL_RAMP = _pyupm_smartdrive.SmartDrive_CONTROL_RAMP
SmartDrive_CONTROL_RELATIVE = _pyupm_smartdrive.SmartDrive_CONTROL_RELATIVE
SmartDrive_CONTROL_TACHO = _pyupm_smartdrive.SmartDrive_CONTROL_TACHO
SmartDrive_CONTROL_BRK = _pyupm_smartdrive.SmartDrive_CONTROL_BRK
SmartDrive_CONTROL_ON = _pyupm_smartdrive.SmartDrive_CONTROL_ON
SmartDrive_CONTROL_TIME = _pyupm_smartdrive.SmartDrive_CONTROL_TIME
SmartDrive_CONTROL_GO = _pyupm_smartdrive.SmartDrive_CONTROL_GO
SmartDrive_COMMAND = _pyupm_smartdrive.SmartDrive_COMMAND
SmartDrive_SETPT_M1 = _pyupm_smartdrive.SmartDrive_SETPT_M1
SmartDrive_SPEED_M1 = _pyupm_smartdrive.SmartDrive_SPEED_M1
SmartDrive_TIME_M1 = _pyupm_smartdrive.SmartDrive_TIME_M1
SmartDrive_CMD_B_M1 = _pyupm_smartdrive.SmartDrive_CMD_B_M1
SmartDrive_CMD_A_M1 = _pyupm_smartdrive.SmartDrive_CMD_A_M1
SmartDrive_SETPT_M2 = _pyupm_smartdrive.SmartDrive_SETPT_M2
SmartDrive_SPEED_M2 = _pyupm_smartdrive.SmartDrive_SPEED_M2
SmartDrive_TIME_M2 = _pyupm_smartdrive.SmartDrive_TIME_M2
SmartDrive_CMD_B_M2 = _pyupm_smartdrive.SmartDrive_CMD_B_M2
SmartDrive_CMD_A_M2 = _pyupm_smartdrive.SmartDrive_CMD_A_M2
SmartDrive_POSITION_M1 = _pyupm_smartdrive.SmartDrive_POSITION_M1
SmartDrive_POSITION_M2 = _pyupm_smartdrive.SmartDrive_POSITION_M2
SmartDrive_STATUS_M1 = _pyupm_smartdrive.SmartDrive_STATUS_M1
SmartDrive_STATUS_M2 = _pyupm_smartdrive.SmartDrive_STATUS_M2
SmartDrive_TASKS_M1 = _pyupm_smartdrive.SmartDrive_TASKS_M1
SmartDrive_TASKS_M2 = _pyupm_smartdrive.SmartDrive_TASKS_M2
SmartDrive_P_Kp = _pyupm_smartdrive.SmartDrive_P_Kp
SmartDrive_P_Ki = _pyupm_smartdrive.SmartDrive_P_Ki
SmartDrive_P_Kd = _pyupm_smartdrive.SmartDrive_P_Kd
SmartDrive_S_Kp = _pyupm_smartdrive.SmartDrive_S_Kp
SmartDrive_S_Ki = _pyupm_smartdrive.SmartDrive_S_Ki
SmartDrive_S_Kd = _pyupm_smartdrive.SmartDrive_S_Kd
SmartDrive_PASSCOUNT = _pyupm_smartdrive.SmartDrive_PASSCOUNT
SmartDrive_PASSTOLERANCE = _pyupm_smartdrive.SmartDrive_PASSTOLERANCE
SmartDrive_CHKSUM = _pyupm_smartdrive.SmartDrive_CHKSUM
SmartDrive_BATT_VOLTAGE = _pyupm_smartdrive.SmartDrive_BATT_VOLTAGE
SmartDrive_RESETSTATUS = _pyupm_smartdrive.SmartDrive_RESETSTATUS
SmartDrive_CURRENT_M1 = _pyupm_smartdrive.SmartDrive_CURRENT_M1
SmartDrive_CURRENT_M2 = _pyupm_smartdrive.SmartDrive_CURRENT_M2
CMD_R = _pyupm_smartdrive.CMD_R
CMD_S = _pyupm_smartdrive.CMD_S
CMD_a = _pyupm_smartdrive.CMD_a
CMD_b = _pyupm_smartdrive.CMD_b
CMD_c = _pyupm_smartdrive.CMD_c
CMD_A = _pyupm_smartdrive.CMD_A
CMD_B = _pyupm_smartdrive.CMD_B
CMD_C = _pyupm_smartdrive.CMD_C
SmartDrive_MOTOR_CONTROL_ON = _pyupm_smartdrive.SmartDrive_MOTOR_CONTROL_ON
SmartDrive_MOTOR_IS_RAMPING = _pyupm_smartdrive.SmartDrive_MOTOR_IS_RAMPING
SmartDrive_MOTOR_IS_POWERED = _pyupm_smartdrive.SmartDrive_MOTOR_IS_POWERED
SmartDrive_MOTOR_POS_CTRL_ON = _pyupm_smartdrive.SmartDrive_MOTOR_POS_CTRL_ON
SmartDrive_MOTOR_IN_BRAKE_MODE = _pyupm_smartdrive.SmartDrive_MOTOR_IN_BRAKE_MODE
SmartDrive_MOTOR_OVERLOADED = _pyupm_smartdrive.SmartDrive_MOTOR_OVERLOADED
SmartDrive_MOTOR_IN_TIME_MODE = _pyupm_smartdrive.SmartDrive_MOTOR_IN_TIME_MODE
SmartDrive_MOTOR_IS_STALLED = _pyupm_smartdrive.SmartDrive_MOTOR_IS_STALLED
class SmartDrive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmartDrive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SmartDrive, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyupm_smartdrive.new_SmartDrive(*args)
        try: self.this.append(this)
        except: self.this = this
    def command(self, *args): return _pyupm_smartdrive.SmartDrive_command(self, *args)
    def GetBattVoltage(self): return _pyupm_smartdrive.SmartDrive_GetBattVoltage(self)
    def ReadTachometerPosition(self, *args): return _pyupm_smartdrive.SmartDrive_ReadTachometerPosition(self, *args)
    def Run_Unlimited(self, *args): return _pyupm_smartdrive.SmartDrive_Run_Unlimited(self, *args)
    def StopMotor(self, *args): return _pyupm_smartdrive.SmartDrive_StopMotor(self, *args)
    def Run_Seconds(self, *args): return _pyupm_smartdrive.SmartDrive_Run_Seconds(self, *args)
    def WaitUntilTimeDone(self, *args): return _pyupm_smartdrive.SmartDrive_WaitUntilTimeDone(self, *args)
    def IsTimeDone(self, *args): return _pyupm_smartdrive.SmartDrive_IsTimeDone(self, *args)
    def Run_Degrees(self, *args): return _pyupm_smartdrive.SmartDrive_Run_Degrees(self, *args)
    def Run_Rotations(self, *args): return _pyupm_smartdrive.SmartDrive_Run_Rotations(self, *args)
    def Run_Tacho(self, *args): return _pyupm_smartdrive.SmartDrive_Run_Tacho(self, *args)
    def WaitUntilTachoDone(self, *args): return _pyupm_smartdrive.SmartDrive_WaitUntilTachoDone(self, *args)
    def IsTachoDone(self, *args): return _pyupm_smartdrive.SmartDrive_IsTachoDone(self, *args)
    def SetPerformanceParameters(self, *args): return _pyupm_smartdrive.SmartDrive_SetPerformanceParameters(self, *args)
    def ReadPerformanceParameters(self): return _pyupm_smartdrive.SmartDrive_ReadPerformanceParameters(self)
    def GetMotorStatus(self, *args): return _pyupm_smartdrive.SmartDrive_GetMotorStatus(self, *args)
    def PrintMotorStatus(self, *args): return _pyupm_smartdrive.SmartDrive_PrintMotorStatus(self, *args)
    __swig_destroy__ = _pyupm_smartdrive.delete_SmartDrive
    __del__ = lambda self : None;
SmartDrive_swigregister = _pyupm_smartdrive.SmartDrive_swigregister
SmartDrive_swigregister(SmartDrive)

# This file is compatible with both classic and new-style classes.


