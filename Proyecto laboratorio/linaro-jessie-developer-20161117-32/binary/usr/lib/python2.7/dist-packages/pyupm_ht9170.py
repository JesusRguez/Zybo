# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_ht9170', [dirname(__file__)])
        except ImportError:
            import _pyupm_ht9170
            return _pyupm_ht9170
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_ht9170', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_ht9170 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_ht9170
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class HT9170(_object):
    """
    API for the HT9170 DTMF Decoder.

    ID: ht9170

    Name: HT9170 DTMF Decoder

    Other Names: HT9170B, HT9170D

    Category: other

    Manufacturer: seeed

    Link:http://www.seeedstudio.com/depot/DTMFDual-Tone-Multi-Frequency-
    Shield-p-1839.html

    Connection: gpio  This driver was developed using the DTMF (Dual-Tone
    Multi-Frequency) Shield by Seeed Studio*. It can decode DTMF signals
    presented at its audio input. It does not generate DTMF signals.

    C++ includes: ht9170.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HT9170, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HT9170, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::HT9170 self, int dr, int o1, int o2, int o3, int o4) -> HT9170

        Parameters:
            dr: int
            o1: int
            o2: int
            o3: int
            o4: int


        HT9170(int dr, int o1,
        int o2, int o3, int o4)

        HT9170 constructor

        Parameters:
        -----------

        dr:  Data ready pin

        o1:  Digital pin for data output 1

        o2:  Digital pin for data output 2

        o3:  Digital pin for data output 3

        o4:  Digital pin for data output 4 
        """
        this = _pyupm_ht9170.new_HT9170(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_ht9170.delete_HT9170
    __del__ = lambda self : None;
    def digitReady(self):
        """
        digitReady(HT9170 self) -> bool

        Parameters:
            self: upm::HT9170 *


        bool digitReady()

        Checks to see if a DTMF number is ready to be read

        True if there is a digit available to decode 
        """
        return _pyupm_ht9170.HT9170_digitReady(self)

    def decodeDigit(self):
        """
        decodeDigit(HT9170 self) -> char

        Parameters:
            self: upm::HT9170 *


        char decodeDigit()

        Decodes a digit and returns it 
        """
        return _pyupm_ht9170.HT9170_decodeDigit(self)

HT9170_swigregister = _pyupm_ht9170.HT9170_swigregister
HT9170_swigregister(HT9170)

# This file is compatible with both classic and new-style classes.


