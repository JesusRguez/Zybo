# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_grovegprs', [dirname(__file__)])
        except ImportError:
            import _pyupm_grovegprs
            return _pyupm_grovegprs
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_grovegprs', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_grovegprs = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_grovegprs
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


GROVEGPRS_DEFAULT_UART = _pyupm_grovegprs.GROVEGPRS_DEFAULT_UART
class GroveGPRS(_object):
    """
    API for the Grove GPRS Module.

    ID: grovegprs

    Name: Grove GPRS Module

    Category: wifi

    Manufacturer: seeed

    Connection: uart

    Link:http://www.seeedstudio.com/wiki/GPRS_Shield_V2.0  The driver was
    tested with the Grove GPRS Module, V2. It's a GSM GPRS module based on
    the SIM900. This module uses a standard 'AT' command set. See the
    datasheet for a full list of available commands and their possible
    responses:

    http://www.seeedstudio.com/wiki/images/7/72/AT_Commands_v1.11.pdf

    It is connected via a UART at 19200 baud.

    C++ includes: grovegprs.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveGPRS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GroveGPRS, name)
    __repr__ = _swig_repr
    def __init__(self, uart=0): 
        """
        __init__(upm::GroveGPRS self, int uart=0) -> GroveGPRS

        Parameters:
            uart: int

        __init__(upm::GroveGPRS self) -> GroveGPRS

        GroveGPRS(int
        uart=GROVEGPRS_DEFAULT_UART)

        GroveGPRS object constructor

        Parameters:
        -----------

        uart:  Default UART to use (0 or 1). Default is 0. 
        """
        this = _pyupm_grovegprs.new_GroveGPRS(uart)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_grovegprs.delete_GroveGPRS
    __del__ = lambda self : None;
    def dataAvailable(self, *args):
        """
        dataAvailable(GroveGPRS self, unsigned int millis) -> bool

        Parameters:
            millis: unsigned int


        bool
        dataAvailable(unsigned int millis)

        Checks to see if there is data available for reading

        Parameters:
        -----------

        millis:  Number of milliseconds to wait; 0 means no waiting

        true if there is data available for reading 
        """
        return _pyupm_grovegprs.GroveGPRS_dataAvailable(self, *args)

    def readData(self, *args):
        """
        readData(GroveGPRS self, char * buffer, unsigned int len) -> int

        Parameters:
            buffer: char *
            len: unsigned int


        int readData(char
        *buffer, unsigned int len)

        Reads any available data into a user-supplied buffer. Note: the call
        blocks until data is available for reading. Use dataAvailable() to
        determine whether there is data available beforehand, to avoid
        blocking.

        Parameters:
        -----------

        buffer:  Buffer to hold the data read

        len:  Length of the buffer

        Number of bytes read 
        """
        return _pyupm_grovegprs.GroveGPRS_readData(self, *args)

    def readDataStr(self, *args):
        """
        readDataStr(GroveGPRS self, int len) -> std::string

        Parameters:
            len: int


        std::string
        readDataStr(int len)

        Reads any available data and returns it in a std::string. Note: the
        call blocks until data is available for reading. Use dataAvailable()
        to determine whether there is data available beforehand, to avoid
        blocking.

        Parameters:
        -----------

        len:  Maximum length of the data to be returned

        Number of bytes read 
        """
        return _pyupm_grovegprs.GroveGPRS_readDataStr(self, *args)

    def writeData(self, *args):
        """
        writeData(GroveGPRS self, char * buffer, unsigned int len) -> int

        Parameters:
            buffer: char *
            len: unsigned int


        int writeData(char
        *buffer, unsigned len)

        Writes the data in the buffer to the device. If you are writing a
        command, be sure to terminate it with a carriage return ()

        Parameters:
        -----------

        buffer:  Buffer to hold the data to write

        len:  Length of the buffer

        Number of bytes written 
        """
        return _pyupm_grovegprs.GroveGPRS_writeData(self, *args)

    def writeDataStr(self, *args):
        """
        writeDataStr(GroveGPRS self, std::string data) -> int

        Parameters:
            data: std::string


        int
        writeDataStr(std::string data)

        Writes the std:string data to the device. If you are writing a
        command, be sure to terminate it with a carriage return ()

        Parameters:
        -----------

        data:  Buffer to write to the device

        Number of bytes written 
        """
        return _pyupm_grovegprs.GroveGPRS_writeDataStr(self, *args)

    def setBaudRate(self, baud=19200):
        """
        setBaudRate(GroveGPRS self, int baud=19200) -> mraa::Result

        Parameters:
            baud: int

        setBaudRate(GroveGPRS self) -> mraa::Result

        Parameters:
            self: upm::GroveGPRS *


        mraa::Result
        setBaudRate(int baud=19200)

        Sets the baud rate for the device. The default is 19200.

        Parameters:
        -----------

        baud:  Desired baud rate.

        true if successful 
        """
        return _pyupm_grovegprs.GroveGPRS_setBaudRate(self, baud)

GroveGPRS_swigregister = _pyupm_grovegprs.GroveGPRS_swigregister
GroveGPRS_swigregister(GroveGPRS)

class charArray(_object):
    """Proxy of C++ charArray class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(charArray self, size_t nelements) -> charArray

        Parameters:
            nelements: size_t

        """
        this = _pyupm_grovegprs.new_charArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_grovegprs.delete_charArray
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """
        __getitem__(charArray self, size_t index) -> char

        Parameters:
            index: size_t

        """
        return _pyupm_grovegprs.charArray___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(charArray self, size_t index, char value)

        Parameters:
            index: size_t
            value: char

        """
        return _pyupm_grovegprs.charArray___setitem__(self, *args)

    def cast(self):
        """
        cast(charArray self) -> char *

        Parameters:
            self: charArray *

        """
        return _pyupm_grovegprs.charArray_cast(self)

    def frompointer(*args):
        """
        frompointer(char * t) -> charArray

        Parameters:
            t: char *

        """
        return _pyupm_grovegprs.charArray_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
charArray_swigregister = _pyupm_grovegprs.charArray_swigregister
charArray_swigregister(charArray)

def charArray_frompointer(*args):
  """
    charArray_frompointer(char * t) -> charArray

    Parameters:
        t: char *

    """
  return _pyupm_grovegprs.charArray_frompointer(*args)

# This file is compatible with both classic and new-style classes.


