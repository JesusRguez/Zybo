# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_uln200xa', [dirname(__file__)])
        except ImportError:
            import _pyupm_uln200xa
            return _pyupm_uln200xa
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_uln200xa', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_uln200xa = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_uln200xa
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class ULN200XA(_object):
    """
    UPM module for the ULN200XA Darlington Stepper Driver.

    ID: uln200xa

    Name: ULN200XA Stepper Driver

    Other Names: ULN2001A ULN2002A ULN2003A ULN2004A

    Category: motor

    Manufacturer: seeed

    Link:http://www.seeedstudio.com/depot/Gear-Stepper-Motor-with-
    Driver-p-1685.html?cPath=39_40

    Connection: gpio  This module was developed on a ULN2003A Stepper
    Driver. It should also support the ULN2001A, ULN2002A, and ULN2004A
    devices, when using to drive the 28BYJ-48 unipolar stepper motor.

    Example driving a stepper motor

    C++ includes: uln200xa.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULN200XA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ULN200XA, name)
    __repr__ = _swig_repr
    DIR_CW = _pyupm_uln200xa.ULN200XA_DIR_CW
    DIR_CCW = _pyupm_uln200xa.ULN200XA_DIR_CCW
    def __init__(self, *args): 
        """
        __init__(upm::ULN200XA self, int stepsPerRev, int i1, int i2, int i3, int i4) -> ULN200XA

        Parameters:
            stepsPerRev: int
            i1: int
            i2: int
            i3: int
            i4: int


        ULN200XA(int
        stepsPerRev, int i1, int i2, int i3, int i4)

        ULN200XA constructor

        Parameters:
        -----------

        stepsPerRev:  Number of steps per full revolution

        i1:  Digital pin to use for stepper input 1

        i2:  Digital pin to use for stepper input 2

        i3:  Digital pin to use for stepper input 3

        i4:  Digital pin to use for stepper input 4 
        """
        this = _pyupm_uln200xa.new_ULN200XA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_uln200xa.delete_ULN200XA
    __del__ = lambda self : None;
    def getMillis(self):
        """
        getMillis(ULN200XA self) -> uint32_t

        Parameters:
            self: upm::ULN200XA *


        uint32_t getMillis()

        Returns the number of milliseconds elapsed since initClock() was last
        called.

        Elapsed milliseconds 
        """
        return _pyupm_uln200xa.ULN200XA_getMillis(self)

    def initClock(self):
        """
        initClock(ULN200XA self)

        Parameters:
            self: upm::ULN200XA *


        void initClock()

        Resets the clock 
        """
        return _pyupm_uln200xa.ULN200XA_initClock(self)

    def setSpeed(self, *args):
        """
        setSpeed(ULN200XA self, int speed)

        Parameters:
            speed: int


        void setSpeed(int
        speed)

        Sets the speed of the stepper motor in revolutions per minute (RPM)

        Parameters:
        -----------

        speed:  Speed to set the motor to, in RPM 
        """
        return _pyupm_uln200xa.ULN200XA_setSpeed(self, *args)

    def setDirection(self, *args):
        """
        setDirection(ULN200XA self, upm::ULN200XA::ULN200XA_DIRECTION_T dir)

        Parameters:
            dir: enum upm::ULN200XA::ULN200XA_DIRECTION_T


        void
        setDirection(ULN200XA_DIRECTION_T dir)

        Sets the direction of the motor, clockwise or counterclockwise

        Parameters:
        -----------

        dir:  Direction to set the motor to 
        """
        return _pyupm_uln200xa.ULN200XA_setDirection(self, *args)

    def stepperSteps(self, *args):
        """
        stepperSteps(ULN200XA self, unsigned int steps)

        Parameters:
            steps: unsigned int


        void
        stepperSteps(unsigned int steps)

        Steps the stepper motor a specified number of steps

        Parameters:
        -----------

        steps:  Number of steps to move the stepper motor 
        """
        return _pyupm_uln200xa.ULN200XA_stepperSteps(self, *args)

    def release(self):
        """
        release(ULN200XA self)

        Parameters:
            self: upm::ULN200XA *


        void release()

        Releases the stepper motor by removing power 
        """
        return _pyupm_uln200xa.ULN200XA_release(self)

ULN200XA_swigregister = _pyupm_uln200xa.ULN200XA_swigregister
ULN200XA_swigregister(ULN200XA)

# This file is compatible with both classic and new-style classes.


