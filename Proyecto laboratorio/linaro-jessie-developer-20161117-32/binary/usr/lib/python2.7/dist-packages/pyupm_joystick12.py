# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_joystick12', [dirname(__file__)])
        except ImportError:
            import _pyupm_joystick12
            return _pyupm_joystick12
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_joystick12', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_joystick12 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_joystick12
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Joystick12(_object):
    """
    API for the ElecFreaks* Joystick v 1.2-1.4 Breakout.

    ID: joystick12

    Name: Analog Joystick

    Category: ainput

    Manufacturer: generic

    Connection: analog

    Kit: robok  This module defines the Joystick API, and implementation
    for the X and Y buttons could be treated as normal GPIO - this enables
    easier interrupt support. This driver should be compatible with any
    2-axis analog joystick.

    C++ includes: joystick12.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Joystick12, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Joystick12, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::Joystick12 self, int pinX, int pinY) -> Joystick12

        Parameters:
            pinX: int
            pinY: int


        Joystick12(int
        pinX, int pinY)

        Instantiates a Joystick object

        Parameters:
        -----------

        pinX:  Analog pin where the X input is connected

        pinY:  Analog pin where the Y input is connected 
        """
        this = _pyupm_joystick12.new_Joystick12(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_joystick12.delete_Joystick12
    __del__ = lambda self : None;
    def getXInput(self):
        """
        getXInput(Joystick12 self) -> float

        Parameters:
            self: upm::Joystick12 *


        float getXInput()

        Gets the X input float X value, ranging from -1 to 1; 0 is mid 
        """
        return _pyupm_joystick12.Joystick12_getXInput(self)

    def getYInput(self):
        """
        getYInput(Joystick12 self) -> float

        Parameters:
            self: upm::Joystick12 *


        float getYInput()

        Gets the Y input

        float Y value, ranging from -1 to 1; 0 is mid 
        """
        return _pyupm_joystick12.Joystick12_getYInput(self)

Joystick12_swigregister = _pyupm_joystick12.Joystick12_swigregister
Joystick12_swigregister(Joystick12)

# This file is compatible with both classic and new-style classes.


