# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_mma7660', [dirname(__file__)])
        except ImportError:
            import _pyupm_mma7660
            return _pyupm_mma7660
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_mma7660', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_mma7660 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_mma7660
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_intp():
  return _pyupm_mma7660.new_intp()
new_intp = _pyupm_mma7660.new_intp

def copy_intp(*args):
  return _pyupm_mma7660.copy_intp(*args)
copy_intp = _pyupm_mma7660.copy_intp

def delete_intp(*args):
  return _pyupm_mma7660.delete_intp(*args)
delete_intp = _pyupm_mma7660.delete_intp

def intp_assign(*args):
  return _pyupm_mma7660.intp_assign(*args)
intp_assign = _pyupm_mma7660.intp_assign

def intp_value(*args):
  return _pyupm_mma7660.intp_value(*args)
intp_value = _pyupm_mma7660.intp_value

def new_floatp():
  return _pyupm_mma7660.new_floatp()
new_floatp = _pyupm_mma7660.new_floatp

def copy_floatp(*args):
  return _pyupm_mma7660.copy_floatp(*args)
copy_floatp = _pyupm_mma7660.copy_floatp

def delete_floatp(*args):
  return _pyupm_mma7660.delete_floatp(*args)
delete_floatp = _pyupm_mma7660.delete_floatp

def floatp_assign(*args):
  return _pyupm_mma7660.floatp_assign(*args)
floatp_assign = _pyupm_mma7660.floatp_assign

def floatp_value(*args):
  return _pyupm_mma7660.floatp_value(*args)
floatp_value = _pyupm_mma7660.floatp_value
MMA7660_I2C_BUS = _pyupm_mma7660.MMA7660_I2C_BUS
MMA7660_DEFAULT_I2C_ADDR = _pyupm_mma7660.MMA7660_DEFAULT_I2C_ADDR
class MMA7660(_object):
    """
    API for the MMA7660 I2C 3-Axis Digital Accelerometer.

    ID: mma7660

    Name: MMA7660 3-Axis Digital Accelerometer

    Other Names: Grove 3-Axis Digital Accelerometer (1.5g)

    Category: accelerometer

    Manufacturer: seeed

    Connection: i2c gpio  UPM module for the MMA7660 I2C 3-axis digital
    accelerometer. This device supports a variety of capabilities,
    including the generation of interrupts for various conditions, tilt
    and basic gesture detection, and X/Y/Z-axis measurements of g-forces
    being applied (up to 1.5g)

    This module was tested with the Grove 3-Axis Digital Accelerometer
    (1.5g)

    C++ includes: mma7660.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMA7660, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMA7660, name)
    __repr__ = _swig_repr
    REG_XOUT = _pyupm_mma7660.MMA7660_REG_XOUT
    REG_YOUT = _pyupm_mma7660.MMA7660_REG_YOUT
    REG_ZOUT = _pyupm_mma7660.MMA7660_REG_ZOUT
    REG_TILT = _pyupm_mma7660.MMA7660_REG_TILT
    REG_SRST = _pyupm_mma7660.MMA7660_REG_SRST
    REG_SPCNT = _pyupm_mma7660.MMA7660_REG_SPCNT
    REG_INTSU = _pyupm_mma7660.MMA7660_REG_INTSU
    REG_MODE = _pyupm_mma7660.MMA7660_REG_MODE
    REG_SR = _pyupm_mma7660.MMA7660_REG_SR
    REG_PDET = _pyupm_mma7660.MMA7660_REG_PDET
    REG_PD = _pyupm_mma7660.MMA7660_REG_PD
    INTR_NONE = _pyupm_mma7660.MMA7660_INTR_NONE
    INTR_FBINT = _pyupm_mma7660.MMA7660_INTR_FBINT
    INTR_PLINT = _pyupm_mma7660.MMA7660_INTR_PLINT
    INTR_PDINT = _pyupm_mma7660.MMA7660_INTR_PDINT
    INTR_ASINT = _pyupm_mma7660.MMA7660_INTR_ASINT
    INTR_GINT = _pyupm_mma7660.MMA7660_INTR_GINT
    INTR_SHINTZ = _pyupm_mma7660.MMA7660_INTR_SHINTZ
    INTR_SHINTY = _pyupm_mma7660.MMA7660_INTR_SHINTY
    INTR_SHINTX = _pyupm_mma7660.MMA7660_INTR_SHINTX
    MODE_MODE = _pyupm_mma7660.MMA7660_MODE_MODE
    MODE_TON = _pyupm_mma7660.MMA7660_MODE_TON
    MODE_AWE = _pyupm_mma7660.MMA7660_MODE_AWE
    MODE_ASE = _pyupm_mma7660.MMA7660_MODE_ASE
    MODE_SCPS = _pyupm_mma7660.MMA7660_MODE_SCPS
    MODE_IPP = _pyupm_mma7660.MMA7660_MODE_IPP
    MODE_IAH = _pyupm_mma7660.MMA7660_MODE_IAH
    BF_UNKNOWN = _pyupm_mma7660.MMA7660_BF_UNKNOWN
    BF_LYING_FRONT = _pyupm_mma7660.MMA7660_BF_LYING_FRONT
    BF_LYING_BACK = _pyupm_mma7660.MMA7660_BF_LYING_BACK
    LP_UNKNOWN = _pyupm_mma7660.MMA7660_LP_UNKNOWN
    LP_LANDSCAPE_LEFT = _pyupm_mma7660.MMA7660_LP_LANDSCAPE_LEFT
    LP_LANDSCAPE_RIGHT = _pyupm_mma7660.MMA7660_LP_LANDSCAPE_RIGHT
    LP_VERT_DOWN = _pyupm_mma7660.MMA7660_LP_VERT_DOWN
    LP_VERT_UP = _pyupm_mma7660.MMA7660_LP_VERT_UP
    AUTOSLEEP_120 = _pyupm_mma7660.MMA7660_AUTOSLEEP_120
    AUTOSLEEP_64 = _pyupm_mma7660.MMA7660_AUTOSLEEP_64
    AUTOSLEEP_32 = _pyupm_mma7660.MMA7660_AUTOSLEEP_32
    AUTOSLEEP_16 = _pyupm_mma7660.MMA7660_AUTOSLEEP_16
    AUTOSLEEP_8 = _pyupm_mma7660.MMA7660_AUTOSLEEP_8
    AUTOSLEEP_4 = _pyupm_mma7660.MMA7660_AUTOSLEEP_4
    AUTOSLEEP_2 = _pyupm_mma7660.MMA7660_AUTOSLEEP_2
    AUTOSLEEP_1 = _pyupm_mma7660.MMA7660_AUTOSLEEP_1
    def __init__(self, *args): 
        """
        __init__(upm::MMA7660 self, int bus, uint8_t address=0x4c) -> MMA7660

        Parameters:
            bus: int
            address: uint8_t

        __init__(upm::MMA7660 self, int bus) -> MMA7660

        Parameters:
            bus: int


        MMA7660(int bus,
        uint8_t address=MMA7660_DEFAULT_I2C_ADDR)

        MMA7660 constructor

        Parameters:
        -----------

        bus:  I2C bus to use

        address:  Address for this sensor; default is 0x55 
        """
        this = _pyupm_mma7660.new_MMA7660(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_mma7660.delete_MMA7660
    __del__ = lambda self : None;
    def writeByte(self, *args):
        """
        writeByte(MMA7660 self, uint8_t reg, uint8_t byte) -> bool

        Parameters:
            reg: uint8_t
            byte: uint8_t


        bool
        writeByte(uint8_t reg, uint8_t byte)

        Writes a byte value into a register

        Parameters:
        -----------

        reg:  Register location to write into

        byte:  Byte to write

        True if successful 
        """
        return _pyupm_mma7660.MMA7660_writeByte(self, *args)

    def readByte(self, *args):
        """
        readByte(MMA7660 self, uint8_t reg) -> uint8_t

        Parameters:
            reg: uint8_t


        uint8_t
        readByte(uint8_t reg)

        Reads a byte value from a register

        Parameters:
        -----------

        reg:  Register location to read from

        Value in a specified register 
        """
        return _pyupm_mma7660.MMA7660_readByte(self, *args)

    def getRawValues(self, *args):
        """
        getRawValues(MMA7660 self, int * x, int * y, int * z)

        Parameters:
            x: int *
            y: int *
            z: int *


        void
        getRawValues(int *x, int *y, int *z)

        Reads the current value of conversion

        Parameters:
        -----------

        x:  Returned x value

        y:  Returned y value

        z:  Returned z value 
        """
        return _pyupm_mma7660.MMA7660_getRawValues(self, *args)

    def getAcceleration(self, *args):
        """
        getAcceleration(MMA7660 self, float * ax, float * ay, float * az)

        Parameters:
            ax: float *
            ay: float *
            az: float *


        void
        getAcceleration(float *ax, float *ay, float *az)

        Gets the computed acceleration

        Parameters:
        -----------

        ax:  Returned computed acceleration of the X-axis

        ay:  Returned computed acceleration of the Y-axis

        az:  Returned computed acceleration of the Z-axis 
        """
        return _pyupm_mma7660.MMA7660_getAcceleration(self, *args)

    def getVerifiedAxis(self, *args):
        """
        getVerifiedAxis(MMA7660 self, upm::MMA7660::MMA7660_REG_T axis) -> int

        Parameters:
            axis: enum upm::MMA7660::MMA7660_REG_T


        int
        getVerifiedAxis(MMA7660_REG_T axis)

        Reads an axis, verifying its validity. The value passed must be one of
        REG_XOUT, REG_YOUT, or REG_ZOUT.

        Parameters:
        -----------

        axis:  Axis to read

        Axis value 
        """
        return _pyupm_mma7660.MMA7660_getVerifiedAxis(self, *args)

    def getVerifiedTilt(self):
        """
        getVerifiedTilt(MMA7660 self) -> uint8_t

        Parameters:
            self: upm::MMA7660 *


        uint8_t
        getVerifiedTilt()

        Reads the tilt register, verifying its validity

        Tilt value 
        """
        return _pyupm_mma7660.MMA7660_getVerifiedTilt(self)

    def setModeActive(self):
        """
        setModeActive(MMA7660 self)

        Parameters:
            self: upm::MMA7660 *


        void
        setModeActive()

        Puts the device in the active mode. In this mode, register writes are
        not allowed. Place the device in the standby mode before attempting to
        write registers. 
        """
        return _pyupm_mma7660.MMA7660_setModeActive(self)

    def setModeStandby(self):
        """
        setModeStandby(MMA7660 self)

        Parameters:
            self: upm::MMA7660 *


        void
        setModeStandby()

        Puts the device in the standby (power saving) mode. Note: when in the
        standby mode, there is no valid data in the registers. In addition,
        the only way to write a register is to put the device in the standby
        mode. 
        """
        return _pyupm_mma7660.MMA7660_setModeStandby(self)

    def tiltBackFront(self):
        """
        tiltBackFront(MMA7660 self) -> uint8_t

        Parameters:
            self: upm::MMA7660 *


        uint8_t
        tiltBackFront()

        Reads tiltBackFront bits

        The value returned is one of the MMA7660_TILT_BF_T values

        Bits corresponding to the BackFront tilt status 
        """
        return _pyupm_mma7660.MMA7660_tiltBackFront(self)

    def tiltLandscapePortrait(self):
        """
        tiltLandscapePortrait(MMA7660 self) -> uint8_t

        Parameters:
            self: upm::MMA7660 *


        uint8_t
        tiltLandscapePortrait()

        Reads tiltLandscapePortrait bits

        The value returned is one of the MMA7660_TILT_LP_T values

        Bits corresponding to the LandscapePortrait tilt status 
        """
        return _pyupm_mma7660.MMA7660_tiltLandscapePortrait(self)

    def tiltTap(self):
        """
        tiltTap(MMA7660 self) -> bool

        Parameters:
            self: upm::MMA7660 *


        bool tiltTap()

        Reads the tiltTap status

        True if a tap is detected 
        """
        return _pyupm_mma7660.MMA7660_tiltTap(self)

    def tiltShake(self):
        """
        tiltShake(MMA7660 self) -> bool

        Parameters:
            self: upm::MMA7660 *


        bool tiltShake()

        Reads the tiltShake status

        True if a shake is detected 
        """
        return _pyupm_mma7660.MMA7660_tiltShake(self)

    def installISR(self, *args):
        """
        installISR(MMA7660 self, int pin, void (*)(void *) isr, void * arg)

        Parameters:
            pin: int
            isr: void (*)(void *)
            arg: void *


        void installISR(int
        pin, void(*isr)(void *), void *arg)

        Installs an interrupt service routine (ISR) to be called when an
        interrupt occurs

        Parameters:
        -----------

        pin:  GPIO pin to use as the interrupt pin

        fptr:  Pointer to a function to be called on interrupt

        arg:  Pointer to an object to be supplied as an argument to the ISR.

        """
        return _pyupm_mma7660.MMA7660_installISR(self, *args)

    def uninstallISR(self):
        """
        uninstallISR(MMA7660 self)

        Parameters:
            self: upm::MMA7660 *


        void
        uninstallISR()

        Uninstalls the previously installed ISR 
        """
        return _pyupm_mma7660.MMA7660_uninstallISR(self)

    def setInterruptBits(self, *args):
        """
        setInterruptBits(MMA7660 self, uint8_t ibits) -> bool

        Parameters:
            ibits: uint8_t


        bool
        setInterruptBits(uint8_t ibits)

        Enables interrupt generation based on passed interrupt bits. The bits
        are a bitmask of the requested MMA7660_INTR_T values. Note: the device
        must be in the standby mode to set this register.

        Parameters:
        -----------

        ibits:  Sets the requested interrupt bits

        True if successful 
        """
        return _pyupm_mma7660.MMA7660_setInterruptBits(self, *args)

    def setSampleRate(self, *args):
        """
        setSampleRate(MMA7660 self, upm::MMA7660::MMA7660_AUTOSLEEP_T sr) -> bool

        Parameters:
            sr: enum upm::MMA7660::MMA7660_AUTOSLEEP_T


        bool
        setSampleRate(MMA7660_AUTOSLEEP_T sr)

        Sets the sampling rate of the sensor. The value supplied must be one
        of the MMA7660_AUTOSLEEP_T values.

        Parameters:
        -----------

        sr:  One of the MMA7660_AUTOSLEEP_T values

        True if successful 
        """
        return _pyupm_mma7660.MMA7660_setSampleRate(self, *args)

MMA7660_swigregister = _pyupm_mma7660.MMA7660_swigregister
MMA7660_swigregister(MMA7660)

# This file is compatible with both classic and new-style classes.


