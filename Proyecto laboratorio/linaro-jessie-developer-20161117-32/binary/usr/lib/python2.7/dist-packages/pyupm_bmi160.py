# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_bmi160', [dirname(__file__)])
        except ImportError:
            import _pyupm_bmi160
            return _pyupm_bmi160
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_bmi160', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_bmi160 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_bmi160
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_floatp():
  """new_floatp() -> float *"""
  return _pyupm_bmi160.new_floatp()

def copy_floatp(*args):
  """
    copy_floatp(float value) -> float *

    Parameters:
        value: float

    """
  return _pyupm_bmi160.copy_floatp(*args)

def delete_floatp(*args):
  """
    delete_floatp(float * obj)

    Parameters:
        obj: float *

    """
  return _pyupm_bmi160.delete_floatp(*args)

def floatp_assign(*args):
  """
    floatp_assign(float * obj, float value)

    Parameters:
        obj: float *
        value: float

    """
  return _pyupm_bmi160.floatp_assign(*args)

def floatp_value(*args):
  """
    floatp_value(float * obj) -> float

    Parameters:
        obj: float *

    """
  return _pyupm_bmi160.floatp_value(*args)
BMI160_I2C_BUS = _pyupm_bmi160.BMI160_I2C_BUS
BMI160_DEFAULT_I2C_ADDR = _pyupm_bmi160.BMI160_DEFAULT_I2C_ADDR
class BMI160(_object):
    """
    UPM API for the BMI160 3-axis Accelerometer, Gyroscope and
    Magnetometer.

    ID: bmi160

    Name: UPM API for the BMI160 3-axis Accelerometer, Gyroscope and
    Magnetometer

    Category: accelerometer compass

    Manufacturer: mouser

    Connection: i2c

    Link:http://www.mouser.com/ProductDetail/Bosch-
    Sensortec/0330SB2187/?qs=sGAEpiMZZMvi6wO7nhr1L9JELKA6cYRX60mAGNTn0fQ%3d
    The Bosch BMI160 is a 3-axis Accelerometer and Gyroscope. Additionally
    it supports an external Magnetometer, accessed through the BMI160's
    register interface. This driver was developed with a BMI160
    "Shuttle" board, which included a BMM150 Magnetometer.

    The device is driven by either 1.8v or 3.3vdc. This driver
    incorporates the Bosch BMI160 driver code
    athttps://github.com/BoschSensortec/BMI160_driver .

    While not all of the functionality of this device is supported
    initially, the inclusion of the Bosch driver in the source code makes
    it possible to support whatever features are required that the driver
    can support.

    C++ includes: bmi160.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BMI160, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BMI160, name)
    __repr__ = _swig_repr
    ACCEL_RANGE_2G = _pyupm_bmi160.BMI160_ACCEL_RANGE_2G
    ACCEL_RANGE_4G = _pyupm_bmi160.BMI160_ACCEL_RANGE_4G
    ACCEL_RANGE_8G = _pyupm_bmi160.BMI160_ACCEL_RANGE_8G
    ACCEL_RANGE_16G = _pyupm_bmi160.BMI160_ACCEL_RANGE_16G
    GYRO_RANGE_125 = _pyupm_bmi160.BMI160_GYRO_RANGE_125
    GYRO_RANGE_250 = _pyupm_bmi160.BMI160_GYRO_RANGE_250
    GYRO_RANGE_500 = _pyupm_bmi160.BMI160_GYRO_RANGE_500
    GYRO_RANGE_1000 = _pyupm_bmi160.BMI160_GYRO_RANGE_1000
    GYRO_RANGE_2000 = _pyupm_bmi160.BMI160_GYRO_RANGE_2000
    def __init__(self, bus=0, address=0x69): 
        """
        __init__(upm::BMI160 self, int bus=0, uint8_t address=0x69) -> BMI160

        Parameters:
            bus: int
            address: uint8_t

        __init__(upm::BMI160 self, int bus=0) -> BMI160

        Parameters:
            bus: int

        __init__(upm::BMI160 self) -> BMI160

        BMI160(int
        bus=BMI160_I2C_BUS, uint8_t address=BMI160_DEFAULT_I2C_ADDR)

        bmi160 constructor

        Parameters:
        -----------

        bus:  i2c bus to use

        address:  the address for this device 
        """
        this = _pyupm_bmi160.new_BMI160(bus, address)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_bmi160.delete_BMI160
    __del__ = lambda self : None;
    def update(self):
        """
        update(BMI160 self)

        Parameters:
            self: upm::BMI160 *


        void update()

        Take a measurement and store the current sensor values internally.
        This function must be called prior to retrieving any sensor values,
        for example getAccelerometer(). 
        """
        return _pyupm_bmi160.BMI160_update(self)

    def setAccelerometerScale(self, *args):
        """
        setAccelerometerScale(BMI160 self, upm::BMI160::ACCEL_RANGE_T scale)

        Parameters:
            scale: enum upm::BMI160::ACCEL_RANGE_T


        void
        setAccelerometerScale(ACCEL_RANGE_T scale)

        set the scaling mode of the accelerometer

        Parameters:
        -----------

        scale:  one of the ACCEL_RANGE_T values 
        """
        return _pyupm_bmi160.BMI160_setAccelerometerScale(self, *args)

    def setGyroscopeScale(self, *args):
        """
        setGyroscopeScale(BMI160 self, upm::BMI160::GYRO_RANGE_T scale)

        Parameters:
            scale: enum upm::BMI160::GYRO_RANGE_T


        void
        setGyroscopeScale(GYRO_RANGE_T scale)

        set the scaling mode of the gyroscope

        Parameters:
        -----------

        scale:  one of the GYRO_RANGE_T values 
        """
        return _pyupm_bmi160.BMI160_setGyroscopeScale(self, *args)

    def getAccelerometer(self, *args):
        """
        getAccelerometer(BMI160 self) -> float
        getAccelerometer(BMI160 self, float * x, float * y, float * z)

        Parameters:
            x: float *
            y: float *
            z: float *


        void
        getAccelerometer(float *x, float *y, float *z)

        Get the Accelerometer values. The values returned are in gravities.
        update() must have been called prior to calling this method.

        Parameters:
        -----------

        x:  A pointer into which the X value will be returned

        y:  A pointer into which the Y value will be returned

        z:  A pointer into which the Z value will be returned 
        """
        return _pyupm_bmi160.BMI160_getAccelerometer(self, *args)

    def getGyroscope(self, *args):
        """
        getGyroscope(BMI160 self) -> float
        getGyroscope(BMI160 self, float * x, float * y, float * z)

        Parameters:
            x: float *
            y: float *
            z: float *


        void
        getGyroscope(float *x, float *y, float *z)

        Get the Gyroscope values. The values returned are in degrees per
        second. update() must have been called prior to calling this method.

        Parameters:
        -----------

        x:  A pointer into which the X value will be returned

        y:  A pointer into which the Y value will be returned

        z:  A pointer into which the Z value will be returned 
        """
        return _pyupm_bmi160.BMI160_getGyroscope(self, *args)

    def getMagnetometer(self, *args):
        """
        getMagnetometer(BMI160 self) -> float
        getMagnetometer(BMI160 self, float * x, float * y, float * z)

        Parameters:
            x: float *
            y: float *
            z: float *


        void
        getMagnetometer(float *x, float *y, float *z)

        Get the Magnetometer values. The values returned are in micro Teslas.
        update() must have been called prior to calling this method.

        Parameters:
        -----------

        x:  A pointer into which the X value will be returned

        y:  A pointer into which the Y value will be returned

        z:  A pointer into which the Z value will be returned 
        """
        return _pyupm_bmi160.BMI160_getMagnetometer(self, *args)

    def enableMagnetometer(self, *args):
        """
        enableMagnetometer(BMI160 self, bool enable)

        Parameters:
            enable: bool


        void
        enableMagnetometer(bool enable)

        Enable or disable the Magnetometer. By default, the magnetometer is
        enabled.

        Parameters:
        -----------

        enable:  true to enable the magnetometer, false to disable. 
        """
        return _pyupm_bmi160.BMI160_enableMagnetometer(self, *args)

    def getSensorTime(self):
        """
        getSensorTime(BMI160 self) -> unsigned int

        Parameters:
            self: upm::BMI160 *


        unsigned int
        getSensorTime()

        Return the sensor time. This is a 24bit value that increments every
        39us. It will wrap around once the 24b resolution is exceeded.

        The current sensor time. 
        """
        return _pyupm_bmi160.BMI160_getSensorTime(self)

BMI160_swigregister = _pyupm_bmi160.BMI160_swigregister
BMI160_swigregister(BMI160)

# This file is compatible with both classic and new-style classes.


