# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_hcsr04', [dirname(__file__)])
        except ImportError:
            import _pyupm_hcsr04
            return _pyupm_hcsr04
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_hcsr04', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_hcsr04 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_hcsr04
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


CM = _pyupm_hcsr04.CM
INC = _pyupm_hcsr04.INC
class HCSR04(_object):
    """
    API for the HC-SR04 Ultrasonic Sensor.

    ID: hcsr04

    Name: HC-SR04 Ultrasonic Sensor

    Category: sound

    Manufacturer: generic

    Connection: gpio  This module defines the HC-SR04 interface for
    libhcsr04

    C++ includes: hcsr04.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HCSR04, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HCSR04, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::HCSR04 self, uint8_t triggerPin, uint8_t echoPin) -> HCSR04

        Parameters:
            triggerPin: uint8_t
            echoPin: uint8_t


        HCSR04(uint8_t
        triggerPin, uint8_t echoPin)

        Instantiates an HCSR04 object

        Parameters:
        -----------

        triggerPin:  Pin to trigger the sensor for distance

        echoPin:  Pulse response to triggering

        fptr:  Function pointer to handle rising-edge and falling-edge
        interrupts 
        """
        this = _pyupm_hcsr04.new_HCSR04(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_hcsr04.delete_HCSR04
    __del__ = lambda self : None;
    def getDistance(self, *args):
        """
        getDistance(HCSR04 self, int sys) -> double

        Parameters:
            sys: int


        double
        getDistance(int sys)

        Gets the distance from the sensor 
        """
        return _pyupm_hcsr04.HCSR04_getDistance(self, *args)

    __swig_setmethods__["m_doWork"] = _pyupm_hcsr04.HCSR04_m_doWork_set
    __swig_getmethods__["m_doWork"] = _pyupm_hcsr04.HCSR04_m_doWork_get
    if _newclass:m_doWork = _swig_property(_pyupm_hcsr04.HCSR04_m_doWork_get, _pyupm_hcsr04.HCSR04_m_doWork_set)
    def name(self):
        """
        name(HCSR04 self) -> std::string

        Parameters:
            self: upm::HCSR04 *


        std::string name()

        Returns the name of the sensor 
        """
        return _pyupm_hcsr04.HCSR04_name(self)

HCSR04_swigregister = _pyupm_hcsr04.HCSR04_swigregister
HCSR04_swigregister(HCSR04)

# This file is compatible with both classic and new-style classes.


