# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_ecs1030', [dirname(__file__)])
        except ImportError:
            import _pyupm_ecs1030
            return _pyupm_ecs1030
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_ecs1030', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_ecs1030 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_ecs1030
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


NUMBER_OF_SAMPLES = _pyupm_ecs1030.NUMBER_OF_SAMPLES
ADC_RESOLUTION = _pyupm_ecs1030.ADC_RESOLUTION
SUPPLYVOLTAGE = _pyupm_ecs1030.SUPPLYVOLTAGE
CURRENT_RATIO = _pyupm_ecs1030.CURRENT_RATIO
HIGH = _pyupm_ecs1030.HIGH
LOW = _pyupm_ecs1030.LOW
TRUE = _pyupm_ecs1030.TRUE
FALSE = _pyupm_ecs1030.FALSE
class ECS1030(_object):
    """
    API for the ECS1030 Non-Invasive Current/Electricity Sensor.

    ID: ecs1030

    Name: ECS1030 Non-Invasive Current Sensor

    Category: electric

    Manufacturer: sparkfun

    Link:https://www.sparkfun.com/products/11005

    Connection: analog  This non-invasive current sensor can be clamped
    around the supply line of an electrical load to tell you how much
    current is passing through it. It does this by acting as an inductor
    and responding to the magnetic field around a current-carrying
    conductor. This particular current sensor measures a load up to 30 A,
    which makes it great for building your own energy monitors.

    ECS1030 Sensor image provided by SparkFun* underCC BY-NC-SA-3.0.

    C++ includes: ecs1030.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ECS1030, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ECS1030, name)
    __repr__ = _swig_repr
    DELAY_MS = _pyupm_ecs1030.ECS1030_DELAY_MS
    VOLT_M = _pyupm_ecs1030.ECS1030_VOLT_M
    R_LOAD = _pyupm_ecs1030.ECS1030_R_LOAD
    def __init__(self, *args): 
        """
        __init__(upm::ECS1030 self, uint8_t pinNumber) -> ECS1030

        Parameters:
            pinNumber: uint8_t


        ECS1030(uint8_t
        pinNumber)

        Instantiates an ECS1030 object

        Parameters:
        -----------

        pinNumber:  Number of the data pin 
        """
        this = _pyupm_ecs1030.new_ECS1030(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_ecs1030.delete_ECS1030
    __del__ = lambda self : None;
    def getCurrency_A(self):
        """
        getCurrency_A(ECS1030 self) -> double

        Parameters:
            self: upm::ECS1030 *


        double
        getCurrency_A()

        Returns electric current data for a sampled period 
        """
        return _pyupm_ecs1030.ECS1030_getCurrency_A(self)

    def getPower_A(self):
        """
        getPower_A(ECS1030 self) -> double

        Parameters:
            self: upm::ECS1030 *


        double getPower_A()

        Returns power data for a sampled period 
        """
        return _pyupm_ecs1030.ECS1030_getPower_A(self)

    def getCurrency_B(self):
        """
        getCurrency_B(ECS1030 self) -> double

        Parameters:
            self: upm::ECS1030 *


        double
        getCurrency_B()

        Returns electric current data for a sampled period 
        """
        return _pyupm_ecs1030.ECS1030_getCurrency_B(self)

    def getPower_B(self):
        """
        getPower_B(ECS1030 self) -> double

        Parameters:
            self: upm::ECS1030 *


        double getPower_B()

        Returns power data for a sampled period 
        """
        return _pyupm_ecs1030.ECS1030_getPower_B(self)

    def name(self):
        """
        name(ECS1030 self) -> std::string

        Parameters:
            self: upm::ECS1030 *


        std::string name()

        Returns the name of the component 
        """
        return _pyupm_ecs1030.ECS1030_name(self)

ECS1030_swigregister = _pyupm_ecs1030.ECS1030_swigregister
ECS1030_swigregister(ECS1030)

# This file is compatible with both classic and new-style classes.


