# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_buzzer', [dirname(__file__)])
        except ImportError:
            import _pyupm_buzzer
            return _pyupm_buzzer
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_buzzer', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_buzzer = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_buzzer
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


DO = _pyupm_buzzer.DO
RE = _pyupm_buzzer.RE
MI = _pyupm_buzzer.MI
FA = _pyupm_buzzer.FA
SOL = _pyupm_buzzer.SOL
LA = _pyupm_buzzer.LA
SI = _pyupm_buzzer.SI
class Buzzer(_object):
    """
    API for the Buzzer component.

    ID: buzzer

    Name: Grove Buzzer

    Category: sound

    Manufacturer: seeed

    Connection: pwm

    Kit: gsk  This module defines the Buzzer interface for libbuzzer. This
    sensor can make different tones when connected to a pin capable of
    analog pulse-width modulation. It emits sound using a piezoelectric
    material that vibrates at different frequencies based on the input
    voltage.

    C++ includes: buzzer.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Buzzer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Buzzer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::Buzzer self, int pinNumber) -> Buzzer

        Parameters:
            pinNumber: int


        Buzzer(int pinNumber)

        Instantiates a Buzzer object.

        Parameters:
        -----------

        pinNumber:   Buzzer pin number 
        """
        this = _pyupm_buzzer.new_Buzzer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_buzzer.delete_Buzzer
    __del__ = lambda self : None;
    def playSound(self, *args):
        """
        playSound(Buzzer self, int note, int delay) -> int

        Parameters:
            note: int
            delay: int


        int playSound(int
        note, int delay)

        Plays a tone for a certain amount of time or indefinitely. When delay
        is not used, the sound can be stopped by calling stopSound().

        Parameters:
        -----------

        note:  Note to play (C, D, E, etc.) or frequency

        delay:  Time in microseconds for which to play the sound; if the value
        is 0, the sound is played indefinitely

        Note played 
        """
        return _pyupm_buzzer.Buzzer_playSound(self, *args)

    def stopSound(self):
        """
        stopSound(Buzzer self)

        Parameters:
            self: upm::Buzzer *


        void stopSound()

        Stops the sound currently playing. Should be called when playSound()
        does not have a delay value. 
        """
        return _pyupm_buzzer.Buzzer_stopSound(self)

    def setVolume(self, *args):
        """
        setVolume(Buzzer self, float vol)

        Parameters:
            vol: float


        void setVolume(float
        vol)

        Sets the volume for the buzzer, but may affect the sound timbre. Works
        best with halved values; e.g., 1.0, 0.5, 0.25, etc.

        Parameters:
        -----------

        vol:  Value to set the volume to, from 0.0 to 1.0 
        """
        return _pyupm_buzzer.Buzzer_setVolume(self, *args)

    def getVolume(self):
        """
        getVolume(Buzzer self) -> float

        Parameters:
            self: upm::Buzzer *


        float getVolume()

        Gets the buzzer volume.

        Value the volume was set to 
        """
        return _pyupm_buzzer.Buzzer_getVolume(self)

    def name(self):
        """
        name(Buzzer self) -> std::string

        Parameters:
            self: upm::Buzzer *


        std::string name()

        Returns the name of the sensor.

        Name of the sensor 
        """
        return _pyupm_buzzer.Buzzer_name(self)

Buzzer_swigregister = _pyupm_buzzer.Buzzer_swigregister
Buzzer_swigregister(Buzzer)

# This file is compatible with both classic and new-style classes.


