# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_bmpx8x', [dirname(__file__)])
        except ImportError:
            import _pyupm_bmpx8x
            return _pyupm_bmpx8x
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_bmpx8x', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_bmpx8x = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_bmpx8x
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


ADDR = _pyupm_bmpx8x.ADDR
BMP085_ULTRALOWPOWER = _pyupm_bmpx8x.BMP085_ULTRALOWPOWER
BMP085_STANDARD = _pyupm_bmpx8x.BMP085_STANDARD
BMP085_HIGHRES = _pyupm_bmpx8x.BMP085_HIGHRES
BMP085_ULTRAHIGHRES = _pyupm_bmpx8x.BMP085_ULTRAHIGHRES
BMP085_CAL_AC1 = _pyupm_bmpx8x.BMP085_CAL_AC1
BMP085_CAL_AC2 = _pyupm_bmpx8x.BMP085_CAL_AC2
BMP085_CAL_AC3 = _pyupm_bmpx8x.BMP085_CAL_AC3
BMP085_CAL_AC4 = _pyupm_bmpx8x.BMP085_CAL_AC4
BMP085_CAL_AC5 = _pyupm_bmpx8x.BMP085_CAL_AC5
BMP085_CAL_AC6 = _pyupm_bmpx8x.BMP085_CAL_AC6
BMP085_CAL_B1 = _pyupm_bmpx8x.BMP085_CAL_B1
BMP085_CAL_B2 = _pyupm_bmpx8x.BMP085_CAL_B2
BMP085_CAL_MB = _pyupm_bmpx8x.BMP085_CAL_MB
BMP085_CAL_MC = _pyupm_bmpx8x.BMP085_CAL_MC
BMP085_CAL_MD = _pyupm_bmpx8x.BMP085_CAL_MD
BMP085_CONTROL = _pyupm_bmpx8x.BMP085_CONTROL
BMP085_TEMPDATA = _pyupm_bmpx8x.BMP085_TEMPDATA
BMP085_PRESSUREDATA = _pyupm_bmpx8x.BMP085_PRESSUREDATA
BMP085_READTEMPCMD = _pyupm_bmpx8x.BMP085_READTEMPCMD
BMP085_READPRESSURECMD = _pyupm_bmpx8x.BMP085_READPRESSURECMD
HIGH = _pyupm_bmpx8x.HIGH
LOW = _pyupm_bmpx8x.LOW
class BMPX8X(_object):
    """
    API for the GY65/BMP085 and BMP180 Atmospheric Pressure Sensors.

    ID: bmpx8x

    Name: BMP Atmospheric Pressure Sensor

    Other Names: GY65 BMP085 BMP180 BMP183

    Category: pressure

    Manufacturer: seeed adafruit sparkfun

    Connection: i2c  Bosch GY65/BMP085 and BMP180 are high-precision,
    ultra-low power consumption pressure sensors. They operate in the
    range of 30,000-110,000 Pa.

    This module has been tested on the GY65/BMP085 and BMP180 sensors.

    C++ includes: bmpx8x.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BMPX8X, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BMPX8X, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        BMPX8X(int bus, int
        devAddr=0x77, uint8_t mode=BMP085_ULTRAHIGHRES)

        Instantiates a BMPX8X object

        Parameters:
        -----------

        bus:  Number of the used bus

        devAddr:  Address of the used I2C device

        mode:  BMP085 mode 
        """
        this = _pyupm_bmpx8x.new_BMPX8X(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPressure(self):
        """
        int32_t
        getPressure()

        BMPX8X object destructor; basically, it closes the I2C connection.
        ~BMPX8X (); LE: there is no need for the destructor, as the I2C
        connection will be closed when the m_i2ControlCtx variable will go out
        of scope (when all the BMPX8X objects will be destroyed) Returns the
        calculated pressure 
        """
        return _pyupm_bmpx8x.BMPX8X_getPressure(self)

    def getPressureRaw(self):
        """
        int32_t
        getPressureRaw()

        Gets raw pressure data 
        """
        return _pyupm_bmpx8x.BMPX8X_getPressureRaw(self)

    def getTemperatureRaw(self):
        """
        int16_t
        getTemperatureRaw()

        Gets raw temperature data from the sensor 
        """
        return _pyupm_bmpx8x.BMPX8X_getTemperatureRaw(self)

    def getTemperature(self):
        """
        float
        getTemperature()

        Returns the calculated temperature 
        """
        return _pyupm_bmpx8x.BMPX8X_getTemperature(self)

    def getSealevelPressure(self, altitudeMeters=0):
        """
        int32_t
        getSealevelPressure(float altitudeMeters=0)

        With a given absolute altitude, sea level can be calculated

        Parameters:
        -----------

        altitudeMeters:  Altitude 
        """
        return _pyupm_bmpx8x.BMPX8X_getSealevelPressure(self, altitudeMeters)

    def getAltitude(self, sealevelPressure=101325):
        """
        float
        getAltitude(float sealevelPressure=101325)

        With a given sea level, altitude in meters can be calculated

        Parameters:
        -----------

        sealevelPressure:  Sea level 
        """
        return _pyupm_bmpx8x.BMPX8X_getAltitude(self, sealevelPressure)

    def getTemperatureCelcius(self):
        """
        int
        getTemperatureCelcius()

        Return latest calculated temperature value in Celcius See
        ITemperatureSensor 
        """
        return _pyupm_bmpx8x.BMPX8X_getTemperatureCelcius(self)

    def getModuleName(self):
        """
        const char *
        getModuleName()

        Returns name of module. This is the string in library name after
        libupm_

        name of module 
        """
        return _pyupm_bmpx8x.BMPX8X_getModuleName(self)

    def computeB5(self, *args):
        """
        int32_t
        computeB5(int32_t UT)

        Calculates B5 (check the spec for more information)

        Parameters:
        -----------

        UT:  
        """
        return _pyupm_bmpx8x.BMPX8X_computeB5(self, *args)

    def i2cReadReg_16(self, *args):
        """
        uint16_t
        i2cReadReg_16(int reg)

        Reads a two-byte register

        Parameters:
        -----------

        reg:  Address of the register 
        """
        return _pyupm_bmpx8x.BMPX8X_i2cReadReg_16(self, *args)

    def i2cWriteReg(self, *args):
        """
        mraa::Result
        i2cWriteReg(uint8_t reg, uint8_t value)

        Writes to a one-byte register

        Parameters:
        -----------

        reg:  Address of the register

        value:  Byte to be written 
        """
        return _pyupm_bmpx8x.BMPX8X_i2cWriteReg(self, *args)

    def i2cReadReg_8(self, *args):
        """
        uint8_t
        i2cReadReg_8(int reg)

        Reads a one-byte register

        Parameters:
        -----------

        reg:  Address of the register 
        """
        return _pyupm_bmpx8x.BMPX8X_i2cReadReg_8(self, *args)

    __swig_destroy__ = _pyupm_bmpx8x.delete_BMPX8X
    __del__ = lambda self : None;
BMPX8X_swigregister = _pyupm_bmpx8x.BMPX8X_swigregister
BMPX8X_swigregister(BMPX8X)

# This file is compatible with both classic and new-style classes.


