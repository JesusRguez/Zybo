# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_si7005', [dirname(__file__)])
        except ImportError:
            import _pyupm_si7005
            return _pyupm_si7005
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_si7005', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_si7005 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_si7005
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SI7005_ADDRESS = _pyupm_si7005.SI7005_ADDRESS
SI7005_NOT_FOUND = _pyupm_si7005.SI7005_NOT_FOUND
class SI7005(_object):
    """Proxy of C++ upm::SI7005 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SI7005, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SI7005, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::SI7005 self, int bus, int pin) -> SI7005

        Parameters:
            bus: int
            pin: int

        """
        this = _pyupm_si7005.new_SI7005(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_si7005.delete_SI7005
    __del__ = lambda self : None;
    def getTemperatureRaw(self):
        """
        getTemperatureRaw(SI7005 self) -> uint16_t

        Parameters:
            self: upm::SI7005 *

        """
        return _pyupm_si7005.SI7005_getTemperatureRaw(self)

    def getTemperatureCelcius(self):
        """
        getTemperatureCelcius(SI7005 self) -> int

        Parameters:
            self: upm::SI7005 *

        """
        return _pyupm_si7005.SI7005_getTemperatureCelcius(self)

    def getHumidityRaw(self):
        """
        getHumidityRaw(SI7005 self) -> uint16_t

        Parameters:
            self: upm::SI7005 *

        """
        return _pyupm_si7005.SI7005_getHumidityRaw(self)

    def getHumidityRelative(self):
        """
        getHumidityRelative(SI7005 self) -> int

        Parameters:
            self: upm::SI7005 *

        """
        return _pyupm_si7005.SI7005_getHumidityRelative(self)

    def getModuleName(self):
        """
        getModuleName(SI7005 self) -> char const *

        Parameters:
            self: upm::SI7005 *

        """
        return _pyupm_si7005.SI7005_getModuleName(self)

    def isAvailable(self):
        """
        isAvailable(SI7005 self) -> bool

        Parameters:
            self: upm::SI7005 *

        """
        return _pyupm_si7005.SI7005_isAvailable(self)

    def enableHeater(self):
        """
        enableHeater(SI7005 self)

        Parameters:
            self: upm::SI7005 *

        """
        return _pyupm_si7005.SI7005_enableHeater(self)

    def disableHeater(self):
        """
        disableHeater(SI7005 self)

        Parameters:
            self: upm::SI7005 *

        """
        return _pyupm_si7005.SI7005_disableHeater(self)

    def enableFastConversionMode(self):
        """
        enableFastConversionMode(SI7005 self)

        Parameters:
            self: upm::SI7005 *

        """
        return _pyupm_si7005.SI7005_enableFastConversionMode(self)

    def disableFastConversionMode(self):
        """
        disableFastConversionMode(SI7005 self)

        Parameters:
            self: upm::SI7005 *

        """
        return _pyupm_si7005.SI7005_disableFastConversionMode(self)

SI7005_swigregister = _pyupm_si7005.SI7005_swigregister
SI7005_swigregister(SI7005)

# This file is compatible with both classic and new-style classes.


