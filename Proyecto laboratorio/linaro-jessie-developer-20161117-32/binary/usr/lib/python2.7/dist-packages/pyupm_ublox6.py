# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_ublox6', [dirname(__file__)])
        except ImportError:
            import _pyupm_ublox6
            return _pyupm_ublox6
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_ublox6', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_ublox6 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_ublox6
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Ublox6(_object):
    """
    API for the U-BLOX 6 and SIM28 GPS Modules.

    ID: ublox6

    Name: Grove GPS

    Other Names: U-BLOX 6 SIM28

    Category: gps

    Manufacturer: seeed

    Link:http://www.seeedstudio.com/depot/Grove-GPS-p-959.html

    Connection: uart

    Kit: tsk  UPM support for the U-BLOX 6 GPS module. It is also
    compatible with the SIM28 GPS module.

    C++ includes: ublox6.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ublox6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ublox6, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::Ublox6 self, int uart) -> Ublox6

        Parameters:
            uart: int


        Ublox6(int uart)

        Ublox6 object constructor

        Parameters:
        -----------

        uart:  Default UART to use (0 or 1) 
        """
        this = _pyupm_ublox6.new_Ublox6(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_ublox6.delete_Ublox6
    __del__ = lambda self : None;
    def dataAvailable(self):
        """
        dataAvailable(Ublox6 self) -> bool

        Parameters:
            self: upm::Ublox6 *


        bool
        dataAvailable()

        Checks to see if there is data available for reading

        True if there is data available for reading 
        """
        return _pyupm_ublox6.Ublox6_dataAvailable(self)

    def readData(self, *args):
        """
        readData(Ublox6 self, char * buffer, int len) -> int

        Parameters:
            buffer: char *
            len: int


        int readData(char
        *buffer, int len)

        Reads any available data in a user-supplied buffer. Note: the call
        blocks until data is available to be read. Use dataAvailable() to
        determine whether there is data available beforehand, to avoid
        blocking.

        Parameters:
        -----------

        buffer:  Buffer to hold the data read

        len:  Length of the buffer

        the Number of bytes read 
        """
        return _pyupm_ublox6.Ublox6_readData(self, *args)

    def writeData(self, *args):
        """
        writeData(Ublox6 self, char * buffer, int len) -> int

        Parameters:
            buffer: char *
            len: int


        int writeData(char
        *buffer, int len)

        Writes the data in the buffer to the device

        Parameters:
        -----------

        buffer:  Buffer to hold the data read

        len:  Length of the buffer

        Number of bytes written 
        """
        return _pyupm_ublox6.Ublox6_writeData(self, *args)

    def setupTty(self, *args):
        """
        setupTty(Ublox6 self, speed_t baud=B9600) -> bool

        Parameters:
            baud: speed_t

        setupTty(Ublox6 self) -> bool

        Parameters:
            self: upm::Ublox6 *


        bool setupTty(speed_t
        baud=B9600)

        Sets up proper tty I/O modes and the baud rate. The default baud rate
        is 9,600 (B9600).

        Parameters:
        -----------

        baud:  Desired baud rate

        True if successful 
        """
        return _pyupm_ublox6.Ublox6_setupTty(self, *args)

Ublox6_swigregister = _pyupm_ublox6.Ublox6_swigregister
Ublox6_swigregister(Ublox6)
cvar = _pyupm_ublox6.cvar
UBLOX6_DEFAULT_UART = cvar.UBLOX6_DEFAULT_UART

class charArray(_object):
    """Proxy of C++ charArray class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(charArray self, size_t nelements) -> charArray

        Parameters:
            nelements: size_t

        """
        this = _pyupm_ublox6.new_charArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_ublox6.delete_charArray
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """
        __getitem__(charArray self, size_t index) -> char

        Parameters:
            index: size_t

        """
        return _pyupm_ublox6.charArray___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(charArray self, size_t index, char value)

        Parameters:
            index: size_t
            value: char

        """
        return _pyupm_ublox6.charArray___setitem__(self, *args)

    def cast(self):
        """
        cast(charArray self) -> char *

        Parameters:
            self: charArray *

        """
        return _pyupm_ublox6.charArray_cast(self)

    def frompointer(*args):
        """
        frompointer(char * t) -> charArray

        Parameters:
            t: char *

        """
        return _pyupm_ublox6.charArray_frompointer(*args)

    if _newclass:frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
charArray_swigregister = _pyupm_ublox6.charArray_swigregister
charArray_swigregister(charArray)

def charArray_frompointer(*args):
  """
    charArray_frompointer(char * t) -> charArray

    Parameters:
        t: char *

    """
  return _pyupm_ublox6.charArray_frompointer(*args)

# This file is compatible with both classic and new-style classes.


