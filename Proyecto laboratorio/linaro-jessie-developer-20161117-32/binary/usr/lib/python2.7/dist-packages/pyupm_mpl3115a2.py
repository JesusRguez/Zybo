# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_mpl3115a2', [dirname(__file__)])
        except ImportError:
            import _pyupm_mpl3115a2
            return _pyupm_mpl3115a2
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_mpl3115a2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_mpl3115a2 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_mpl3115a2
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


MPL3115A2_NAME = _pyupm_mpl3115a2.MPL3115A2_NAME
MPL3115A2_I2C_ADDRESS = _pyupm_mpl3115a2.MPL3115A2_I2C_ADDRESS
MPL3115A2_DEVICE_ID = _pyupm_mpl3115a2.MPL3115A2_DEVICE_ID
MPL3115A2_STATUS = _pyupm_mpl3115a2.MPL3115A2_STATUS
MPL3115A2_OUT_PRESS = _pyupm_mpl3115a2.MPL3115A2_OUT_PRESS
MPL3115A2_OUT_TEMP = _pyupm_mpl3115a2.MPL3115A2_OUT_TEMP
MPL3115A2_WHO_AM_I = _pyupm_mpl3115a2.MPL3115A2_WHO_AM_I
MPL3115A2_PT_DATA_CFG = _pyupm_mpl3115a2.MPL3115A2_PT_DATA_CFG
MPL3115A2_P_MIN = _pyupm_mpl3115a2.MPL3115A2_P_MIN
MPL3115A2_T_MIN = _pyupm_mpl3115a2.MPL3115A2_T_MIN
MPL3115A2_P_MAX = _pyupm_mpl3115a2.MPL3115A2_P_MAX
MPL3115A2_T_MAX = _pyupm_mpl3115a2.MPL3115A2_T_MAX
MPL3115A2_CTRL_REG1 = _pyupm_mpl3115a2.MPL3115A2_CTRL_REG1
MPL3115A2_CTRL_SBYB = _pyupm_mpl3115a2.MPL3115A2_CTRL_SBYB
MPL3115A2_CTRL_OST = _pyupm_mpl3115a2.MPL3115A2_CTRL_OST
MPL3115A2_CTRL_RESET = _pyupm_mpl3115a2.MPL3115A2_CTRL_RESET
MPL3115A2_CTRL_ALT_MODE = _pyupm_mpl3115a2.MPL3115A2_CTRL_ALT_MODE
MPL3115A2_MAXOVERSAMPLE = _pyupm_mpl3115a2.MPL3115A2_MAXOVERSAMPLE
class MPL3115A2(_object):
    """
    API for the MPL3115A2 Atmospheric Pressure Sensor.

    ID: mpl3115a2

    Name: MPL3115A2 Atmospheric Pressure Sensor

    Category: pressure

    Manufacturer: freescale

    Link:http://www.freescale.com/webapp/sps/site/prod_summary.jsp?code=MPL3115A2

    Connection: i2c  Freescale Semiconductor*MPL3115A2 is a high-
    precision, ultra-low power consumption pressure sensor. Its operating
    range is 50-110 kPa.

    C++ includes: mpl3115a2.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPL3115A2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MPL3115A2, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::MPL3115A2 self, int bus, int devAddr=0x60, uint8_t mode=6) -> MPL3115A2

        Parameters:
            bus: int
            devAddr: int
            mode: uint8_t

        __init__(upm::MPL3115A2 self, int bus, int devAddr=0x60) -> MPL3115A2

        Parameters:
            bus: int
            devAddr: int

        __init__(upm::MPL3115A2 self, int bus) -> MPL3115A2

        Parameters:
            bus: int


        MPL3115A2(int bus,
        int devAddr=MPL3115A2_I2C_ADDRESS, uint8_t mode=6)

        Instantiates an MPL3115A2 object

        Parameters:
        -----------

        bus:  Number of the used bus

        devAddr:  Address of the used I2C device

        mode:   MPL3115A2 oversampling (6 = 64x) 
        """
        this = _pyupm_mpl3115a2.new_MPL3115A2(*args)
        try: self.this.append(this)
        except: self.this = this
    def testSensor(self):
        """
        testSensor(MPL3115A2 self) -> int

        Parameters:
            self: upm::MPL3115A2 *


        int
        testSensor(void)

        MPL3115A2 object destructor; basically, it closes the I2C connection.
        ~MPL3115A2(); no need for this here, as the I2c connection will be
        closed when the m_i2ControlCtx variable will go out of scope Tests the
        sensor and tries to determine if the sensor is operating by looking
        for small variations in the value 
        """
        return _pyupm_mpl3115a2.MPL3115A2_testSensor(self)

    def resetSensor(self):
        """
        resetSensor(MPL3115A2 self) -> int

        Parameters:
            self: upm::MPL3115A2 *


        int
        resetSensor(void)

        Performs a soft reset of the MPL3115A2 device to ensure it is in a
        known state. This function can be used to reset the min/max
        temperature and pressure values. 
        """
        return _pyupm_mpl3115a2.MPL3115A2_resetSensor(self)

    def dumpSensor(self):
        """
        dumpSensor(MPL3115A2 self)

        Parameters:
            self: upm::MPL3115A2 *


        void
        dumpSensor(void)

        Dumps out the I2C register block to stdout 
        """
        return _pyupm_mpl3115a2.MPL3115A2_dumpSensor(self)

    def sampleData(self):
        """
        sampleData(MPL3115A2 self) -> int

        Parameters:
            self: upm::MPL3115A2 *


        int
        sampleData(void)

        Initiates a temperature/pressure mesasurement and waits for the
        function to complete. Temperature and pressure registers can be read
        after this call. 
        """
        return _pyupm_mpl3115a2.MPL3115A2_sampleData(self)

    def getPressureReg(self, *args):
        """
        getPressureReg(MPL3115A2 self, int reg) -> int32_t

        Parameters:
            reg: int


        int32_t
        getPressureReg(int reg)

        Reads the pressure value from MPL3115A2 [Pa * 100]

        Parameters:
        -----------

        reg:  Base address of the pressure register 
        """
        return _pyupm_mpl3115a2.MPL3115A2_getPressureReg(self, *args)

    def getTempReg(self, *args):
        """
        getTempReg(MPL3115A2 self, int reg) -> int32_t

        Parameters:
            reg: int


        int32_t
        getTempReg(int reg)

        Reads the temperature value from MPL3115A2 [degC * 1000]

        Parameters:
        -----------

        reg:  Base address of the temperature register 
        """
        return _pyupm_mpl3115a2.MPL3115A2_getTempReg(self, *args)

    def getPressure(self, bSampleData=True):
        """
        getPressure(MPL3115A2 self, int bSampleData=True) -> float

        Parameters:
            bSampleData: int

        getPressure(MPL3115A2 self) -> float

        Parameters:
            self: upm::MPL3115A2 *


        float
        getPressure(int bSampleData=true)

        Reads the current pressure value from MPL3115A2 [Pa]

        Parameters:
        -----------

        bSampleData:  Sets non-zero to a sample reading 
        """
        return _pyupm_mpl3115a2.MPL3115A2_getPressure(self, bSampleData)

    def getTemperature(self, bSampleData=True):
        """
        getTemperature(MPL3115A2 self, int bSampleData=True) -> float

        Parameters:
            bSampleData: int

        getTemperature(MPL3115A2 self) -> float

        Parameters:
            self: upm::MPL3115A2 *


        float
        getTemperature(int bSampleData=true)

        Reads the current temperature value from MPL3115A2 [degC]

        Parameters:
        -----------

        bSampleData:  Sets non-zero to a sample reading 
        """
        return _pyupm_mpl3115a2.MPL3115A2_getTemperature(self, bSampleData)

    def getSealevelPressure(self, altitudeMeters=0.0):
        """
        getSealevelPressure(MPL3115A2 self, float altitudeMeters=0.0) -> float

        Parameters:
            altitudeMeters: float

        getSealevelPressure(MPL3115A2 self) -> float

        Parameters:
            self: upm::MPL3115A2 *


        float
        getSealevelPressure(float altitudeMeters=0.0)

        Reads the current pressure and, using a known altitude, calculates the
        sea level pressure value [Pa] This function should be preceded by the
        sampleData() call

        Parameters:
        -----------

        altitudeMeters:  Altitude in meters 
        """
        return _pyupm_mpl3115a2.MPL3115A2_getSealevelPressure(self, altitudeMeters)

    def getAltitude(self, sealevelPressure=101325.0):
        """
        getAltitude(MPL3115A2 self, float sealevelPressure=101325.0) -> float

        Parameters:
            sealevelPressure: float

        getAltitude(MPL3115A2 self) -> float

        Parameters:
            self: upm::MPL3115A2 *


        float
        getAltitude(float sealevelPressure=101325.0)

        Reads the current pressure and, using a known sea level pressure,
        calculates the altitude value [m] This function should be preceded by
        the sampleData() call

        Parameters:
        -----------

        sealevelPressure:  Current sea level pressure 
        """
        return _pyupm_mpl3115a2.MPL3115A2_getAltitude(self, sealevelPressure)

    def setOversampling(self, *args):
        """
        setOversampling(MPL3115A2 self, uint8_t oversampling)

        Parameters:
            oversampling: uint8_t


        void
        setOversampling(uint8_t oversampling)

        Defines the oversampling setting (ranges from 0 to 7). The value
        represents 2^n samples (ranging from 1 to 128). The time to calculate
        a sample is approximately (2^n * 4 + 2) ms

        Parameters:
        -----------

        oversampling:  New oversampling value 
        """
        return _pyupm_mpl3115a2.MPL3115A2_setOversampling(self, *args)

    def getOversampling(self):
        """
        getOversampling(MPL3115A2 self) -> uint8_t

        Parameters:
            self: upm::MPL3115A2 *


        uint8_t
        getOversampling(void)

        Returns the current oversampling value 
        """
        return _pyupm_mpl3115a2.MPL3115A2_getOversampling(self)

    def getTemperatureMax(self):
        """
        getTemperatureMax(MPL3115A2 self) -> float

        Parameters:
            self: upm::MPL3115A2 *


        float
        getTemperatureMax(void)

        Reads the maximum measured temperature [degC] 
        """
        return _pyupm_mpl3115a2.MPL3115A2_getTemperatureMax(self)

    def getTemperatureMin(self):
        """
        getTemperatureMin(MPL3115A2 self) -> float

        Parameters:
            self: upm::MPL3115A2 *


        float
        getTemperatureMin(void)

        Reads the minimum measured temperature [degC] 
        """
        return _pyupm_mpl3115a2.MPL3115A2_getTemperatureMin(self)

    def getPressureMax(self):
        """
        getPressureMax(MPL3115A2 self) -> float

        Parameters:
            self: upm::MPL3115A2 *


        float
        getPressureMax(void)

        Reads the maximum measured pressure [Pa] 
        """
        return _pyupm_mpl3115a2.MPL3115A2_getPressureMax(self)

    def getPressureMin(self):
        """
        getPressureMin(MPL3115A2 self) -> float

        Parameters:
            self: upm::MPL3115A2 *


        float
        getPressureMin(void)

        Reads the minimum measured pressure [Pa] 
        """
        return _pyupm_mpl3115a2.MPL3115A2_getPressureMin(self)

    def convertTempCtoF(self, *args):
        """
        convertTempCtoF(MPL3115A2 self, float fTemp) -> float

        Parameters:
            fTemp: float


        float
        convertTempCtoF(float fTemp)

        Converts temperature from degC*1000 to degF*1000

        Parameters:
        -----------

        iTemp:  Temperature in degC 
        """
        return _pyupm_mpl3115a2.MPL3115A2_convertTempCtoF(self, *args)

    def convertPaToinHg(self, *args):
        """
        convertPaToinHg(MPL3115A2 self, float fPressure) -> float

        Parameters:
            fPressure: float


        float
        convertPaToinHg(float fPressure)

        Converts pressure from Pa*100 to inHg*10000 This is set for 15degC (Pa
        = 0.0002961 in Hg) TODO: Change the function to add temperature
        calibration

        Parameters:
        -----------

        iPressure:  Pressure in Pa 
        """
        return _pyupm_mpl3115a2.MPL3115A2_convertPaToinHg(self, *args)

    def i2cWriteReg(self, *args):
        """
        i2cWriteReg(MPL3115A2 self, uint8_t reg, uint8_t value) -> mraa::Result

        Parameters:
            reg: uint8_t
            value: uint8_t


        mraa::Result
        i2cWriteReg(uint8_t reg, uint8_t value)

        Writes one byte to an I2C register

        Parameters:
        -----------

        reg:  Address of the register

        value:  Byte to be written 
        """
        return _pyupm_mpl3115a2.MPL3115A2_i2cWriteReg(self, *args)

    def i2cReadReg_16(self, *args):
        """
        i2cReadReg_16(MPL3115A2 self, int reg) -> uint16_t

        Parameters:
            reg: int


        uint16_t
        i2cReadReg_16(int reg)

        Reads two bytes from an I2C register

        Parameters:
        -----------

        reg:  Address of the register 
        """
        return _pyupm_mpl3115a2.MPL3115A2_i2cReadReg_16(self, *args)

    def i2cReadReg_8(self, *args):
        """
        i2cReadReg_8(MPL3115A2 self, int reg) -> uint8_t

        Parameters:
            reg: int


        uint8_t
        i2cReadReg_8(int reg)

        Reads a one-byte register

        Parameters:
        -----------

        reg:  Address of the register 
        """
        return _pyupm_mpl3115a2.MPL3115A2_i2cReadReg_8(self, *args)

    __swig_destroy__ = _pyupm_mpl3115a2.delete_MPL3115A2
    __del__ = lambda self : None;
MPL3115A2_swigregister = _pyupm_mpl3115a2.MPL3115A2_swigregister
MPL3115A2_swigregister(MPL3115A2)

# This file is compatible with both classic and new-style classes.


