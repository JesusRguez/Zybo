# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_groveultrasonic', [dirname(__file__)])
        except ImportError:
            import _pyupm_groveultrasonic
            return _pyupm_groveultrasonic
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_groveultrasonic', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_groveultrasonic = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_groveultrasonic
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


HIGH = _pyupm_groveultrasonic.HIGH
LOW = _pyupm_groveultrasonic.LOW
class GroveUltraSonic(_object):
    """
    API for Grove Ultrasonic Ranger.

    ID: groveultrasonic

    Name: Grove Ultrasonic Ranger

    Category: sound

    Manufacturer: seeed

    Connection: gpio  This Grove Ultrasonic sensor is a non-contact
    distance measurement module which is compatible with the Grove system.
    It is designed for easy modular project usage with industrial
    performance. Detection ranges from 3 cm (1.2") to 4 m (13'1.5") and
    works best when the object is within a 30 degree angle relative to the
    sensor.

    C++ includes: groveultrasonic.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveUltraSonic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GroveUltraSonic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::GroveUltraSonic self, uint8_t pin) -> GroveUltraSonic

        Parameters:
            pin: uint8_t


        GroveUltraSonic(uint8_t pin)

        Instantiates a GroveUltraSonic object

        Parameters:
        -----------

        pin:  pin for triggering the sensor for distance and for receiving
        pulse response 
        """
        this = _pyupm_groveultrasonic.new_GroveUltraSonic(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_groveultrasonic.delete_GroveUltraSonic
    __del__ = lambda self : None;
    def getDistance(self):
        """
        getDistance(GroveUltraSonic self) -> int

        Parameters:
            self: upm::GroveUltraSonic *


        int
        getDistance()

        Returns the echo's pulse width from the sensor in microseconds. Divide
        by 58 to convert distance to centimetres. Divide by 148 to convert
        distance to inches. 
        """
        return _pyupm_groveultrasonic.GroveUltraSonic_getDistance(self)

    def name(self):
        """
        name(GroveUltraSonic self) -> std::string

        Parameters:
            self: upm::GroveUltraSonic *


        std::string name()

        Return name of the component 
        """
        return _pyupm_groveultrasonic.GroveUltraSonic_name(self)

    def working(self):
        """
        working(GroveUltraSonic self) -> bool

        Parameters:
            self: upm::GroveUltraSonic *


        bool working()

        Returns true while the sensor is busy waiting for the echo pulse 
        """
        return _pyupm_groveultrasonic.GroveUltraSonic_working(self)

GroveUltraSonic_swigregister = _pyupm_groveultrasonic.GroveUltraSonic_swigregister
GroveUltraSonic_swigregister(GroveUltraSonic)

# This file is compatible with both classic and new-style classes.


