# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_adxl335', [dirname(__file__)])
        except ImportError:
            import _pyupm_adxl335
            return _pyupm_adxl335
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_adxl335', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_adxl335 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_adxl335
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_intPointer():
  return _pyupm_adxl335.new_intPointer()
new_intPointer = _pyupm_adxl335.new_intPointer

def copy_intPointer(*args):
  return _pyupm_adxl335.copy_intPointer(*args)
copy_intPointer = _pyupm_adxl335.copy_intPointer

def delete_intPointer(*args):
  return _pyupm_adxl335.delete_intPointer(*args)
delete_intPointer = _pyupm_adxl335.delete_intPointer

def intPointer_assign(*args):
  return _pyupm_adxl335.intPointer_assign(*args)
intPointer_assign = _pyupm_adxl335.intPointer_assign

def intPointer_value(*args):
  return _pyupm_adxl335.intPointer_value(*args)
intPointer_value = _pyupm_adxl335.intPointer_value

def new_floatPointer():
  return _pyupm_adxl335.new_floatPointer()
new_floatPointer = _pyupm_adxl335.new_floatPointer

def copy_floatPointer(*args):
  return _pyupm_adxl335.copy_floatPointer(*args)
copy_floatPointer = _pyupm_adxl335.copy_floatPointer

def delete_floatPointer(*args):
  return _pyupm_adxl335.delete_floatPointer(*args)
delete_floatPointer = _pyupm_adxl335.delete_floatPointer

def floatPointer_assign(*args):
  return _pyupm_adxl335.floatPointer_assign(*args)
floatPointer_assign = _pyupm_adxl335.floatPointer_assign

def floatPointer_value(*args):
  return _pyupm_adxl335.floatPointer_value(*args)
floatPointer_value = _pyupm_adxl335.floatPointer_value
ADXL335_DEFAULT_AREF = _pyupm_adxl335.ADXL335_DEFAULT_AREF
ADXL335_SENSITIVITY = _pyupm_adxl335.ADXL335_SENSITIVITY
class ADXL335(_object):
    """
    API for the ADXL335 3-Axis Analog Accelerometer.

    ID: adxl335

    Name: ADXL335 3-Axis Analog Accelerometer

    Other Names: Grove 3-Axis Analog Accelerometer

    Category: accelerometer

    Manufacturer: seeed

    Connection: analog  UPM module for the ADXL335 3-axis analog
    accelerometer. This was tested on a Grove 3-axis Analog Accelerometer.
    It uses 3 analog pins, one for each axis: X, Y, and Z.

    C++ includes: adxl335.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADXL335, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADXL335, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::ADXL335 self, int pinX, int pinY, int pinZ, float aref=5.0) -> ADXL335

        Parameters:
            pinX: int
            pinY: int
            pinZ: int
            aref: float

        __init__(upm::ADXL335 self, int pinX, int pinY, int pinZ) -> ADXL335

        Parameters:
            pinX: int
            pinY: int
            pinZ: int


        ADXL335(int pinX, int
        pinY, int pinZ, float aref=ADXL335_DEFAULT_AREF)

        ADXL335 constructor

        Parameters:
        -----------

        pinX:  Analog pin to use for X-axis

        pinY:  Analog pin to use for Y-axis

        pinZ:  Analog pin to use for Z-axis

        aref:  Analog reference voltage; default is 5.0v 
        """
        this = _pyupm_adxl335.new_ADXL335(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_adxl335.delete_ADXL335
    __del__ = lambda self : None;
    def setZeroX(self, *args):
        """
        setZeroX(ADXL335 self, float zeroX)

        Parameters:
            zeroX: float


        void setZeroX(float
        zeroX)

        Sets the "zero" value of the X-axis, determined through calibration

        Parameters:
        -----------

        zeroX:  "Zero" value of the X-axis 
        """
        return _pyupm_adxl335.ADXL335_setZeroX(self, *args)

    def setZeroY(self, *args):
        """
        setZeroY(ADXL335 self, float zeroY)

        Parameters:
            zeroY: float


        void setZeroY(float
        zeroY)

        Sets the "zero" value of the Y-axis, determined through calibration

        Parameters:
        -----------

        zeroY:  "Zero" value of the Y-axis 
        """
        return _pyupm_adxl335.ADXL335_setZeroY(self, *args)

    def setZeroZ(self, *args):
        """
        setZeroZ(ADXL335 self, float zeroZ)

        Parameters:
            zeroZ: float


        void setZeroZ(float
        zeroZ)

        Sets the "zero" value of the Z-axis, determined through calibration

        Parameters:
        -----------

        zeroZ:  "Zero" value of the Z-axis 
        """
        return _pyupm_adxl335.ADXL335_setZeroZ(self, *args)

    def values(self, *args):
        """
        values(ADXL335 self, int * xVal, int * yVal, int * zVal)

        Parameters:
            xVal: int *
            yVal: int *
            zVal: int *


        void values(int *xVal,
        int *yVal, int *zVal)

        Gets the analog values for the 3 axes

        Parameters:
        -----------

        xVal:  Pointer to the returned X-axis value

        yVal:  Pointer to the returned Y-axis value

        zVal:  Pointer to the returned Z-axis value 
        """
        return _pyupm_adxl335.ADXL335_values(self, *args)

    def acceleration(self, *args):
        """
        acceleration(ADXL335 self, float * xAccel, float * yAccel, float * zAccel)

        Parameters:
            xAccel: float *
            yAccel: float *
            zAccel: float *


        void
        acceleration(float *xAccel, float *yAccel, float *zAccel)

        Gets the acceleration along all 3 axes

        Parameters:
        -----------

        xAccel:  Pointer to returned X-axis value

        yAccel:  Pointer to returned Y-axis value

        zAccel:  Pointer to returned Z-axis value 
        """
        return _pyupm_adxl335.ADXL335_acceleration(self, *args)

    def calibrate(self):
        """
        calibrate(ADXL335 self)

        Parameters:
            self: upm::ADXL335 *


        void calibrate()

        While the sensor is still, measures the X-axis, Y-axis, and Z-axis
        values and uses those values as the zero values. 
        """
        return _pyupm_adxl335.ADXL335_calibrate(self)

ADXL335_swigregister = _pyupm_adxl335.ADXL335_swigregister
ADXL335_swigregister(ADXL335)

# This file is compatible with both classic and new-style classes.


