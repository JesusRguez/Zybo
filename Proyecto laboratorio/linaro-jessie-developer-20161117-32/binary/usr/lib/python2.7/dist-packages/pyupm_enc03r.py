# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_enc03r', [dirname(__file__)])
        except ImportError:
            import _pyupm_enc03r
            return _pyupm_enc03r
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_enc03r', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_enc03r = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_enc03r
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class ENC03R(_object):
    """
    API for the ENC03R Single Axis Analog Gyro.

    ID: enc03r

    Name: ENC03R Single Axis Gyro

    Other Names: Grove Single Axis Analog Gyro

    Category: compass

    Manufacturer: seeed

    Connection: analog

    Kit: robok  UPM module for the ENC03R single axis analog gyro. This
    gyroscope measures x-axis angular velocity, that is how fast the
    sensor is rotating around the x-axis. Calibration of the sensor is
    necessary for accurate readings.

    C++ includes: enc03r.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ENC03R, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ENC03R, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::ENC03R self, int pin, float vref=5.0) -> ENC03R

        Parameters:
            pin: int
            vref: float

        __init__(upm::ENC03R self, int pin) -> ENC03R

        Parameters:
            pin: int


        ENC03R(int pin, float
        vref=5.0)

        ENC03R sensor constructor

        Parameters:
        -----------

        pin:  Analog pin to use

        vref:  Reference voltage to use; default is 5.0 V 
        """
        this = _pyupm_enc03r.new_ENC03R(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_enc03r.delete_ENC03R
    __del__ = lambda self : None;
    def calibrate(self, *args):
        """
        calibrate(ENC03R self, unsigned int samples)

        Parameters:
            samples: unsigned int


        void
        calibrate(unsigned int samples)

        Calibrates the sensor by determining an analog reading over many
        samples with no movement of the sensor. This must be done before
        attempting to use the sensor.

        Parameters:
        -----------

        samples:  Number of samples to use for calibration 
        """
        return _pyupm_enc03r.ENC03R_calibrate(self, *args)

    def value(self):
        """
        value(ENC03R self) -> unsigned int

        Parameters:
            self: upm::ENC03R *


        unsigned int value()

        Returns the raw value of the sensor

        Raw value of the sensor 
        """
        return _pyupm_enc03r.ENC03R_value(self)

    def calibrationValue(self):
        """
        calibrationValue(ENC03R self) -> float

        Parameters:
            self: upm::ENC03R *


        float
        calibrationValue()

        Returns the currently stored calibration value

        Current calibration value 
        """
        return _pyupm_enc03r.ENC03R_calibrationValue(self)

    def angularVelocity(self, *args):
        """
        angularVelocity(ENC03R self, unsigned int val) -> double

        Parameters:
            val: unsigned int


        double
        angularVelocity(unsigned int val)

        Computes angular velocity based on the value and stored calibration
        reference.

        Parameters:
        -----------

        val:  Value to use to compute angular velocity

        Computed angular velocity 
        """
        return _pyupm_enc03r.ENC03R_angularVelocity(self, *args)

ENC03R_swigregister = _pyupm_enc03r.ENC03R_swigregister
ENC03R_swigregister(ENC03R)

# This file is compatible with both classic and new-style classes.


