# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_lsm303', [dirname(__file__)])
        except ImportError:
            import _pyupm_lsm303
            return _pyupm_lsm303
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_lsm303', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_lsm303 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_lsm303
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class int16Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int16Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int16Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyupm_lsm303.new_int16Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_lsm303.delete_int16Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _pyupm_lsm303.int16Array___getitem__(self, *args)
    def __setitem__(self, *args): return _pyupm_lsm303.int16Array___setitem__(self, *args)
    def cast(self): return _pyupm_lsm303.int16Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyupm_lsm303.int16Array_frompointer
    if _newclass:frompointer = staticmethod(_pyupm_lsm303.int16Array_frompointer)
int16Array_swigregister = _pyupm_lsm303.int16Array_swigregister
int16Array_swigregister(int16Array)

def int16Array_frompointer(*args):
  return _pyupm_lsm303.int16Array_frompointer(*args)
int16Array_frompointer = _pyupm_lsm303.int16Array_frompointer

LSM303_MAG = _pyupm_lsm303.LSM303_MAG
LSM303_ACC = _pyupm_lsm303.LSM303_ACC
CTRL_REG1_A = _pyupm_lsm303.CTRL_REG1_A
CTRL_REG2_A = _pyupm_lsm303.CTRL_REG2_A
CTRL_REG3_A = _pyupm_lsm303.CTRL_REG3_A
CTRL_REG4_A = _pyupm_lsm303.CTRL_REG4_A
CTRL_REG5_A = _pyupm_lsm303.CTRL_REG5_A
CRA_REG_M = _pyupm_lsm303.CRA_REG_M
CRB_REG_M = _pyupm_lsm303.CRB_REG_M
MR_REG_M = _pyupm_lsm303.MR_REG_M
OUT_X_H_M = _pyupm_lsm303.OUT_X_H_M
OUT_X_L_A = _pyupm_lsm303.OUT_X_L_A
OUT_X_H_A = _pyupm_lsm303.OUT_X_H_A
OUT_Y_L_A = _pyupm_lsm303.OUT_Y_L_A
OUT_Y_H_A = _pyupm_lsm303.OUT_Y_H_A
OUT_Z_L_A = _pyupm_lsm303.OUT_Z_L_A
OUT_Z_H_A = _pyupm_lsm303.OUT_Z_H_A
X = _pyupm_lsm303.X
Y = _pyupm_lsm303.Y
Z = _pyupm_lsm303.Z
class LSM303(_object):
    """
    API for the LSM303 Accelerometer & Compass.

    ID: lsm303

    Name: LSM303 Accelerometer & Compass

    Other Names: Grove 6-Axis Accelerometer & Compass

    Category: accelerometer compass

    Manufacturer: seeed adafruit

    Link:http://www.seeedstudio.com/wiki/Grove_-_6-Axis_Accelerometer%26Compass

    Connection: i2c  This module defines the LSM303DLH 3-axis
    magnetometer/3-axis accelerometer. This module was tested with the
    Seeed Studio* Grove 6-Axis Accelerometer & Compass module used over
    I2C. The magnometer and acceleromter are accessed at two seperate I2C
    addresses.

    C++ includes: lsm303.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LSM303, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LSM303, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::LSM303 self, int bus, int addrMag=0x1E, int addrAcc=0x19, int accScale=8) -> LSM303

        Parameters:
            bus: int
            addrMag: int
            addrAcc: int
            accScale: int

        __init__(upm::LSM303 self, int bus, int addrMag=0x1E, int addrAcc=0x19) -> LSM303

        Parameters:
            bus: int
            addrMag: int
            addrAcc: int

        __init__(upm::LSM303 self, int bus, int addrMag=0x1E) -> LSM303

        Parameters:
            bus: int
            addrMag: int

        __init__(upm::LSM303 self, int bus) -> LSM303

        Parameters:
            bus: int


        LSM303(int bus, int
        addrMag=LSM303_MAG, int addrAcc=LSM303_ACC, int accScale=8)

        Instantiates an LSM303 object

        Parameters:
        -----------

        i2c:  bus

        addr:  Magnetometer

        addr:  Accelerometer 
        """
        this = _pyupm_lsm303.new_LSM303(*args)
        try: self.this.append(this)
        except: self.this = this
    def getHeading(self):
        """
        getHeading(LSM303 self) -> float

        Parameters:
            self: upm::LSM303 *


        float getHeading()

        LSM303 object destructor where is no more need for this here - I2c
        connection will be stopped automatically when m_i2c variable will go
        out of scope ~LSM303 (); Gets the current heading; headings <0
        indicate an error has occurred

        float 
        """
        return _pyupm_lsm303.LSM303_getHeading(self)

    def getCoordinates(self):
        """
        getCoordinates(LSM303 self) -> mraa::Result

        Parameters:
            self: upm::LSM303 *


        mraa::Result
        getCoordinates()

        Gets the coordinates in the XYZ order 
        """
        return _pyupm_lsm303.LSM303_getCoordinates(self)

    def getAcceleration(self):
        """
        getAcceleration(LSM303 self) -> mraa::Result

        Parameters:
            self: upm::LSM303 *


        mraa::Result
        getAcceleration()

        Gets accelerometer values Should be called before other "get"
        functions for acceleration 
        """
        return _pyupm_lsm303.LSM303_getAcceleration(self)

    def getRawCoorData(self):
        """
        getRawCoorData(LSM303 self) -> int16_t *

        Parameters:
            self: upm::LSM303 *


        int16_t *
        getRawCoorData()

        Gets raw coordinate data; it is updated when getCoordinates() is
        called 
        """
        return _pyupm_lsm303.LSM303_getRawCoorData(self)

    def getCoorX(self):
        """
        getCoorX(LSM303 self) -> int16_t

        Parameters:
            self: upm::LSM303 *


        int16_t getCoorX()

        Gets the X component of the coordinates data 
        """
        return _pyupm_lsm303.LSM303_getCoorX(self)

    def getCoorY(self):
        """
        getCoorY(LSM303 self) -> int16_t

        Parameters:
            self: upm::LSM303 *


        int16_t getCoorY()

        Gets the Y component of the coordinates data 
        """
        return _pyupm_lsm303.LSM303_getCoorY(self)

    def getCoorZ(self):
        """
        getCoorZ(LSM303 self) -> int16_t

        Parameters:
            self: upm::LSM303 *


        int16_t getCoorZ()

        Gets the Z component of the coordinates data 
        """
        return _pyupm_lsm303.LSM303_getCoorZ(self)

    def getRawAccelData(self):
        """
        getRawAccelData(LSM303 self) -> int16_t *

        Parameters:
            self: upm::LSM303 *


        int16_t *
        getRawAccelData()

        Gets raw accelerometer data; it is updated when getAcceleration() is
        called 
        """
        return _pyupm_lsm303.LSM303_getRawAccelData(self)

    def getAccelX(self):
        """
        getAccelX(LSM303 self) -> int16_t

        Parameters:
            self: upm::LSM303 *


        int16_t getAccelX()

        Gets the X component of the acceleration data 
        """
        return _pyupm_lsm303.LSM303_getAccelX(self)

    def getAccelY(self):
        """
        getAccelY(LSM303 self) -> int16_t

        Parameters:
            self: upm::LSM303 *


        int16_t getAccelY()

        Gets the Y component of the acceleration data 
        """
        return _pyupm_lsm303.LSM303_getAccelY(self)

    def getAccelZ(self):
        """
        getAccelZ(LSM303 self) -> int16_t

        Parameters:
            self: upm::LSM303 *


        int16_t getAccelZ()

        Gets the Z component of the acceleration data 
        """
        return _pyupm_lsm303.LSM303_getAccelZ(self)

    __swig_destroy__ = _pyupm_lsm303.delete_LSM303
    __del__ = lambda self : None;
LSM303_swigregister = _pyupm_lsm303.LSM303_swigregister
LSM303_swigregister(LSM303)

# This file is compatible with both classic and new-style classes.


