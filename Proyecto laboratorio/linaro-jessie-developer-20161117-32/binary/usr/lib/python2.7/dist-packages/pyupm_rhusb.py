# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_rhusb', [dirname(__file__)])
        except ImportError:
            import _pyupm_rhusb
            return _pyupm_rhusb
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_rhusb', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_rhusb = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_rhusb
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class RHUSB(_object):
    """
    UPM API for the Omega RH-USB Temperature and Humidity Sensor.

    ID: rhusb

    Name: UPM API for the Omega RH-USB Temperature and Humidity Sensor

    Category: temp

    Manufacturer: omega

    Connection: uart

    Link:http://www.omega.com/pptst/RH-USB.html  This module implements
    support for the Omega RH-USB Temperature and Humidity Sensor Probe. It
    connects via an integrated USB cable, and is accessed via a serial
    port. It is suitable for wall or duct mounting.

    C++ includes: rhusb.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RHUSB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RHUSB, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::RHUSB self, std::string device) -> RHUSB

        Parameters:
            device: std::string


        RHUSB(std::string device)

        RHUSB constructor

        Parameters:
        -----------

        device:  Path to the serial device 
        """
        this = _pyupm_rhusb.new_RHUSB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_rhusb.delete_RHUSB
    __del__ = lambda self : None;
    def update(self):
        """
        update(RHUSB self)

        Parameters:
            self: upm::RHUSB *


        void update()

        Read current values from the sensor and update internal stored values.
        This method must be called prior to querying any values, such as
        temperature or humidity. 
        """
        return _pyupm_rhusb.RHUSB_update(self)

    def getTemperature(self, fahrenheit=False):
        """
        getTemperature(RHUSB self, bool fahrenheit=False) -> float

        Parameters:
            fahrenheit: bool

        getTemperature(RHUSB self) -> float

        Parameters:
            self: upm::RHUSB *


        float
        getTemperature(bool fahrenheit=false)

        Get the current temperature. update() must have been called prior to
        calling this method.

        Parameters:
        -----------

        fahrenheit:  true to return the temperature in degrees fahrenheit,
        false to return the temperature in degrees celcius. The default is
        false (degrees Celcius).

        The last temperature reading in Celcius or Fahrenheit 
        """
        return _pyupm_rhusb.RHUSB_getTemperature(self, fahrenheit)

    def getHumidity(self):
        """
        getHumidity(RHUSB self) -> float

        Parameters:
            self: upm::RHUSB *


        float getHumidity()

        Get the current relative humidity. update() must have been called
        prior to calling this method.

        The last humidity reading 
        """
        return _pyupm_rhusb.RHUSB_getHumidity(self)

    def getFirmwareID(self):
        """
        getFirmwareID(RHUSB self) -> std::string

        Parameters:
            self: upm::RHUSB *


        string
        getFirmwareID()

        Get the firmware identification string.

        The firmware identification 
        """
        return _pyupm_rhusb.RHUSB_getFirmwareID(self)

RHUSB_swigregister = _pyupm_rhusb.RHUSB_swigregister
RHUSB_swigregister(RHUSB)

# This file is compatible with both classic and new-style classes.


