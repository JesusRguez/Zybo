# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_lp8860', [dirname(__file__)])
        except ImportError:
            import _pyupm_lp8860
            return _pyupm_lp8860
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_lp8860', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_lp8860 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_lp8860
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class LP8860(_object):
    """Proxy of C++ upm::LP8860 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LP8860, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LP8860, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::LP8860 self, int gpioPower, int i2cBus) -> LP8860

        Parameters:
            gpioPower: int
            i2cBus: int

        """
        this = _pyupm_lp8860.new_LP8860(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_lp8860.delete_LP8860
    __del__ = lambda self : None;
    def getModuleName(self):
        """
        getModuleName(LP8860 self) -> char const *

        Parameters:
            self: upm::LP8860 *

        """
        return _pyupm_lp8860.LP8860_getModuleName(self)

    def isPowered(self):
        """
        isPowered(LP8860 self) -> bool

        Parameters:
            self: upm::LP8860 *

        """
        return _pyupm_lp8860.LP8860_isPowered(self)

    def setPowerOn(self):
        """
        setPowerOn(LP8860 self)

        Parameters:
            self: upm::LP8860 *

        """
        return _pyupm_lp8860.LP8860_setPowerOn(self)

    def setPowerOff(self):
        """
        setPowerOff(LP8860 self)

        Parameters:
            self: upm::LP8860 *

        """
        return _pyupm_lp8860.LP8860_setPowerOff(self)

    def getBrightness(self):
        """
        getBrightness(LP8860 self) -> int

        Parameters:
            self: upm::LP8860 *

        """
        return _pyupm_lp8860.LP8860_getBrightness(self)

    def setBrightness(self, *args):
        """
        setBrightness(LP8860 self, int dutyPercent)

        Parameters:
            dutyPercent: int

        """
        return _pyupm_lp8860.LP8860_setBrightness(self, *args)

LP8860_swigregister = _pyupm_lp8860.LP8860_swigregister
LP8860_swigregister(LP8860)

# This file is compatible with both classic and new-style classes.


