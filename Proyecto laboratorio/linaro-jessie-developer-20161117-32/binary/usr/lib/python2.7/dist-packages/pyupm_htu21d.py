# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_htu21d', [dirname(__file__)])
        except ImportError:
            import _pyupm_htu21d
            return _pyupm_htu21d
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_htu21d', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_htu21d = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_htu21d
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


HTU21D_NAME = _pyupm_htu21d.HTU21D_NAME
HTU21D_I2C_ADDRESS = _pyupm_htu21d.HTU21D_I2C_ADDRESS
HTU21D_READ_TEMP_HOLD = _pyupm_htu21d.HTU21D_READ_TEMP_HOLD
HTU21D_READ_HUMIDITY_HOLD = _pyupm_htu21d.HTU21D_READ_HUMIDITY_HOLD
HTU21D_WRITE_USER_REG = _pyupm_htu21d.HTU21D_WRITE_USER_REG
HTU21D_READ_USER_REG = _pyupm_htu21d.HTU21D_READ_USER_REG
HTU21D_SOFT_RESET = _pyupm_htu21d.HTU21D_SOFT_RESET
HTU21D_DISABLE_OTP = _pyupm_htu21d.HTU21D_DISABLE_OTP
HTU21D_HEATER_ENABLE = _pyupm_htu21d.HTU21D_HEATER_ENABLE
HTU21D_END_OF_BATTERY = _pyupm_htu21d.HTU21D_END_OF_BATTERY
HTU21D_RESO_RH12_T14 = _pyupm_htu21d.HTU21D_RESO_RH12_T14
HTU21D_RESO_RH8_T12 = _pyupm_htu21d.HTU21D_RESO_RH8_T12
HTU21D_RESO_RH10_T13 = _pyupm_htu21d.HTU21D_RESO_RH10_T13
HTU21D_RESO_RH11_T11 = _pyupm_htu21d.HTU21D_RESO_RH11_T11
class HTU21D(_object):
    """
    API for the HTU21D Temperature & Humidity Sensor.

    ID: htu21d

    Name: HTU21D Temperature & Humidity Sensor

    Category: temp

    Manufacturer: seeed adafruit sparkfun

    Link:http://www.meas-spec.com/downloads/HTU21D.pdf

    Connection: i2c  HTU21D by Measurement Specialties is a digital
    humidity sensor with temperature output. RH reports between 0 and
    100%, and the temperature range is -40 to +125 degC. Note: getCompRH
    is the preferred function below (passing true to cause a measurement
    cycle). If actual values used for the compensated ready are necessary,
    use the getHumidity(false) and getTemperature(false) functions
    following the getCompRH call. Also note the sensor should not perform
    more than a couple of measurements per second to limit the heating of
    the sensor.

    C++ includes: htu21d.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTU21D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTU21D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::HTU21D self, int bus, int devAddr=0x40) -> HTU21D

        Parameters:
            bus: int
            devAddr: int

        __init__(upm::HTU21D self, int bus) -> HTU21D

        Parameters:
            bus: int


        HTU21D(int bus, int
        devAddr=HTU21D_I2C_ADDRESS)

        Instantiates an HTU21D object

        Parameters:
        -----------

        bus:  Number of the used bus

        devAddr:  Address of the used I2C device

        mode:   HTU21D oversampling 
        """
        this = _pyupm_htu21d.new_HTU21D(*args)
        try: self.this.append(this)
        except: self.this = this
    def sampleData(self):
        """
        sampleData(HTU21D self) -> int

        Parameters:
            self: upm::HTU21D *


        int sampleData(void)

        Initiates a temperature/pressure mesasurement and waits for the
        function to complete. The humidity and temperature registers can be
        read after this call. 
        """
        return _pyupm_htu21d.HTU21D_sampleData(self)

    def getHumidity(self, bSampleData=False):
        """
        getHumidity(HTU21D self, int bSampleData=False) -> float

        Parameters:
            bSampleData: int

        getHumidity(HTU21D self) -> float

        Parameters:
            self: upm::HTU21D *


        float
        getHumidity(int bSampleData=false)

        Gets the current measured humidity [RH] 
        """
        return _pyupm_htu21d.HTU21D_getHumidity(self, bSampleData)

    def getTemperature(self, bSampleData=False):
        """
        getTemperature(HTU21D self, int bSampleData=False) -> float

        Parameters:
            bSampleData: int

        getTemperature(HTU21D self) -> float

        Parameters:
            self: upm::HTU21D *


        float
        getTemperature(int bSampleData=false)

        Gets the humidity cell temperature [degC] 
        """
        return _pyupm_htu21d.HTU21D_getTemperature(self, bSampleData)

    def getCompRH(self, bSampleData=True):
        """
        getCompRH(HTU21D self, int bSampleData=True) -> float

        Parameters:
            bSampleData: int

        getCompRH(HTU21D self) -> float

        Parameters:
            self: upm::HTU21D *


        float getCompRH(int
        bSampleData=true)

        Using the current humidity and temperature, the function calculates
        the compensated RH using the equation from the datasheet. 
        """
        return _pyupm_htu21d.HTU21D_getCompRH(self, bSampleData)

    def setHeater(self, bEnable=False):
        """
        setHeater(HTU21D self, int bEnable=False) -> int

        Parameters:
            bEnable: int

        setHeater(HTU21D self) -> int

        Parameters:
            self: upm::HTU21D *


        int setHeater(int
        bEnable=false)

        Sets the heater state. The heater is used to test the sensor
        functionality since the temperature should increase 0.5 to 1.5 degC,
        and the humidity should decrease. The testSensor() function below uses
        the heater.

        Parameters:
        -----------

        bEnable:  Sets to non-zero to turn the heater on 
        """
        return _pyupm_htu21d.HTU21D_setHeater(self, bEnable)

    def resetSensor(self):
        """
        resetSensor(HTU21D self)

        Parameters:
            self: upm::HTU21D *


        void
        resetSensor(void)

        Performs a soft reset of the MPL3115A2 device to ensure it is in a
        known state. This function can be used to reset the min/max
        temperature and pressure values. 
        """
        return _pyupm_htu21d.HTU21D_resetSensor(self)

    def testSensor(self):
        """
        testSensor(HTU21D self) -> int

        Parameters:
            self: upm::HTU21D *


        int testSensor(void)

        Tests the device and verifies it is operating correctly. 
        """
        return _pyupm_htu21d.HTU21D_testSensor(self)

    def i2cWriteReg(self, *args):
        """
        i2cWriteReg(HTU21D self, uint8_t reg, uint8_t value) -> mraa::Result

        Parameters:
            reg: uint8_t
            value: uint8_t


        mraa::Result
        i2cWriteReg(uint8_t reg, uint8_t value)

        Writes to a one-byte register

        Parameters:
        -----------

        reg:  Address of the register

        value:  Byte to be written 
        """
        return _pyupm_htu21d.HTU21D_i2cWriteReg(self, *args)

    def i2cReadReg_16(self, *args):
        """
        i2cReadReg_16(HTU21D self, int reg) -> uint16_t

        Parameters:
            reg: int


        uint16_t
        i2cReadReg_16(int reg)

        Reads a two-byte register

        Parameters:
        -----------

        reg:  Address of the register 
        """
        return _pyupm_htu21d.HTU21D_i2cReadReg_16(self, *args)

    def i2cReadReg_8(self, *args):
        """
        i2cReadReg_8(HTU21D self, int reg) -> uint8_t

        Parameters:
            reg: int


        uint8_t
        i2cReadReg_8(int reg)

        Reads a one-byte register

        Parameters:
        -----------

        reg:  Address of the register 
        """
        return _pyupm_htu21d.HTU21D_i2cReadReg_8(self, *args)

    __swig_destroy__ = _pyupm_htu21d.delete_HTU21D
    __del__ = lambda self : None;
HTU21D_swigregister = _pyupm_htu21d.HTU21D_swigregister
HTU21D_swigregister(HTU21D)

# This file is compatible with both classic and new-style classes.


