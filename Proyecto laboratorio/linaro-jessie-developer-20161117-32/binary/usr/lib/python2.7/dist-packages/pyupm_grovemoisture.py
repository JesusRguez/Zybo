# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_grovemoisture', [dirname(__file__)])
        except ImportError:
            import _pyupm_grovemoisture
            return _pyupm_grovemoisture
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_grovemoisture', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_grovemoisture = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_grovemoisture
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class GroveMoisture(_object):
    """
    API for the Grove Moisture Sensor.

    ID: grovemoisture

    Name: Grove Moisture Sensor

    Category: liquid

    Manufacturer: seeed

    Connection: analog

    Kit: eak hak  UPM module for the Grove Moisture Sensor. This sensor
    can be used to detect the moisture content of soil or whether there is
    water around the sensor. As the moisture content increases, so does
    the value that is read. Note: this sensor is not designed to be left
    in soil nor to be used outdoors.

    C++ includes: grovemoisture.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveMoisture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GroveMoisture, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::GroveMoisture self, int pin) -> GroveMoisture

        Parameters:
            pin: int


        GroveMoisture(int pin)

        Grove analog moisture sensor constructor

        Parameters:
        -----------

        pin:  Analog pin to use 
        """
        this = _pyupm_grovemoisture.new_GroveMoisture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_grovemoisture.delete_GroveMoisture
    __del__ = lambda self : None;
    def value(self):
        """
        value(GroveMoisture self) -> int

        Parameters:
            self: upm::GroveMoisture *


        int value()

        Gets the moisture value from the sensor

        Moisture reading 
        """
        return _pyupm_grovemoisture.GroveMoisture_value(self)

GroveMoisture_swigregister = _pyupm_grovemoisture.GroveMoisture_swigregister
GroveMoisture_swigregister(GroveMoisture)

# This file is compatible with both classic and new-style classes.


