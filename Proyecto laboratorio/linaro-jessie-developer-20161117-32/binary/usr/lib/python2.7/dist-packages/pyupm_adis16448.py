# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_adis16448', [dirname(__file__)])
        except ImportError:
            import _pyupm_adis16448
            return _pyupm_adis16448
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_adis16448', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_adis16448 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_adis16448
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


FLASH_CNT = _pyupm_adis16448.FLASH_CNT
XGYRO_OUT = _pyupm_adis16448.XGYRO_OUT
YGYRO_OUT = _pyupm_adis16448.YGYRO_OUT
ZGYRO_OUT = _pyupm_adis16448.ZGYRO_OUT
XACCL_OUT = _pyupm_adis16448.XACCL_OUT
YACCL_OUT = _pyupm_adis16448.YACCL_OUT
ZACCL_OUT = _pyupm_adis16448.ZACCL_OUT
XMAGN_OUT = _pyupm_adis16448.XMAGN_OUT
YMAGN_OUT = _pyupm_adis16448.YMAGN_OUT
ZMAGN_OUT = _pyupm_adis16448.ZMAGN_OUT
BARO_OUT = _pyupm_adis16448.BARO_OUT
TEMP_OUT = _pyupm_adis16448.TEMP_OUT
XGYRO_OFF = _pyupm_adis16448.XGYRO_OFF
YGYRO_OFF = _pyupm_adis16448.YGYRO_OFF
ZGYRO_OFF = _pyupm_adis16448.ZGYRO_OFF
XACCL_OFF = _pyupm_adis16448.XACCL_OFF
YACCL_OFF = _pyupm_adis16448.YACCL_OFF
ZACCL_OFF = _pyupm_adis16448.ZACCL_OFF
XMAGN_HIC = _pyupm_adis16448.XMAGN_HIC
YMAGN_HIC = _pyupm_adis16448.YMAGN_HIC
ZMAGN_HIC = _pyupm_adis16448.ZMAGN_HIC
XMAGN_SIC = _pyupm_adis16448.XMAGN_SIC
YMAGN_SIC = _pyupm_adis16448.YMAGN_SIC
ZMAGN_SIC = _pyupm_adis16448.ZMAGN_SIC
GPIO_CTRL = _pyupm_adis16448.GPIO_CTRL
MSC_CTRL = _pyupm_adis16448.MSC_CTRL
SMPL_PRD = _pyupm_adis16448.SMPL_PRD
SENS_AVG = _pyupm_adis16448.SENS_AVG
SEQ_CNT = _pyupm_adis16448.SEQ_CNT
DIAG_STAT = _pyupm_adis16448.DIAG_STAT
GLOB_CMD = _pyupm_adis16448.GLOB_CMD
ALM_MAG1 = _pyupm_adis16448.ALM_MAG1
ALM_MAG2 = _pyupm_adis16448.ALM_MAG2
ALM_SMPL1 = _pyupm_adis16448.ALM_SMPL1
ALM_SMPL2 = _pyupm_adis16448.ALM_SMPL2
ALM_CTRL = _pyupm_adis16448.ALM_CTRL
LOT_ID1 = _pyupm_adis16448.LOT_ID1
LOT_ID2 = _pyupm_adis16448.LOT_ID2
PROD_ID = _pyupm_adis16448.PROD_ID
SERIAL_NUM = _pyupm_adis16448.SERIAL_NUM
class ADIS16448(_object):
    """
    API for the Analog Devices ADIS16448 Accelerometer.

    ID: adis16448

    Name: ADIS16448 Accelerometer

    Category: accelerometer

    Manufacturer: generic

    Link:http://www.analog.com/en/products/sensors/isensor-mems-inertial-
    measurement-units/adis16448.html

    Connection: spi  This is an industrial-grade accelerometer by Analog
    Devices.

    C++ includes: adis16448.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADIS16448, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADIS16448, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        ADIS16448(int bus,
        int rst)

        Constructor with configurable HW Reset 
        """
        this = _pyupm_adis16448.new_ADIS16448(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_adis16448.delete_ADIS16448
    __del__ = lambda self : None;
    def resetDUT(self):
        """
        void resetDUT()

        Performs hardware reset by sending the specified pin low for 2 seconds

        """
        return _pyupm_adis16448.ADIS16448_resetDUT(self)

    def configSPI(self):
        """
        void configSPI()

        Sets SPI frequency, mode, and bits/word 
        """
        return _pyupm_adis16448.ADIS16448_configSPI(self)

    def regRead(self, *args):
        """
        int16_t
        regRead(uint8_t regAddr)

        Reads a specified register and returns data 
        """
        return _pyupm_adis16448.ADIS16448_regRead(self, *args)

    def regWrite(self, *args):
        """
        void
        regWrite(uint8_t regAddr, uint16_t regData)

        Writes to a specified register 
        """
        return _pyupm_adis16448.ADIS16448_regWrite(self, *args)

    def accelScale(self, *args):
        """
        float
        accelScale(int16_t sensorData)

        Scales accelerometer data 
        """
        return _pyupm_adis16448.ADIS16448_accelScale(self, *args)

    def gyroScale(self, *args):
        """
        float
        gyroScale(int16_t sensorData)

        Scales gyro data 
        """
        return _pyupm_adis16448.ADIS16448_gyroScale(self, *args)

    def tempScale(self, *args):
        """
        float
        tempScale(int16_t sensorData)

        Scales temperature data 
        """
        return _pyupm_adis16448.ADIS16448_tempScale(self, *args)

    def pressureScale(self, *args):
        """
        float
        pressureScale(int16_t sensorData)

        Scales pressure data 
        """
        return _pyupm_adis16448.ADIS16448_pressureScale(self, *args)

    def magnetometerScale(self, *args):
        """
        float
        magnetometerScale(int16_t sensorData)

        Scales magnetometer data 
        """
        return _pyupm_adis16448.ADIS16448_magnetometerScale(self, *args)

ADIS16448_swigregister = _pyupm_adis16448.ADIS16448_swigregister
ADIS16448_swigregister(ADIS16448)

# This file is compatible with both classic and new-style classes.


