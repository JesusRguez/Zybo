# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_sx1276', [dirname(__file__)])
        except ImportError:
            import _pyupm_sx1276
            return _pyupm_sx1276
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_sx1276', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_sx1276 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_sx1276
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_floatp():
  """new_floatp() -> float *"""
  return _pyupm_sx1276.new_floatp()

def copy_floatp(*args):
  """
    copy_floatp(float value) -> float *

    Parameters:
        value: float

    """
  return _pyupm_sx1276.copy_floatp(*args)

def delete_floatp(*args):
  """
    delete_floatp(float * obj)

    Parameters:
        obj: float *

    """
  return _pyupm_sx1276.delete_floatp(*args)

def floatp_assign(*args):
  """
    floatp_assign(float * obj, float value)

    Parameters:
        obj: float *
        value: float

    """
  return _pyupm_sx1276.floatp_assign(*args)

def floatp_value(*args):
  """
    floatp_value(float * obj) -> float

    Parameters:
        obj: float *

    """
  return _pyupm_sx1276.floatp_value(*args)
FXOSC_FREQ = _pyupm_sx1276.FXOSC_FREQ
FXOSC_STEP = _pyupm_sx1276.FXOSC_STEP
class SX1276(_object):
    """
    API for the SX1276 LoRa/FSK modem.

    ID: sx1276

    Name: SX1276 LoRa/FSK modem

    Other Names: SX1277 SX1278 SX1279

    Category: wifi

    Manufacturer: semtech

    Connection: spi gpio

    Link:http://www.digikey.com/product-
    search/en?vendor=0&keywords=SX1276MB1LAS  The SX1276 is a FSK/OOK/LoRa
    modem capable of both Low Frequency and High Frequency communication.

    It requires a 3.3v power supply, do not use 5v.

    Frequency Hopping Spread Spectrum (FHSS) is not currently supported.

    While not all of the functionality of this device is supported
    initially, methods and register definitions are provided that should
    allow an end user to implement whatever features are required.

    FSK send/receive exampleLORA send/receive example

    C++ includes: sx1276.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SX1276, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SX1276, name)
    __repr__ = _swig_repr
    chipRevision = _pyupm_sx1276.SX1276_chipRevision
    FIFO_SIZE = _pyupm_sx1276.SX1276_FIFO_SIZE
    RF_MID_BAND_THRESH = _pyupm_sx1276.SX1276_RF_MID_BAND_THRESH
    LOR_RSSI_OFFSET_HF = _pyupm_sx1276.SX1276_LOR_RSSI_OFFSET_HF
    LOR_RSSI_OFFSET_LF = _pyupm_sx1276.SX1276_LOR_RSSI_OFFSET_LF
    MODEM_LORA = _pyupm_sx1276.SX1276_MODEM_LORA
    MODEM_FSK = _pyupm_sx1276.SX1276_MODEM_FSK
    REVENT_DONE = _pyupm_sx1276.SX1276_REVENT_DONE
    REVENT_EXEC = _pyupm_sx1276.SX1276_REVENT_EXEC
    REVENT_ERROR = _pyupm_sx1276.SX1276_REVENT_ERROR
    REVENT_TIMEOUT = _pyupm_sx1276.SX1276_REVENT_TIMEOUT
    COM_RegFifo = _pyupm_sx1276.SX1276_COM_RegFifo
    COM_RegOpMode = _pyupm_sx1276.SX1276_COM_RegOpMode
    FSK_RegBitrateMsb = _pyupm_sx1276.SX1276_FSK_RegBitrateMsb
    LOR_Reserved02 = _pyupm_sx1276.SX1276_LOR_Reserved02
    FSK_RegBitrateLsb = _pyupm_sx1276.SX1276_FSK_RegBitrateLsb
    LOR_Reserved03 = _pyupm_sx1276.SX1276_LOR_Reserved03
    FSK_RegFdevMsb = _pyupm_sx1276.SX1276_FSK_RegFdevMsb
    LOR_Reserved04 = _pyupm_sx1276.SX1276_LOR_Reserved04
    FSK_RegFdevLsb = _pyupm_sx1276.SX1276_FSK_RegFdevLsb
    LOR_Reserved05 = _pyupm_sx1276.SX1276_LOR_Reserved05
    COM_RegFrfMsb = _pyupm_sx1276.SX1276_COM_RegFrfMsb
    COM_RegFrfMid = _pyupm_sx1276.SX1276_COM_RegFrfMid
    COM_RegFrfLsb = _pyupm_sx1276.SX1276_COM_RegFrfLsb
    COM_RegPaConfig = _pyupm_sx1276.SX1276_COM_RegPaConfig
    COM_RegPaRamp = _pyupm_sx1276.SX1276_COM_RegPaRamp
    COM_RegOcp = _pyupm_sx1276.SX1276_COM_RegOcp
    COM_RegLna = _pyupm_sx1276.SX1276_COM_RegLna
    FSK_RegRxConfig = _pyupm_sx1276.SX1276_FSK_RegRxConfig
    LOR_RegFifoAddrPtr = _pyupm_sx1276.SX1276_LOR_RegFifoAddrPtr
    FSK_RegRssiConfg = _pyupm_sx1276.SX1276_FSK_RegRssiConfg
    LOR_RegFifoTxBaseAddr = _pyupm_sx1276.SX1276_LOR_RegFifoTxBaseAddr
    FSK_RegRssiCollision = _pyupm_sx1276.SX1276_FSK_RegRssiCollision
    LOR_RegFifoRxBaseAddr = _pyupm_sx1276.SX1276_LOR_RegFifoRxBaseAddr
    FSK_RegRssiThresh = _pyupm_sx1276.SX1276_FSK_RegRssiThresh
    LOR_RegFifoRxCurrentAddr = _pyupm_sx1276.SX1276_LOR_RegFifoRxCurrentAddr
    FSK_RegRssiValue = _pyupm_sx1276.SX1276_FSK_RegRssiValue
    LOR_RegIrqFlagsMask = _pyupm_sx1276.SX1276_LOR_RegIrqFlagsMask
    FSK_RegRxBw = _pyupm_sx1276.SX1276_FSK_RegRxBw
    LOR_RegIrqFlags = _pyupm_sx1276.SX1276_LOR_RegIrqFlags
    FSK_RegAfcBw = _pyupm_sx1276.SX1276_FSK_RegAfcBw
    LOR_RegRxNbBytes = _pyupm_sx1276.SX1276_LOR_RegRxNbBytes
    FSK_RegOokPeak = _pyupm_sx1276.SX1276_FSK_RegOokPeak
    LOR_RegRxHeaderCntValueMsb = _pyupm_sx1276.SX1276_LOR_RegRxHeaderCntValueMsb
    FSK_RegOokFix = _pyupm_sx1276.SX1276_FSK_RegOokFix
    LOR_RegRxHeaderCntValueLsb = _pyupm_sx1276.SX1276_LOR_RegRxHeaderCntValueLsb
    FSK_RegOokAvg = _pyupm_sx1276.SX1276_FSK_RegOokAvg
    LOR_RegRxPacketCntValueMsb = _pyupm_sx1276.SX1276_LOR_RegRxPacketCntValueMsb
    FSK_Reserved17 = _pyupm_sx1276.SX1276_FSK_Reserved17
    LOR_RegRxPacketCntValueLsb = _pyupm_sx1276.SX1276_LOR_RegRxPacketCntValueLsb
    FSK_Reserved18 = _pyupm_sx1276.SX1276_FSK_Reserved18
    LOR_RegModemStat = _pyupm_sx1276.SX1276_LOR_RegModemStat
    FSK_Reserved19 = _pyupm_sx1276.SX1276_FSK_Reserved19
    LOR_RegPktSnrValue = _pyupm_sx1276.SX1276_LOR_RegPktSnrValue
    FSK_RegAfcFei = _pyupm_sx1276.SX1276_FSK_RegAfcFei
    LOR_RegPktRssiValue = _pyupm_sx1276.SX1276_LOR_RegPktRssiValue
    FSK_RegAfcMsb = _pyupm_sx1276.SX1276_FSK_RegAfcMsb
    LOR_RegRssiValue = _pyupm_sx1276.SX1276_LOR_RegRssiValue
    FSK_RegAfcLsb = _pyupm_sx1276.SX1276_FSK_RegAfcLsb
    LOR_RegHopChannel = _pyupm_sx1276.SX1276_LOR_RegHopChannel
    FSK_RegFeiMsb = _pyupm_sx1276.SX1276_FSK_RegFeiMsb
    LOR_RegModemConfig1 = _pyupm_sx1276.SX1276_LOR_RegModemConfig1
    FSK_RegFeiLsb = _pyupm_sx1276.SX1276_FSK_RegFeiLsb
    LOR_RegModemConfig2 = _pyupm_sx1276.SX1276_LOR_RegModemConfig2
    FSK_RegPreambleDetect = _pyupm_sx1276.SX1276_FSK_RegPreambleDetect
    LOR_RegSymbTimeoutLsb = _pyupm_sx1276.SX1276_LOR_RegSymbTimeoutLsb
    FSK_RegRxTimeout1 = _pyupm_sx1276.SX1276_FSK_RegRxTimeout1
    LOR_RegPreambleMsb = _pyupm_sx1276.SX1276_LOR_RegPreambleMsb
    FSK_RegRxTimeout2 = _pyupm_sx1276.SX1276_FSK_RegRxTimeout2
    LOR_RegPreambleLsb = _pyupm_sx1276.SX1276_LOR_RegPreambleLsb
    FSK_RegRxTimeout3 = _pyupm_sx1276.SX1276_FSK_RegRxTimeout3
    LOR_RegPayloadLength = _pyupm_sx1276.SX1276_LOR_RegPayloadLength
    FSK_RegRxDelay = _pyupm_sx1276.SX1276_FSK_RegRxDelay
    LOR_RegMaxPayloadLength = _pyupm_sx1276.SX1276_LOR_RegMaxPayloadLength
    FSK_RegOsc = _pyupm_sx1276.SX1276_FSK_RegOsc
    LOR_RegHopPeriod = _pyupm_sx1276.SX1276_LOR_RegHopPeriod
    FSK_RegPreambleMsb = _pyupm_sx1276.SX1276_FSK_RegPreambleMsb
    LOR_RegFifoRxByteAddr = _pyupm_sx1276.SX1276_LOR_RegFifoRxByteAddr
    FSK_RegPreambleLsb = _pyupm_sx1276.SX1276_FSK_RegPreambleLsb
    LOR_RegModemConfig3 = _pyupm_sx1276.SX1276_LOR_RegModemConfig3
    FSK_RegSyncConfig = _pyupm_sx1276.SX1276_FSK_RegSyncConfig
    LOR_Reserved27 = _pyupm_sx1276.SX1276_LOR_Reserved27
    FSK_RegSyncValue1 = _pyupm_sx1276.SX1276_FSK_RegSyncValue1
    LOR_RegFeiMsb = _pyupm_sx1276.SX1276_LOR_RegFeiMsb
    FSK_RegSyncValue2 = _pyupm_sx1276.SX1276_FSK_RegSyncValue2
    LOR_RegFeiMid = _pyupm_sx1276.SX1276_LOR_RegFeiMid
    FSK_RegSyncValue3 = _pyupm_sx1276.SX1276_FSK_RegSyncValue3
    LOR_RegFeiLsb = _pyupm_sx1276.SX1276_LOR_RegFeiLsb
    FSK_RegSyncValue4 = _pyupm_sx1276.SX1276_FSK_RegSyncValue4
    LOR_Reserved2b = _pyupm_sx1276.SX1276_LOR_Reserved2b
    FSK_RegSyncValue5 = _pyupm_sx1276.SX1276_FSK_RegSyncValue5
    LOR_RegRssiWideband = _pyupm_sx1276.SX1276_LOR_RegRssiWideband
    FSK_RegSyncValue6 = _pyupm_sx1276.SX1276_FSK_RegSyncValue6
    LOR_Reserved2d = _pyupm_sx1276.SX1276_LOR_Reserved2d
    FSK_RegSyncValue7 = _pyupm_sx1276.SX1276_FSK_RegSyncValue7
    LOR_Reserved2e = _pyupm_sx1276.SX1276_LOR_Reserved2e
    FSK_RegSyncValue8 = _pyupm_sx1276.SX1276_FSK_RegSyncValue8
    LOR_Reserved2f = _pyupm_sx1276.SX1276_LOR_Reserved2f
    FSK_RegPacketConfig1 = _pyupm_sx1276.SX1276_FSK_RegPacketConfig1
    LOR_Reserved30 = _pyupm_sx1276.SX1276_LOR_Reserved30
    FSK_RegPacketConfig2 = _pyupm_sx1276.SX1276_FSK_RegPacketConfig2
    LOR_RegDetectOptimize = _pyupm_sx1276.SX1276_LOR_RegDetectOptimize
    FSK_RegPayloadLength = _pyupm_sx1276.SX1276_FSK_RegPayloadLength
    LOR_Reserved32 = _pyupm_sx1276.SX1276_LOR_Reserved32
    FSK_RegNodeAddr = _pyupm_sx1276.SX1276_FSK_RegNodeAddr
    LOR_RegInvertIQ = _pyupm_sx1276.SX1276_LOR_RegInvertIQ
    FSK_RegBroadcastAddr = _pyupm_sx1276.SX1276_FSK_RegBroadcastAddr
    LOR_Reserved34 = _pyupm_sx1276.SX1276_LOR_Reserved34
    FSK_RegFifoThresh = _pyupm_sx1276.SX1276_FSK_RegFifoThresh
    LOR_Reserved35 = _pyupm_sx1276.SX1276_LOR_Reserved35
    FSK_RegSeqConfig1 = _pyupm_sx1276.SX1276_FSK_RegSeqConfig1
    LOR_Reserved36 = _pyupm_sx1276.SX1276_LOR_Reserved36
    FSK_RegSeqConfig2 = _pyupm_sx1276.SX1276_FSK_RegSeqConfig2
    LOR_RegDetectionThreshold = _pyupm_sx1276.SX1276_LOR_RegDetectionThreshold
    FSK_RegTimerResol = _pyupm_sx1276.SX1276_FSK_RegTimerResol
    LOR_Reserved38 = _pyupm_sx1276.SX1276_LOR_Reserved38
    FSK_RegTimer1Coeff = _pyupm_sx1276.SX1276_FSK_RegTimer1Coeff
    LOR_RegSyncWord = _pyupm_sx1276.SX1276_LOR_RegSyncWord
    FSK_RegTimer2Coeff = _pyupm_sx1276.SX1276_FSK_RegTimer2Coeff
    LOR_Reserved3a = _pyupm_sx1276.SX1276_LOR_Reserved3a
    FSK_RegImageCal = _pyupm_sx1276.SX1276_FSK_RegImageCal
    LOR_Reserved3b = _pyupm_sx1276.SX1276_LOR_Reserved3b
    LOR_RegInvertIQ2 = _pyupm_sx1276.SX1276_LOR_RegInvertIQ2
    FSK_RegTemp = _pyupm_sx1276.SX1276_FSK_RegTemp
    LOR_Reserved3c = _pyupm_sx1276.SX1276_LOR_Reserved3c
    FSK_RegLowBat = _pyupm_sx1276.SX1276_FSK_RegLowBat
    LOR_Reserved3d = _pyupm_sx1276.SX1276_LOR_Reserved3d
    FSK_RegIrqFlags1 = _pyupm_sx1276.SX1276_FSK_RegIrqFlags1
    LOR_Reserved3e = _pyupm_sx1276.SX1276_LOR_Reserved3e
    FSK_RegIrqFlags2 = _pyupm_sx1276.SX1276_FSK_RegIrqFlags2
    LOR_Reserved3f = _pyupm_sx1276.SX1276_LOR_Reserved3f
    COM_RegDioMapping1 = _pyupm_sx1276.SX1276_COM_RegDioMapping1
    COM_RegDioMapping2 = _pyupm_sx1276.SX1276_COM_RegDioMapping2
    COM_RegVersion = _pyupm_sx1276.SX1276_COM_RegVersion
    FSK_Reserved44 = _pyupm_sx1276.SX1276_FSK_Reserved44
    LOR_RegPllHop = _pyupm_sx1276.SX1276_LOR_RegPllHop
    COM_RegTcxo = _pyupm_sx1276.SX1276_COM_RegTcxo
    COM_RegPaDac = _pyupm_sx1276.SX1276_COM_RegPaDac
    COM_RegFormerTemp = _pyupm_sx1276.SX1276_COM_RegFormerTemp
    FSK_RegBitRateFrac = _pyupm_sx1276.SX1276_FSK_RegBitRateFrac
    LOR_Reserved5d = _pyupm_sx1276.SX1276_LOR_Reserved5d
    COM_RegAgcRef = _pyupm_sx1276.SX1276_COM_RegAgcRef
    COM_RegAgcThresh1 = _pyupm_sx1276.SX1276_COM_RegAgcThresh1
    COM_RegAgcThresh2 = _pyupm_sx1276.SX1276_COM_RegAgcThresh2
    COM_RegAgcThresh3 = _pyupm_sx1276.SX1276_COM_RegAgcThresh3
    COM_RegPll = _pyupm_sx1276.SX1276_COM_RegPll
    OPMODE_Mode0 = _pyupm_sx1276.SX1276_OPMODE_Mode0
    OPMODE_Mode1 = _pyupm_sx1276.SX1276_OPMODE_Mode1
    OPMODE_Mode2 = _pyupm_sx1276.SX1276_OPMODE_Mode2
    _OPMODE_Mode_MASK = _pyupm_sx1276.SX1276__OPMODE_Mode_MASK
    _OPMODE_Mode_SHIFT = _pyupm_sx1276.SX1276__OPMODE_Mode_SHIFT
    OPMODE_LowFrequencyModeOn = _pyupm_sx1276.SX1276_OPMODE_LowFrequencyModeOn
    OPMODE_FSK_ModulationType0 = _pyupm_sx1276.SX1276_OPMODE_FSK_ModulationType0
    OPMODE_FSK_ModulationType1 = _pyupm_sx1276.SX1276_OPMODE_FSK_ModulationType1
    _OPMODE_FSK_ModulationType_MASK = _pyupm_sx1276.SX1276__OPMODE_FSK_ModulationType_MASK
    _OPMODE_FSK_ModulationType_SHIFT = _pyupm_sx1276.SX1276__OPMODE_FSK_ModulationType_SHIFT
    OPMODE_LOR_Reserved0x20 = _pyupm_sx1276.SX1276_OPMODE_LOR_Reserved0x20
    OPMODE_LOR_AccessSharedReg = _pyupm_sx1276.SX1276_OPMODE_LOR_AccessSharedReg
    OPMODE_LongRangeMode = _pyupm_sx1276.SX1276_OPMODE_LongRangeMode
    MODE_Sleep = _pyupm_sx1276.SX1276_MODE_Sleep
    MODE_Standby = _pyupm_sx1276.SX1276_MODE_Standby
    MODE_FSTX = _pyupm_sx1276.SX1276_MODE_FSTX
    MODE_TxMode = _pyupm_sx1276.SX1276_MODE_TxMode
    MODE_FSRX = _pyupm_sx1276.SX1276_MODE_FSRX
    MODE_FSK_RxMode = _pyupm_sx1276.SX1276_MODE_FSK_RxMode
    MODE_LOR_RxContinuous = _pyupm_sx1276.SX1276_MODE_LOR_RxContinuous
    MODE_FSK_Reserved6 = _pyupm_sx1276.SX1276_MODE_FSK_Reserved6
    MODE_LOR_RxSingle = _pyupm_sx1276.SX1276_MODE_LOR_RxSingle
    MODE_FSK_Reserved7 = _pyupm_sx1276.SX1276_MODE_FSK_Reserved7
    MODE_LOR_CAD = _pyupm_sx1276.SX1276_MODE_LOR_CAD
    MODULATION_FSK = _pyupm_sx1276.SX1276_MODULATION_FSK
    MODULATION_OOK = _pyupm_sx1276.SX1276_MODULATION_OOK
    PACONFIG_OutputPower0 = _pyupm_sx1276.SX1276_PACONFIG_OutputPower0
    PACONFIG_OutputPower1 = _pyupm_sx1276.SX1276_PACONFIG_OutputPower1
    PACONFIG_OutputPower2 = _pyupm_sx1276.SX1276_PACONFIG_OutputPower2
    PACONFIG_OutputPower3 = _pyupm_sx1276.SX1276_PACONFIG_OutputPower3
    _PACONFIG_OutputPower_MASK = _pyupm_sx1276.SX1276__PACONFIG_OutputPower_MASK
    _PACONFIG_OutputPower_SHIFT = _pyupm_sx1276.SX1276__PACONFIG_OutputPower_SHIFT
    PACONFIG_MaxPower0 = _pyupm_sx1276.SX1276_PACONFIG_MaxPower0
    PACONFIG_MaxPower1 = _pyupm_sx1276.SX1276_PACONFIG_MaxPower1
    PACONFIG_MaxPower2 = _pyupm_sx1276.SX1276_PACONFIG_MaxPower2
    _PACONFIG_MaxPower_MASK = _pyupm_sx1276.SX1276__PACONFIG_MaxPower_MASK
    _PACONFIG_MaxPower_SHIFT = _pyupm_sx1276.SX1276__PACONFIG_MaxPower_SHIFT
    PACONFIG_PaSelect = _pyupm_sx1276.SX1276_PACONFIG_PaSelect
    PARAMP_PaRamp0 = _pyupm_sx1276.SX1276_PARAMP_PaRamp0
    PARAMP_PaRamp1 = _pyupm_sx1276.SX1276_PARAMP_PaRamp1
    PARAMP_PaRamp2 = _pyupm_sx1276.SX1276_PARAMP_PaRamp2
    PARAMP_PaRamp3 = _pyupm_sx1276.SX1276_PARAMP_PaRamp3
    _PARAMP_PaRamp_MASK = _pyupm_sx1276.SX1276__PARAMP_PaRamp_MASK
    _PARAMP_PaRamp_SHIFT = _pyupm_sx1276.SX1276__PARAMP_PaRamp_SHIFT
    PARAMP_FSK_ModulationShaping0 = _pyupm_sx1276.SX1276_PARAMP_FSK_ModulationShaping0
    PARAMP_FSK_ModulationShaping1 = _pyupm_sx1276.SX1276_PARAMP_FSK_ModulationShaping1
    _PARAMP_FSK_ModulationShaping_MASK = _pyupm_sx1276.SX1276__PARAMP_FSK_ModulationShaping_MASK
    _PARAMP_FSK_ModulationShaping_SHIFT = _pyupm_sx1276.SX1276__PARAMP_FSK_ModulationShaping_SHIFT
    PARAMP_3_4MS = _pyupm_sx1276.SX1276_PARAMP_3_4MS
    PARAMP_2MS = _pyupm_sx1276.SX1276_PARAMP_2MS
    PARAMP_1MS = _pyupm_sx1276.SX1276_PARAMP_1MS
    PARAMP_500US = _pyupm_sx1276.SX1276_PARAMP_500US
    PARAMP_250US = _pyupm_sx1276.SX1276_PARAMP_250US
    PARAMP_125US = _pyupm_sx1276.SX1276_PARAMP_125US
    PARAMP_100US = _pyupm_sx1276.SX1276_PARAMP_100US
    PARAMP_62US = _pyupm_sx1276.SX1276_PARAMP_62US
    PARAMP_50US = _pyupm_sx1276.SX1276_PARAMP_50US
    PARAMP_40US = _pyupm_sx1276.SX1276_PARAMP_40US
    PARAMP_31US = _pyupm_sx1276.SX1276_PARAMP_31US
    PARAMP_25US = _pyupm_sx1276.SX1276_PARAMP_25US
    PARAMP_20US = _pyupm_sx1276.SX1276_PARAMP_20US
    PARAMP_15US = _pyupm_sx1276.SX1276_PARAMP_15US
    PARAMP_12US = _pyupm_sx1276.SX1276_PARAMP_12US
    PARAMP_10US = _pyupm_sx1276.SX1276_PARAMP_10US
    MODSHAPING_NOSHAPING = _pyupm_sx1276.SX1276_MODSHAPING_NOSHAPING
    MODSHAPING_FSK_GaussianFilterBT1 = _pyupm_sx1276.SX1276_MODSHAPING_FSK_GaussianFilterBT1
    MODSHAPING_FSK_GaussianFilterBT05 = _pyupm_sx1276.SX1276_MODSHAPING_FSK_GaussianFilterBT05
    MODSHAPING_FSK_GaussianFilterBT03 = _pyupm_sx1276.SX1276_MODSHAPING_FSK_GaussianFilterBT03
    MODSHAPING_OOK_FCutoffBitRate = _pyupm_sx1276.SX1276_MODSHAPING_OOK_FCutoffBitRate
    MODSHAPING_OOK_FCutoffBitRate2 = _pyupm_sx1276.SX1276_MODSHAPING_OOK_FCutoffBitRate2
    OCP_OcpTrim0 = _pyupm_sx1276.SX1276_OCP_OcpTrim0
    OCP_OcpTrim1 = _pyupm_sx1276.SX1276_OCP_OcpTrim1
    OCP_OcpTrim2 = _pyupm_sx1276.SX1276_OCP_OcpTrim2
    OCP_OcpTrim3 = _pyupm_sx1276.SX1276_OCP_OcpTrim3
    _OCP_OcpTrim_MASK = _pyupm_sx1276.SX1276__OCP_OcpTrim_MASK
    _OCP_OcpTrim_SHIFT = _pyupm_sx1276.SX1276__OCP_OcpTrim_SHIFT
    OCP_OcpOn = _pyupm_sx1276.SX1276_OCP_OcpOn
    LNA_LnaBoostHf0 = _pyupm_sx1276.SX1276_LNA_LnaBoostHf0
    LNA_LnaBoostHf1 = _pyupm_sx1276.SX1276_LNA_LnaBoostHf1
    _LNA_LnaBoostHf_MASK = _pyupm_sx1276.SX1276__LNA_LnaBoostHf_MASK
    _LNA_LnaBoostHf_SHIFT = _pyupm_sx1276.SX1276__LNA_LnaBoostHf_SHIFT
    LNA_LnaBoostLf0 = _pyupm_sx1276.SX1276_LNA_LnaBoostLf0
    LNA_LnaBoostLf1 = _pyupm_sx1276.SX1276_LNA_LnaBoostLf1
    _LNA_LnaBoostLf_MASK = _pyupm_sx1276.SX1276__LNA_LnaBoostLf_MASK
    _LNA_LnaBoostLf_SHIFT = _pyupm_sx1276.SX1276__LNA_LnaBoostLf_SHIFT
    LNA_LnaGain0 = _pyupm_sx1276.SX1276_LNA_LnaGain0
    LNA_LnaGain1 = _pyupm_sx1276.SX1276_LNA_LnaGain1
    LNA_LnaGain2 = _pyupm_sx1276.SX1276_LNA_LnaGain2
    _LNA_LnaGain_MASK = _pyupm_sx1276.SX1276__LNA_LnaGain_MASK
    _LNA_LnaGain_SHIFT = _pyupm_sx1276.SX1276__LNA_LnaGain_SHIFT
    LNABOOSTHF_Default = _pyupm_sx1276.SX1276_LNABOOSTHF_Default
    LNABOOSTHF_BoostOn = _pyupm_sx1276.SX1276_LNABOOSTHF_BoostOn
    LNABOOSTLF_Default = _pyupm_sx1276.SX1276_LNABOOSTLF_Default
    LNAGAIN_G1 = _pyupm_sx1276.SX1276_LNAGAIN_G1
    LNAGAIN_G2 = _pyupm_sx1276.SX1276_LNAGAIN_G2
    LNAGAIN_G3 = _pyupm_sx1276.SX1276_LNAGAIN_G3
    LNAGAIN_G4 = _pyupm_sx1276.SX1276_LNAGAIN_G4
    LNAGAIN_G5 = _pyupm_sx1276.SX1276_LNAGAIN_G5
    LNAGAIN_G6 = _pyupm_sx1276.SX1276_LNAGAIN_G6
    RXCONFIG_RxTrigger0 = _pyupm_sx1276.SX1276_RXCONFIG_RxTrigger0
    RXCONFIG_RxTrigger1 = _pyupm_sx1276.SX1276_RXCONFIG_RxTrigger1
    RXCONFIG_RxTrigger2 = _pyupm_sx1276.SX1276_RXCONFIG_RxTrigger2
    _RXCONFIG_RxTrigger_MASK = _pyupm_sx1276.SX1276__RXCONFIG_RxTrigger_MASK
    _RXCONFIG_RxTrigger_SHIFT = _pyupm_sx1276.SX1276__RXCONFIG_RxTrigger_SHIFT
    RXCONFIG_AgcAutoOn = _pyupm_sx1276.SX1276_RXCONFIG_AgcAutoOn
    RXCONFIG_AfcAutoOn = _pyupm_sx1276.SX1276_RXCONFIG_AfcAutoOn
    RXCONFIG_RestartRxWithPllLock = _pyupm_sx1276.SX1276_RXCONFIG_RestartRxWithPllLock
    RXCONFIG_RestartRxWithoutPllLock = _pyupm_sx1276.SX1276_RXCONFIG_RestartRxWithoutPllLock
    RXCONFIG_RestartRxOnCollision = _pyupm_sx1276.SX1276_RXCONFIG_RestartRxOnCollision
    RSSICONFIG_RssiSmoothing0 = _pyupm_sx1276.SX1276_RSSICONFIG_RssiSmoothing0
    RSSICONFIG_RssiSmoothing1 = _pyupm_sx1276.SX1276_RSSICONFIG_RssiSmoothing1
    RSSICONFIG_RssiSmoothing2 = _pyupm_sx1276.SX1276_RSSICONFIG_RssiSmoothing2
    _RSSICONFIG_RssiSmoothing_MASK = _pyupm_sx1276.SX1276__RSSICONFIG_RssiSmoothing_MASK
    _RSSICONFIG_RssiSmoothing_SHIFT = _pyupm_sx1276.SX1276__RSSICONFIG_RssiSmoothing_SHIFT
    RSSICONFIG_RssiOffset0 = _pyupm_sx1276.SX1276_RSSICONFIG_RssiOffset0
    RSSICONFIG_RssiOffset1 = _pyupm_sx1276.SX1276_RSSICONFIG_RssiOffset1
    RSSICONFIG_RssiOffset2 = _pyupm_sx1276.SX1276_RSSICONFIG_RssiOffset2
    RSSICONFIG_RssiOffset3 = _pyupm_sx1276.SX1276_RSSICONFIG_RssiOffset3
    RSSICONFIG_RssiOffset4 = _pyupm_sx1276.SX1276_RSSICONFIG_RssiOffset4
    _RSSICONFIG_RssiOffset_MASK = _pyupm_sx1276.SX1276__RSSICONFIG_RssiOffset_MASK
    _RSSICONFIG_RssiOffset_SHIFT = _pyupm_sx1276.SX1276__RSSICONFIG_RssiOffset_SHIFT
    RSSISMOOTHING_2 = _pyupm_sx1276.SX1276_RSSISMOOTHING_2
    RSSISMOOTHING_4 = _pyupm_sx1276.SX1276_RSSISMOOTHING_4
    RSSISMOOTHING_8 = _pyupm_sx1276.SX1276_RSSISMOOTHING_8
    RSSISMOOTHING_16 = _pyupm_sx1276.SX1276_RSSISMOOTHING_16
    RSSISMOOTHING_32 = _pyupm_sx1276.SX1276_RSSISMOOTHING_32
    RSSISMOOTHING_64 = _pyupm_sx1276.SX1276_RSSISMOOTHING_64
    RSSISMOOTHING_128 = _pyupm_sx1276.SX1276_RSSISMOOTHING_128
    RSSISMOOTHING_256 = _pyupm_sx1276.SX1276_RSSISMOOTHING_256
    LOR_IRQFLAG_CadDetected = _pyupm_sx1276.SX1276_LOR_IRQFLAG_CadDetected
    LOR_IRQFLAG_FhssChangeChannel = _pyupm_sx1276.SX1276_LOR_IRQFLAG_FhssChangeChannel
    LOR_IRQFLAG_CadDone = _pyupm_sx1276.SX1276_LOR_IRQFLAG_CadDone
    LOR_IRQFLAG_TxDone = _pyupm_sx1276.SX1276_LOR_IRQFLAG_TxDone
    LOR_IRQFLAG_ValidHeader = _pyupm_sx1276.SX1276_LOR_IRQFLAG_ValidHeader
    LOR_IRQFLAG_PayloadCrcError = _pyupm_sx1276.SX1276_LOR_IRQFLAG_PayloadCrcError
    LOR_IRQFLAG_RxDone = _pyupm_sx1276.SX1276_LOR_IRQFLAG_RxDone
    LOR_IRQFLAG_RxTimeout = _pyupm_sx1276.SX1276_LOR_IRQFLAG_RxTimeout
    RXBW_RxBwExp0 = _pyupm_sx1276.SX1276_RXBW_RxBwExp0
    RXBW_RxBwExp1 = _pyupm_sx1276.SX1276_RXBW_RxBwExp1
    RXBW_RxBwExp2 = _pyupm_sx1276.SX1276_RXBW_RxBwExp2
    _RXBW_RxBwExp_MASK = _pyupm_sx1276.SX1276__RXBW_RxBwExp_MASK
    _RXBW_RxBwExp_SHIFT = _pyupm_sx1276.SX1276__RXBW_RxBwExp_SHIFT
    RXBW_RxBwMant0 = _pyupm_sx1276.SX1276_RXBW_RxBwMant0
    RXBW_RxBwMant1 = _pyupm_sx1276.SX1276_RXBW_RxBwMant1
    _RXBW_RxBwMant_MASK = _pyupm_sx1276.SX1276__RXBW_RxBwMant_MASK
    _RXBW_RxBwMant_SHIFT = _pyupm_sx1276.SX1276__RXBW_RxBwMant_SHIFT
    RXBWMANT_0 = _pyupm_sx1276.SX1276_RXBWMANT_0
    RXBWMANT_1 = _pyupm_sx1276.SX1276_RXBWMANT_1
    RXBWMANT_2 = _pyupm_sx1276.SX1276_RXBWMANT_2
    RXBWEXP_1 = _pyupm_sx1276.SX1276_RXBWEXP_1
    RXBWEXP_2 = _pyupm_sx1276.SX1276_RXBWEXP_2
    RXBWEXP_3 = _pyupm_sx1276.SX1276_RXBWEXP_3
    RXBWEXP_4 = _pyupm_sx1276.SX1276_RXBWEXP_4
    RXBWEXP_5 = _pyupm_sx1276.SX1276_RXBWEXP_5
    RXBWEXP_6 = _pyupm_sx1276.SX1276_RXBWEXP_6
    RXBWEXP_7 = _pyupm_sx1276.SX1276_RXBWEXP_7
    OOKPEAK_OokPeakThreshStep0 = _pyupm_sx1276.SX1276_OOKPEAK_OokPeakThreshStep0
    OOKPEAK_OokPeakThreshStep1 = _pyupm_sx1276.SX1276_OOKPEAK_OokPeakThreshStep1
    OOKPEAK_OokPeakThreshStep2 = _pyupm_sx1276.SX1276_OOKPEAK_OokPeakThreshStep2
    _OOKPEAK_OokPeakThreshStep_MASK = _pyupm_sx1276.SX1276__OOKPEAK_OokPeakThreshStep_MASK
    _OOKPEAK_OokPeakThreshStep_SHIFT = _pyupm_sx1276.SX1276__OOKPEAK_OokPeakThreshStep_SHIFT
    OOKPEAK_OokThreshType0 = _pyupm_sx1276.SX1276_OOKPEAK_OokThreshType0
    OOKPEAK_OokThreshType1 = _pyupm_sx1276.SX1276_OOKPEAK_OokThreshType1
    _OOKPEAK_OokThreshType_MASK = _pyupm_sx1276.SX1276__OOKPEAK_OokThreshType_MASK
    _OOKPEAK_OokThreshType_SHIFT = _pyupm_sx1276.SX1276__OOKPEAK_OokThreshType_SHIFT
    OOKPEAK_BitSyncOn = _pyupm_sx1276.SX1276_OOKPEAK_BitSyncOn
    OOKPEAKTHRESHSTEP_05dB = _pyupm_sx1276.SX1276_OOKPEAKTHRESHSTEP_05dB
    OOKPEAKTHRESHSTEP_1dB = _pyupm_sx1276.SX1276_OOKPEAKTHRESHSTEP_1dB
    OOKPEAKTHRESHSTEP_15dB = _pyupm_sx1276.SX1276_OOKPEAKTHRESHSTEP_15dB
    OOKPEAKTHRESHSTEP_2dB = _pyupm_sx1276.SX1276_OOKPEAKTHRESHSTEP_2dB
    OOKPEAKTHRESHSTEP_3dB = _pyupm_sx1276.SX1276_OOKPEAKTHRESHSTEP_3dB
    OOKPEAKTHRESHSTEP_4dB = _pyupm_sx1276.SX1276_OOKPEAKTHRESHSTEP_4dB
    OOKPEAKTHRESHSTEP_5dB = _pyupm_sx1276.SX1276_OOKPEAKTHRESHSTEP_5dB
    OOKPEAKTHRESHSTEP_6dB = _pyupm_sx1276.SX1276_OOKPEAKTHRESHSTEP_6dB
    OOKTHRESHTYPE_FIXED = _pyupm_sx1276.SX1276_OOKTHRESHTYPE_FIXED
    OOKTHRESHTYPE_PEAK = _pyupm_sx1276.SX1276_OOKTHRESHTYPE_PEAK
    OOKTHRESHTYPE_AVERAGE = _pyupm_sx1276.SX1276_OOKTHRESHTYPE_AVERAGE
    OOKAVG_OokAvgThreshFilt0 = _pyupm_sx1276.SX1276_OOKAVG_OokAvgThreshFilt0
    OOKAVG_OokAvgThreshFilt1 = _pyupm_sx1276.SX1276_OOKAVG_OokAvgThreshFilt1
    _OOKAVG_OokAvgThreshFilt_MASK = _pyupm_sx1276.SX1276__OOKAVG_OokAvgThreshFilt_MASK
    _OOKAVG_OokAvgThreshFilt_SHIFT = _pyupm_sx1276.SX1276__OOKAVG_OokAvgThreshFilt_SHIFT
    OOKAVG_OokAvgOffset0 = _pyupm_sx1276.SX1276_OOKAVG_OokAvgOffset0
    OOKAVG_OokAvgOffset1 = _pyupm_sx1276.SX1276_OOKAVG_OokAvgOffset1
    _OOKAVG_OokAvgOffset_MASK = _pyupm_sx1276.SX1276__OOKAVG_OokAvgOffset_MASK
    _OOKAVG_OokAvgOffset_SHIFT = _pyupm_sx1276.SX1276__OOKAVG_OokAvgOffset_SHIFT
    OOKAVG_OokPeakThreshDec0 = _pyupm_sx1276.SX1276_OOKAVG_OokPeakThreshDec0
    OOKAVG_OokPeakThreshDec1 = _pyupm_sx1276.SX1276_OOKAVG_OokPeakThreshDec1
    OOKAVG_OokPeakThreshDec2 = _pyupm_sx1276.SX1276_OOKAVG_OokPeakThreshDec2
    _OOKAVG_OokPeakThreshDec_MASK = _pyupm_sx1276.SX1276__OOKAVG_OokPeakThreshDec_MASK
    _OOKAVG_OokPeakThreshDec_SHIFT = _pyupm_sx1276.SX1276__OOKAVG_OokPeakThreshDec_SHIFT
    OOKAVGTHRESHFILT_32 = _pyupm_sx1276.SX1276_OOKAVGTHRESHFILT_32
    OOKAVGTHRESHFILT_8 = _pyupm_sx1276.SX1276_OOKAVGTHRESHFILT_8
    OOKAVGTHRESHFILT_4 = _pyupm_sx1276.SX1276_OOKAVGTHRESHFILT_4
    OOKAVGTHRESHFILT_2 = _pyupm_sx1276.SX1276_OOKAVGTHRESHFILT_2
    OOKAVGOFFSET_0 = _pyupm_sx1276.SX1276_OOKAVGOFFSET_0
    OOKAVGOFFSET_2 = _pyupm_sx1276.SX1276_OOKAVGOFFSET_2
    OOKAVGOFFSET_4 = _pyupm_sx1276.SX1276_OOKAVGOFFSET_4
    OOKAVGOFFSET_6 = _pyupm_sx1276.SX1276_OOKAVGOFFSET_6
    OOKPEAKTHRESHDEC_1_1 = _pyupm_sx1276.SX1276_OOKPEAKTHRESHDEC_1_1
    OOKPEAKTHRESHDEC_1_2 = _pyupm_sx1276.SX1276_OOKPEAKTHRESHDEC_1_2
    OOKPEAKTHRESHDEC_1_4 = _pyupm_sx1276.SX1276_OOKPEAKTHRESHDEC_1_4
    OOKPEAKTHRESHDEC_1_8 = _pyupm_sx1276.SX1276_OOKPEAKTHRESHDEC_1_8
    OOKPEAKTHRESHDEC_2_1 = _pyupm_sx1276.SX1276_OOKPEAKTHRESHDEC_2_1
    OOKPEAKTHRESHDEC_4_1 = _pyupm_sx1276.SX1276_OOKPEAKTHRESHDEC_4_1
    OOKPEAKTHRESHDEC_8_1 = _pyupm_sx1276.SX1276_OOKPEAKTHRESHDEC_8_1
    OOKPEAKTHRESHDEC_16_1 = _pyupm_sx1276.SX1276_OOKPEAKTHRESHDEC_16_1
    MODEMSTAT_SignalDetected = _pyupm_sx1276.SX1276_MODEMSTAT_SignalDetected
    MODEMSTAT_SignalSynchronized = _pyupm_sx1276.SX1276_MODEMSTAT_SignalSynchronized
    MODEMSTAT_RxOngoing = _pyupm_sx1276.SX1276_MODEMSTAT_RxOngoing
    MODEMSTAT_HeaderInfoValid = _pyupm_sx1276.SX1276_MODEMSTAT_HeaderInfoValid
    MODEMSTAT_ModemClear = _pyupm_sx1276.SX1276_MODEMSTAT_ModemClear
    MODEMSTAT_RxCodingRate0 = _pyupm_sx1276.SX1276_MODEMSTAT_RxCodingRate0
    MODEMSTAT_RxCodingRate1 = _pyupm_sx1276.SX1276_MODEMSTAT_RxCodingRate1
    MODEMSTAT_RxCodingRate2 = _pyupm_sx1276.SX1276_MODEMSTAT_RxCodingRate2
    _MODEMSTAT_RxCodingRate_MASK = _pyupm_sx1276.SX1276__MODEMSTAT_RxCodingRate_MASK
    _MODEMSTAT_RxCodingRate_SHIFT = _pyupm_sx1276.SX1276__MODEMSTAT_RxCodingRate_SHIFT
    AFCFEI_AfcAutoClearOn = _pyupm_sx1276.SX1276_AFCFEI_AfcAutoClearOn
    AFCFEI_AfcClear = _pyupm_sx1276.SX1276_AFCFEI_AfcClear
    AFCFEI_AgcStart = _pyupm_sx1276.SX1276_AFCFEI_AgcStart
    HOPCHANNEL_FhssPresentChannel0 = _pyupm_sx1276.SX1276_HOPCHANNEL_FhssPresentChannel0
    HOPCHANNEL_FhssPresentChannel1 = _pyupm_sx1276.SX1276_HOPCHANNEL_FhssPresentChannel1
    HOPCHANNEL_FhssPresentChannel2 = _pyupm_sx1276.SX1276_HOPCHANNEL_FhssPresentChannel2
    HOPCHANNEL_FhssPresentChannel3 = _pyupm_sx1276.SX1276_HOPCHANNEL_FhssPresentChannel3
    HOPCHANNEL_FhssPresentChannel4 = _pyupm_sx1276.SX1276_HOPCHANNEL_FhssPresentChannel4
    HOPCHANNEL_FhssPresentChannel5 = _pyupm_sx1276.SX1276_HOPCHANNEL_FhssPresentChannel5
    _HOPCHANNEL_FhssPresentChannel_MASK = _pyupm_sx1276.SX1276__HOPCHANNEL_FhssPresentChannel_MASK
    _HOPCHANNEL_FhssPresentChannel_SHIFT = _pyupm_sx1276.SX1276__HOPCHANNEL_FhssPresentChannel_SHIFT
    HOPCHANNEL_CrcOnPayload = _pyupm_sx1276.SX1276_HOPCHANNEL_CrcOnPayload
    HOPCHANNEL_PllTimeout = _pyupm_sx1276.SX1276_HOPCHANNEL_PllTimeout
    MODEMCONFIG1_ImplicitHeaderModeOn = _pyupm_sx1276.SX1276_MODEMCONFIG1_ImplicitHeaderModeOn
    MODEMCONFIG1_CodingRate0 = _pyupm_sx1276.SX1276_MODEMCONFIG1_CodingRate0
    MODEMCONFIG1_CodingRate1 = _pyupm_sx1276.SX1276_MODEMCONFIG1_CodingRate1
    MODEMCONFIG1_CodingRate2 = _pyupm_sx1276.SX1276_MODEMCONFIG1_CodingRate2
    _MODEMCONFIG1_CodingRate_MASK = _pyupm_sx1276.SX1276__MODEMCONFIG1_CodingRate_MASK
    _MODEMCONFIG1_CodingRate_SHIFT = _pyupm_sx1276.SX1276__MODEMCONFIG1_CodingRate_SHIFT
    MODEMCONFIG1_Bw0 = _pyupm_sx1276.SX1276_MODEMCONFIG1_Bw0
    MODEMCONFIG1_Bw1 = _pyupm_sx1276.SX1276_MODEMCONFIG1_Bw1
    MODEMCONFIG1_Bw2 = _pyupm_sx1276.SX1276_MODEMCONFIG1_Bw2
    MODEMCONFIG1_Bw3 = _pyupm_sx1276.SX1276_MODEMCONFIG1_Bw3
    _MODEMCONFIG1_Bw_MASK = _pyupm_sx1276.SX1276__MODEMCONFIG1_Bw_MASK
    _MODEMCONFIG1_Bw_SHIFT = _pyupm_sx1276.SX1276__MODEMCONFIG1_Bw_SHIFT
    CODINGRATE_4_5 = _pyupm_sx1276.SX1276_CODINGRATE_4_5
    CODINGRATE_4_6 = _pyupm_sx1276.SX1276_CODINGRATE_4_6
    CODINGRATE_4_7 = _pyupm_sx1276.SX1276_CODINGRATE_4_7
    CODINGRATE_4_8 = _pyupm_sx1276.SX1276_CODINGRATE_4_8
    BW_7_8 = _pyupm_sx1276.SX1276_BW_7_8
    BW_10_4 = _pyupm_sx1276.SX1276_BW_10_4
    BW_15_6 = _pyupm_sx1276.SX1276_BW_15_6
    BW_20_8 = _pyupm_sx1276.SX1276_BW_20_8
    BW_31_25 = _pyupm_sx1276.SX1276_BW_31_25
    BW_41_7 = _pyupm_sx1276.SX1276_BW_41_7
    BW_62_5 = _pyupm_sx1276.SX1276_BW_62_5
    BW_125 = _pyupm_sx1276.SX1276_BW_125
    BW_250 = _pyupm_sx1276.SX1276_BW_250
    BW_500 = _pyupm_sx1276.SX1276_BW_500
    MODEMCONFIG2_SymbTimeoutMsb0 = _pyupm_sx1276.SX1276_MODEMCONFIG2_SymbTimeoutMsb0
    MODEMCONFIG2_SymbTimeoutMsb1 = _pyupm_sx1276.SX1276_MODEMCONFIG2_SymbTimeoutMsb1
    _MODEMCONFIG2_SymbTimeoutMsb_MASK = _pyupm_sx1276.SX1276__MODEMCONFIG2_SymbTimeoutMsb_MASK
    _MODEMCONFIG2_SymbTimeoutMsb_SHIFT = _pyupm_sx1276.SX1276__MODEMCONFIG2_SymbTimeoutMsb_SHIFT
    MODEMCONFIG2_RxPayloadCrcOn = _pyupm_sx1276.SX1276_MODEMCONFIG2_RxPayloadCrcOn
    MODEMCONFIG2_TxContinuousMode = _pyupm_sx1276.SX1276_MODEMCONFIG2_TxContinuousMode
    MODEMCONFIG2_SpreadingFactor0 = _pyupm_sx1276.SX1276_MODEMCONFIG2_SpreadingFactor0
    MODEMCONFIG2_SpreadingFactor1 = _pyupm_sx1276.SX1276_MODEMCONFIG2_SpreadingFactor1
    MODEMCONFIG2_SpreadingFactor2 = _pyupm_sx1276.SX1276_MODEMCONFIG2_SpreadingFactor2
    MODEMCONFIG2_SpreadingFactor3 = _pyupm_sx1276.SX1276_MODEMCONFIG2_SpreadingFactor3
    _MODEMCONFIG2_SpreadingFactor_MASK = _pyupm_sx1276.SX1276__MODEMCONFIG2_SpreadingFactor_MASK
    _MODEMCONFIG2_SpreadingFactor_SHIFT = _pyupm_sx1276.SX1276__MODEMCONFIG2_SpreadingFactor_SHIFT
    SPREADINGFACTOR_64 = _pyupm_sx1276.SX1276_SPREADINGFACTOR_64
    SPREADINGFACTOR_128 = _pyupm_sx1276.SX1276_SPREADINGFACTOR_128
    SPREADINGFACTOR_256 = _pyupm_sx1276.SX1276_SPREADINGFACTOR_256
    SPREADINGFACTOR_512 = _pyupm_sx1276.SX1276_SPREADINGFACTOR_512
    SPREADINGFACTOR_1024 = _pyupm_sx1276.SX1276_SPREADINGFACTOR_1024
    SPREADINGFACTOR_2048 = _pyupm_sx1276.SX1276_SPREADINGFACTOR_2048
    SPREADINGFACTOR_4096 = _pyupm_sx1276.SX1276_SPREADINGFACTOR_4096
    PREABLEDETECT_PreambleDetectorTol0 = _pyupm_sx1276.SX1276_PREABLEDETECT_PreambleDetectorTol0
    PREABLEDETECT_PreambleDetectorTol1 = _pyupm_sx1276.SX1276_PREABLEDETECT_PreambleDetectorTol1
    PREABLEDETECT_PreambleDetectorTol2 = _pyupm_sx1276.SX1276_PREABLEDETECT_PreambleDetectorTol2
    PREABLEDETECT_PreambleDetectorTol3 = _pyupm_sx1276.SX1276_PREABLEDETECT_PreambleDetectorTol3
    PREABLEDETECT_PreambleDetectorTol4 = _pyupm_sx1276.SX1276_PREABLEDETECT_PreambleDetectorTol4
    _PREABLEDETECT_PreambleDetectorTol4_MASK = _pyupm_sx1276.SX1276__PREABLEDETECT_PreambleDetectorTol4_MASK
    _PREABLEDETECT_PreambleDetectorTol4_SHIFT = _pyupm_sx1276.SX1276__PREABLEDETECT_PreambleDetectorTol4_SHIFT
    PREABLEDETECT_PreambleDetectorSize0 = _pyupm_sx1276.SX1276_PREABLEDETECT_PreambleDetectorSize0
    PREABLEDETECT_PreambleDetectorSize1 = _pyupm_sx1276.SX1276_PREABLEDETECT_PreambleDetectorSize1
    _PREABLEDETECT_PreambleDetectorSize_MASK = _pyupm_sx1276.SX1276__PREABLEDETECT_PreambleDetectorSize_MASK
    _PREABLEDETECT_PreambleDetectorSize_SHIFT = _pyupm_sx1276.SX1276__PREABLEDETECT_PreambleDetectorSize_SHIFT
    PREABLEDETECT_PreambleDetectorOn = _pyupm_sx1276.SX1276_PREABLEDETECT_PreambleDetectorOn
    PREAMBLEDETECTORSIZE_1 = _pyupm_sx1276.SX1276_PREAMBLEDETECTORSIZE_1
    PREAMBLEDETECTORSIZE_2 = _pyupm_sx1276.SX1276_PREAMBLEDETECTORSIZE_2
    PREAMBLEDETECTORSIZE_3 = _pyupm_sx1276.SX1276_PREAMBLEDETECTORSIZE_3
    OSC_ClkOut0 = _pyupm_sx1276.SX1276_OSC_ClkOut0
    OSC_ClkOut1 = _pyupm_sx1276.SX1276_OSC_ClkOut1
    OSC_ClkOut2 = _pyupm_sx1276.SX1276_OSC_ClkOut2
    _OSC_ClkOut_MASK = _pyupm_sx1276.SX1276__OSC_ClkOut_MASK
    _OSC_ClkOut_SHIFT = _pyupm_sx1276.SX1276__OSC_ClkOut_SHIFT
    OSC_RcCalStart = _pyupm_sx1276.SX1276_OSC_RcCalStart
    CLKOUT_1 = _pyupm_sx1276.SX1276_CLKOUT_1
    CLKOUT_2 = _pyupm_sx1276.SX1276_CLKOUT_2
    CLKOUT_4 = _pyupm_sx1276.SX1276_CLKOUT_4
    CLKOUT_8 = _pyupm_sx1276.SX1276_CLKOUT_8
    CLKOUT_16 = _pyupm_sx1276.SX1276_CLKOUT_16
    CLKOUT_32 = _pyupm_sx1276.SX1276_CLKOUT_32
    CLKOUT_RC = _pyupm_sx1276.SX1276_CLKOUT_RC
    CLKOUT_OFF = _pyupm_sx1276.SX1276_CLKOUT_OFF
    MODEMCONFIG3_AgcAutoOn = _pyupm_sx1276.SX1276_MODEMCONFIG3_AgcAutoOn
    MODEMCONFIG3_LowDataRateOptimize = _pyupm_sx1276.SX1276_MODEMCONFIG3_LowDataRateOptimize
    SYNCCONFIG_SyncSize0 = _pyupm_sx1276.SX1276_SYNCCONFIG_SyncSize0
    SYNCCONFIG_SyncSize1 = _pyupm_sx1276.SX1276_SYNCCONFIG_SyncSize1
    SYNCCONFIG_SyncSize2 = _pyupm_sx1276.SX1276_SYNCCONFIG_SyncSize2
    _SYNCCONFIG_SyncSize_MASK = _pyupm_sx1276.SX1276__SYNCCONFIG_SyncSize_MASK
    _SYNCCONFIG_SyncSize_SHIFT = _pyupm_sx1276.SX1276__SYNCCONFIG_SyncSize_SHIFT
    SYNCCONFIG_SyncOn = _pyupm_sx1276.SX1276_SYNCCONFIG_SyncOn
    SYNCCONFIG_PreamblePolarity = _pyupm_sx1276.SX1276_SYNCCONFIG_PreamblePolarity
    SYNCCONFIG_AutoRestartMode0 = _pyupm_sx1276.SX1276_SYNCCONFIG_AutoRestartMode0
    SYNCCONFIG_AutoRestartMode1 = _pyupm_sx1276.SX1276_SYNCCONFIG_AutoRestartMode1
    _SYNCCONFIG_AutoRestartMode_MASK = _pyupm_sx1276.SX1276__SYNCCONFIG_AutoRestartMode_MASK
    _SYNCCONFIG_AutoRestartMode_SHIFT = _pyupm_sx1276.SX1276__SYNCCONFIG_AutoRestartMode_SHIFT
    AUTORESTARTMODE_OFF = _pyupm_sx1276.SX1276_AUTORESTARTMODE_OFF
    AUTORESTARTMODE_ON_NOPLL = _pyupm_sx1276.SX1276_AUTORESTARTMODE_ON_NOPLL
    AUTORESTARTMODE_ON_PLL = _pyupm_sx1276.SX1276_AUTORESTARTMODE_ON_PLL
    FEIMSB_FreqError0 = _pyupm_sx1276.SX1276_FEIMSB_FreqError0
    FEIMSB_FreqError1 = _pyupm_sx1276.SX1276_FEIMSB_FreqError1
    FEIMSB_FreqError2 = _pyupm_sx1276.SX1276_FEIMSB_FreqError2
    FEIMSB_FreqError3 = _pyupm_sx1276.SX1276_FEIMSB_FreqError3
    _FEIMSB_FreqError_MASK = _pyupm_sx1276.SX1276__FEIMSB_FreqError_MASK
    _FEIMSB_FreqError_SHIFT = _pyupm_sx1276.SX1276__FEIMSB_FreqError_SHIFT
    PACKETCONFIG1_CrcWhiteningType = _pyupm_sx1276.SX1276_PACKETCONFIG1_CrcWhiteningType
    PACKETCONFIG1_AddressFiltering0 = _pyupm_sx1276.SX1276_PACKETCONFIG1_AddressFiltering0
    PACKETCONFIG1_AddressFiltering1 = _pyupm_sx1276.SX1276_PACKETCONFIG1_AddressFiltering1
    _PACKETCONFIG1_AddressFiltering_MASK = _pyupm_sx1276.SX1276__PACKETCONFIG1_AddressFiltering_MASK
    _PACKETCONFIG1_AddressFiltering_SHIFT = _pyupm_sx1276.SX1276__PACKETCONFIG1_AddressFiltering_SHIFT
    PACKETCONFIG1_CrcAutoClearOff = _pyupm_sx1276.SX1276_PACKETCONFIG1_CrcAutoClearOff
    PACKETCONFIG1_CrcOn = _pyupm_sx1276.SX1276_PACKETCONFIG1_CrcOn
    PACKETCONFIG1_DcFree0 = _pyupm_sx1276.SX1276_PACKETCONFIG1_DcFree0
    PACKETCONFIG1_DcFree1 = _pyupm_sx1276.SX1276_PACKETCONFIG1_DcFree1
    _PACKETCONFIG1_DcFree_MASK = _pyupm_sx1276.SX1276__PACKETCONFIG1_DcFree_MASK
    _PACKETCONFIG1_DcFree_SHIFT = _pyupm_sx1276.SX1276__PACKETCONFIG1_DcFree_SHIFT
    PACKETCONFIG1_PacketFormat = _pyupm_sx1276.SX1276_PACKETCONFIG1_PacketFormat
    ADDRESSFILTERING_NONE = _pyupm_sx1276.SX1276_ADDRESSFILTERING_NONE
    ADDRESSFILTERING_NODE = _pyupm_sx1276.SX1276_ADDRESSFILTERING_NODE
    ADDRESSFILTERING_NODE_BROADCAST = _pyupm_sx1276.SX1276_ADDRESSFILTERING_NODE_BROADCAST
    DCFREE_NONE = _pyupm_sx1276.SX1276_DCFREE_NONE
    DCFREE_MANCHESTER = _pyupm_sx1276.SX1276_DCFREE_MANCHESTER
    DCFREE_WHITENING = _pyupm_sx1276.SX1276_DCFREE_WHITENING
    PACKETCONFIG2_PayloadLengthMsb0 = _pyupm_sx1276.SX1276_PACKETCONFIG2_PayloadLengthMsb0
    PACKETCONFIG2_PayloadLengthMsb1 = _pyupm_sx1276.SX1276_PACKETCONFIG2_PayloadLengthMsb1
    PACKETCONFIG2_PayloadLengthMsb2 = _pyupm_sx1276.SX1276_PACKETCONFIG2_PayloadLengthMsb2
    _PACKETCONFIG2_PayloadLengthMsb_MASK = _pyupm_sx1276.SX1276__PACKETCONFIG2_PayloadLengthMsb_MASK
    _PACKETCONFIG2_PayloadLengthMsb_SHIFT = _pyupm_sx1276.SX1276__PACKETCONFIG2_PayloadLengthMsb_SHIFT
    PACKETCONFIG2_BeaconOn = _pyupm_sx1276.SX1276_PACKETCONFIG2_BeaconOn
    PACKETCONFIG2_IoHomeOn = _pyupm_sx1276.SX1276_PACKETCONFIG2_IoHomeOn
    PACKETCONFIG2_DataMode = _pyupm_sx1276.SX1276_PACKETCONFIG2_DataMode
    DETECTOPTIMIZE_DetectionOptimize0 = _pyupm_sx1276.SX1276_DETECTOPTIMIZE_DetectionOptimize0
    DETECTOPTIMIZE_DetectionOptimize1 = _pyupm_sx1276.SX1276_DETECTOPTIMIZE_DetectionOptimize1
    DETECTOPTIMIZE_DetectionOptimize2 = _pyupm_sx1276.SX1276_DETECTOPTIMIZE_DetectionOptimize2
    _DETECTOPTIMIZE_DetectionOptimize_MASK = _pyupm_sx1276.SX1276__DETECTOPTIMIZE_DetectionOptimize_MASK
    _DETECTOPTIMIZE_DetectionOptimize_SHIFT = _pyupm_sx1276.SX1276__DETECTOPTIMIZE_DetectionOptimize_SHIFT
    DETECTIONOPTIMIZE_SF7_SF12 = _pyupm_sx1276.SX1276_DETECTIONOPTIMIZE_SF7_SF12
    DETECTIONOPTIMIZE_SF6 = _pyupm_sx1276.SX1276_DETECTIONOPTIMIZE_SF6
    INVERTIQ_InvertIQTxOff = _pyupm_sx1276.SX1276_INVERTIQ_InvertIQTxOff
    INVERTIQ_InvertIQRx = _pyupm_sx1276.SX1276_INVERTIQ_InvertIQRx
    FIFOTHRESH_FifoThreshold0 = _pyupm_sx1276.SX1276_FIFOTHRESH_FifoThreshold0
    FIFOTHRESH_FifoThreshold1 = _pyupm_sx1276.SX1276_FIFOTHRESH_FifoThreshold1
    FIFOTHRESH_FifoThreshold2 = _pyupm_sx1276.SX1276_FIFOTHRESH_FifoThreshold2
    FIFOTHRESH_FifoThreshold3 = _pyupm_sx1276.SX1276_FIFOTHRESH_FifoThreshold3
    FIFOTHRESH_FifoThreshold4 = _pyupm_sx1276.SX1276_FIFOTHRESH_FifoThreshold4
    FIFOTHRESH_FifoThreshold5 = _pyupm_sx1276.SX1276_FIFOTHRESH_FifoThreshold5
    _FIFOTHRESH_FifoThreshold_MASK = _pyupm_sx1276.SX1276__FIFOTHRESH_FifoThreshold_MASK
    _FIFOTHRESH_FifoThreshold_SHIFT = _pyupm_sx1276.SX1276__FIFOTHRESH_FifoThreshold_SHIFT
    FIFOTHRESH_TxStartCondition = _pyupm_sx1276.SX1276_FIFOTHRESH_TxStartCondition
    SEQCONFIG1_FromTransit = _pyupm_sx1276.SX1276_SEQCONFIG1_FromTransit
    SEQCONFIG1_FromIdle = _pyupm_sx1276.SX1276_SEQCONFIG1_FromIdle
    SEQCONFIG1_LowPowerSelection = _pyupm_sx1276.SX1276_SEQCONFIG1_LowPowerSelection
    SEQCONFIG1_FromStart0 = _pyupm_sx1276.SX1276_SEQCONFIG1_FromStart0
    SEQCONFIG1_FromStart1 = _pyupm_sx1276.SX1276_SEQCONFIG1_FromStart1
    _SEQCONFIG1_FromStart_MASK = _pyupm_sx1276.SX1276__SEQCONFIG1_FromStart_MASK
    _SEQCONFIG1_FromStart_SHIFT = _pyupm_sx1276.SX1276__SEQCONFIG1_FromStart_SHIFT
    SEQCONFIG1_IdleMode = _pyupm_sx1276.SX1276_SEQCONFIG1_IdleMode
    SEQCONFIG1_SequencerStop = _pyupm_sx1276.SX1276_SEQCONFIG1_SequencerStop
    SEQCONFIG1_SequencerStart = _pyupm_sx1276.SX1276_SEQCONFIG1_SequencerStart
    FROMSTART_ToLowPowerSelection = _pyupm_sx1276.SX1276_FROMSTART_ToLowPowerSelection
    FROMSTART_ToReceiveState = _pyupm_sx1276.SX1276_FROMSTART_ToReceiveState
    FROMSTART_ToTransmitState = _pyupm_sx1276.SX1276_FROMSTART_ToTransmitState
    FROMSTART_ToTransmitStateOnFifoLevel = _pyupm_sx1276.SX1276_FROMSTART_ToTransmitStateOnFifoLevel
    SEQCONFIG2_FromPacketReceived0 = _pyupm_sx1276.SX1276_SEQCONFIG2_FromPacketReceived0
    SEQCONFIG2_FromPacketReceived1 = _pyupm_sx1276.SX1276_SEQCONFIG2_FromPacketReceived1
    SEQCONFIG2_FromPacketReceived2 = _pyupm_sx1276.SX1276_SEQCONFIG2_FromPacketReceived2
    _SEQCONFIG2_FromPacketReceived_MASK = _pyupm_sx1276.SX1276__SEQCONFIG2_FromPacketReceived_MASK
    _SEQCONFIG2_FromPacketReceived_SHIFT = _pyupm_sx1276.SX1276__SEQCONFIG2_FromPacketReceived_SHIFT
    SEQCONFIG2_FromRxTimeout0 = _pyupm_sx1276.SX1276_SEQCONFIG2_FromRxTimeout0
    SEQCONFIG2_FromRxTimeout1 = _pyupm_sx1276.SX1276_SEQCONFIG2_FromRxTimeout1
    _SEQCONFIG2_FromRxTimeout_MASK = _pyupm_sx1276.SX1276__SEQCONFIG2_FromRxTimeout_MASK
    _SEQCONFIG2_FromRxTimeout_SHIFT = _pyupm_sx1276.SX1276__SEQCONFIG2_FromRxTimeout_SHIFT
    SEQCONFIG2_FromReceive0 = _pyupm_sx1276.SX1276_SEQCONFIG2_FromReceive0
    SEQCONFIG2_FromReceive1 = _pyupm_sx1276.SX1276_SEQCONFIG2_FromReceive1
    SEQCONFIG2_FromReceive2 = _pyupm_sx1276.SX1276_SEQCONFIG2_FromReceive2
    _SEQCONFIG2_FromReceive_MASK = _pyupm_sx1276.SX1276__SEQCONFIG2_FromReceive_MASK
    _SEQCONFIG2_FromReceive_SHIFT = _pyupm_sx1276.SX1276__SEQCONFIG2_FromReceive_SHIFT
    FROMPACKETRECEIVED_ToSequencerOff = _pyupm_sx1276.SX1276_FROMPACKETRECEIVED_ToSequencerOff
    FROMPACKETRECEIVED_ToTransmitStateOnFifoEmpty = _pyupm_sx1276.SX1276_FROMPACKETRECEIVED_ToTransmitStateOnFifoEmpty
    FROMPACKETRECEIVED_ToLowPowerSelection = _pyupm_sx1276.SX1276_FROMPACKETRECEIVED_ToLowPowerSelection
    FROMPACKETRECEIVED_ToReceiveViaFS = _pyupm_sx1276.SX1276_FROMPACKETRECEIVED_ToReceiveViaFS
    FROMPACKETRECEIVED_ToReceive = _pyupm_sx1276.SX1276_FROMPACKETRECEIVED_ToReceive
    FROMRXTIMEOUT_ToReceiveViaReceiveStart = _pyupm_sx1276.SX1276_FROMRXTIMEOUT_ToReceiveViaReceiveStart
    FROMRXTIMEOUT_ToTransmitState = _pyupm_sx1276.SX1276_FROMRXTIMEOUT_ToTransmitState
    FROMRXTIMEOUT_ToLowPowerSelection = _pyupm_sx1276.SX1276_FROMRXTIMEOUT_ToLowPowerSelection
    FROMRXTIMEOUT_ToSequencerOffState = _pyupm_sx1276.SX1276_FROMRXTIMEOUT_ToSequencerOffState
    FROMRECEIVE_ToPcketReceived = _pyupm_sx1276.SX1276_FROMRECEIVE_ToPcketReceived
    FROMRECEIVE_ToLowPowerSelection = _pyupm_sx1276.SX1276_FROMRECEIVE_ToLowPowerSelection
    FROMRECEIVE_ToPacketReceived = _pyupm_sx1276.SX1276_FROMRECEIVE_ToPacketReceived
    FROMRECEIVE_ToSequencerOffOnRSSI = _pyupm_sx1276.SX1276_FROMRECEIVE_ToSequencerOffOnRSSI
    FROMRECEIVE_ToSequencerOffOnSync = _pyupm_sx1276.SX1276_FROMRECEIVE_ToSequencerOffOnSync
    FROMRECEIVE_ToSequencerOffOnPreambleDetect = _pyupm_sx1276.SX1276_FROMRECEIVE_ToSequencerOffOnPreambleDetect
    TIMERRESOL_Timer2Resolution0 = _pyupm_sx1276.SX1276_TIMERRESOL_Timer2Resolution0
    TIMERRESOL_Timer2Resolution1 = _pyupm_sx1276.SX1276_TIMERRESOL_Timer2Resolution1
    _TIMERRESOL_Timer2Resolution_MASK = _pyupm_sx1276.SX1276__TIMERRESOL_Timer2Resolution_MASK
    _TIMERRESOL_Timer2Resolution_SHIFT = _pyupm_sx1276.SX1276__TIMERRESOL_Timer2Resolution_SHIFT
    TIMERRESOL_Timer1Resolution0 = _pyupm_sx1276.SX1276_TIMERRESOL_Timer1Resolution0
    TIMERRESOL_Timer1Resolution1 = _pyupm_sx1276.SX1276_TIMERRESOL_Timer1Resolution1
    _TIMERRESOL_Timer1Resolution_MASK = _pyupm_sx1276.SX1276__TIMERRESOL_Timer1Resolution_MASK
    _TIMERRESOL_Timer1Resolution_SHIFT = _pyupm_sx1276.SX1276__TIMERRESOL_Timer1Resolution_SHIFT
    TIMERRESOLUTION_DISABLED = _pyupm_sx1276.SX1276_TIMERRESOLUTION_DISABLED
    TIMERRESOLUTION_64us = _pyupm_sx1276.SX1276_TIMERRESOLUTION_64us
    TIMERRESOLUTION_4_1ms = _pyupm_sx1276.SX1276_TIMERRESOLUTION_4_1ms
    TIMERRESOLUTION_262ms = _pyupm_sx1276.SX1276_TIMERRESOLUTION_262ms
    IMAGECAL_TempMonitorOff = _pyupm_sx1276.SX1276_IMAGECAL_TempMonitorOff
    IMAGECAL_TempThreshold0 = _pyupm_sx1276.SX1276_IMAGECAL_TempThreshold0
    IMAGECAL_TempThreshold1 = _pyupm_sx1276.SX1276_IMAGECAL_TempThreshold1
    _IMAGECAL_TempThreshold_MASK = _pyupm_sx1276.SX1276__IMAGECAL_TempThreshold_MASK
    _IMAGECAL_TempThreshold_SHIFT = _pyupm_sx1276.SX1276__IMAGECAL_TempThreshold_SHIFT
    IMAGECAL_TenpChange = _pyupm_sx1276.SX1276_IMAGECAL_TenpChange
    IMAGECAL_ImageCalRunning = _pyupm_sx1276.SX1276_IMAGECAL_ImageCalRunning
    IMAGECAL_ImageCalStart = _pyupm_sx1276.SX1276_IMAGECAL_ImageCalStart
    IMAGECAL_AutoImageCalOn = _pyupm_sx1276.SX1276_IMAGECAL_AutoImageCalOn
    TEMPTHRESHOLD_5C = _pyupm_sx1276.SX1276_TEMPTHRESHOLD_5C
    TEMPTHRESHOLD_10C = _pyupm_sx1276.SX1276_TEMPTHRESHOLD_10C
    TEMPTHRESHOLD_15C = _pyupm_sx1276.SX1276_TEMPTHRESHOLD_15C
    TEMPTHRESHOLD_20C = _pyupm_sx1276.SX1276_TEMPTHRESHOLD_20C
    LOWBAT_LowBatTrim0 = _pyupm_sx1276.SX1276_LOWBAT_LowBatTrim0
    LOWBAT_LowBatTrim1 = _pyupm_sx1276.SX1276_LOWBAT_LowBatTrim1
    LOWBAT_LowBatTrim2 = _pyupm_sx1276.SX1276_LOWBAT_LowBatTrim2
    _LOWBAT_LowBatTrim_MASK = _pyupm_sx1276.SX1276__LOWBAT_LowBatTrim_MASK
    _LOWBAT_LowBatTrim_SHIFT = _pyupm_sx1276.SX1276__LOWBAT_LowBatTrim_SHIFT
    LOWBAT_LowBatOn = _pyupm_sx1276.SX1276_LOWBAT_LowBatOn
    LOWBATTRIM_1_695 = _pyupm_sx1276.SX1276_LOWBATTRIM_1_695
    LOWBATTRIM_1_764 = _pyupm_sx1276.SX1276_LOWBATTRIM_1_764
    LOWBATTRIM_1_835 = _pyupm_sx1276.SX1276_LOWBATTRIM_1_835
    LOWBATTRIM_1_905 = _pyupm_sx1276.SX1276_LOWBATTRIM_1_905
    LOWBATTRIM_1_976 = _pyupm_sx1276.SX1276_LOWBATTRIM_1_976
    LOWBATTRIM_2_045 = _pyupm_sx1276.SX1276_LOWBATTRIM_2_045
    LOWBATTRIM_2_116 = _pyupm_sx1276.SX1276_LOWBATTRIM_2_116
    LOWBATTRIM_2_185 = _pyupm_sx1276.SX1276_LOWBATTRIM_2_185
    IRQFLAGS1_SyncAddressMatch = _pyupm_sx1276.SX1276_IRQFLAGS1_SyncAddressMatch
    IRQFLAGS1_PreambleDetect = _pyupm_sx1276.SX1276_IRQFLAGS1_PreambleDetect
    IRQFLAGS1_Timeout = _pyupm_sx1276.SX1276_IRQFLAGS1_Timeout
    IRQFLAGS1_Rssi = _pyupm_sx1276.SX1276_IRQFLAGS1_Rssi
    IRQFLAGS1_PllLock = _pyupm_sx1276.SX1276_IRQFLAGS1_PllLock
    IRQFLAGS1_TxReady = _pyupm_sx1276.SX1276_IRQFLAGS1_TxReady
    IRQFLAGS1_RxReady = _pyupm_sx1276.SX1276_IRQFLAGS1_RxReady
    IRQFLAGS1_ModeReady = _pyupm_sx1276.SX1276_IRQFLAGS1_ModeReady
    IRQFLAGS2_LowBat = _pyupm_sx1276.SX1276_IRQFLAGS2_LowBat
    IRQFLAGS2_CrcOk = _pyupm_sx1276.SX1276_IRQFLAGS2_CrcOk
    IRQFLAGS2_PayloadReady = _pyupm_sx1276.SX1276_IRQFLAGS2_PayloadReady
    IRQFLAGS2_PacketSent = _pyupm_sx1276.SX1276_IRQFLAGS2_PacketSent
    IRQFLAGS2_FifoOverrun = _pyupm_sx1276.SX1276_IRQFLAGS2_FifoOverrun
    IRQFLAGS2_FifoLevel = _pyupm_sx1276.SX1276_IRQFLAGS2_FifoLevel
    IRQFLAGS2_FifoEmpty = _pyupm_sx1276.SX1276_IRQFLAGS2_FifoEmpty
    IRQFLAGS2_FifoFull = _pyupm_sx1276.SX1276_IRQFLAGS2_FifoFull
    DOIMAPPING1_Dio3Mapping0 = _pyupm_sx1276.SX1276_DOIMAPPING1_Dio3Mapping0
    DOIMAPPING1_Dio3Mapping1 = _pyupm_sx1276.SX1276_DOIMAPPING1_Dio3Mapping1
    DOIMAPPING1_Dio3Mapping_MASK = _pyupm_sx1276.SX1276_DOIMAPPING1_Dio3Mapping_MASK
    DOIMAPPING1_Dio3Mapping_SHIFT = _pyupm_sx1276.SX1276_DOIMAPPING1_Dio3Mapping_SHIFT
    DOIMAPPING1_Dio2Mapping0 = _pyupm_sx1276.SX1276_DOIMAPPING1_Dio2Mapping0
    DOIMAPPING1_Dio2Mapping1 = _pyupm_sx1276.SX1276_DOIMAPPING1_Dio2Mapping1
    DOIMAPPING1_Dio2Mapping_MASK = _pyupm_sx1276.SX1276_DOIMAPPING1_Dio2Mapping_MASK
    DOIMAPPING1_Dio2Mapping_SHIFT = _pyupm_sx1276.SX1276_DOIMAPPING1_Dio2Mapping_SHIFT
    DOIMAPPING1_Dio1Mapping0 = _pyupm_sx1276.SX1276_DOIMAPPING1_Dio1Mapping0
    DOIMAPPING1_Dio1Mapping1 = _pyupm_sx1276.SX1276_DOIMAPPING1_Dio1Mapping1
    DOIMAPPING1_Dio1Mapping_MASK = _pyupm_sx1276.SX1276_DOIMAPPING1_Dio1Mapping_MASK
    DOIMAPPING1_Dio1Mapping_SHIFT = _pyupm_sx1276.SX1276_DOIMAPPING1_Dio1Mapping_SHIFT
    DOIMAPPING1_Dio0Mapping0 = _pyupm_sx1276.SX1276_DOIMAPPING1_Dio0Mapping0
    DOIMAPPING1_Dio0Mapping1 = _pyupm_sx1276.SX1276_DOIMAPPING1_Dio0Mapping1
    DOIMAPPING1_Dio0Mapping_MASK = _pyupm_sx1276.SX1276_DOIMAPPING1_Dio0Mapping_MASK
    DOIMAPPING1_Dio0Mapping_SHIFT = _pyupm_sx1276.SX1276_DOIMAPPING1_Dio0Mapping_SHIFT
    DOIMAPPING2_MapPreambleDetect = _pyupm_sx1276.SX1276_DOIMAPPING2_MapPreambleDetect
    DOIMAPPING2_Dio5Mapping0 = _pyupm_sx1276.SX1276_DOIMAPPING2_Dio5Mapping0
    DOIMAPPING2_Dio5Mapping1 = _pyupm_sx1276.SX1276_DOIMAPPING2_Dio5Mapping1
    DOIMAPPING2_Dio5Mapping_MASK = _pyupm_sx1276.SX1276_DOIMAPPING2_Dio5Mapping_MASK
    DOIMAPPING2_Dio5Mapping_SHIFT = _pyupm_sx1276.SX1276_DOIMAPPING2_Dio5Mapping_SHIFT
    DOIMAPPING2_Dio4Mapping0 = _pyupm_sx1276.SX1276_DOIMAPPING2_Dio4Mapping0
    DOIMAPPING2_Dio4Mapping1 = _pyupm_sx1276.SX1276_DOIMAPPING2_Dio4Mapping1
    DOIMAPPING2_Dio4Mapping_MASK = _pyupm_sx1276.SX1276_DOIMAPPING2_Dio4Mapping_MASK
    DOIMAPPING2_Dio4Mapping_SHIFT = _pyupm_sx1276.SX1276_DOIMAPPING2_Dio4Mapping_SHIFT
    DIOMAPPING_00 = _pyupm_sx1276.SX1276_DIOMAPPING_00
    DIOMAPPING_01 = _pyupm_sx1276.SX1276_DIOMAPPING_01
    DIOMAPPING_10 = _pyupm_sx1276.SX1276_DIOMAPPING_10
    DIOMAPPING_11 = _pyupm_sx1276.SX1276_DIOMAPPING_11
    PLLHOP_FastHopOn = _pyupm_sx1276.SX1276_PLLHOP_FastHopOn
    TCXO_TcxoOn = _pyupm_sx1276.SX1276_TCXO_TcxoOn
    PADAC_PaDac0 = _pyupm_sx1276.SX1276_PADAC_PaDac0
    PADAC_PaDac1 = _pyupm_sx1276.SX1276_PADAC_PaDac1
    PADAC_PaDac2 = _pyupm_sx1276.SX1276_PADAC_PaDac2
    _PADAC_PaDac_MASK = _pyupm_sx1276.SX1276__PADAC_PaDac_MASK
    _PADAC_PaDac_SHIFT = _pyupm_sx1276.SX1276__PADAC_PaDac_SHIFT
    PADAC_DEFAULT = _pyupm_sx1276.SX1276_PADAC_DEFAULT
    PADAC_BOOST = _pyupm_sx1276.SX1276_PADAC_BOOST
    BITRATEFRAC_BitRateFrac0 = _pyupm_sx1276.SX1276_BITRATEFRAC_BitRateFrac0
    BITRATEFRAC_BitRateFrac1 = _pyupm_sx1276.SX1276_BITRATEFRAC_BitRateFrac1
    BITRATEFRAC_BitRateFrac2 = _pyupm_sx1276.SX1276_BITRATEFRAC_BitRateFrac2
    BITRATEFRAC_BitRateFrac3 = _pyupm_sx1276.SX1276_BITRATEFRAC_BitRateFrac3
    _BITRATEFRAC_BitRateFrac_MASK = _pyupm_sx1276.SX1276__BITRATEFRAC_BitRateFrac_MASK
    _BITRATEFRAC_BitRateFrac_SHIFT = _pyupm_sx1276.SX1276__BITRATEFRAC_BitRateFrac_SHIFT
    AGCREF_AgcReferenceLevel0 = _pyupm_sx1276.SX1276_AGCREF_AgcReferenceLevel0
    AGCREF_AgcReferenceLevel1 = _pyupm_sx1276.SX1276_AGCREF_AgcReferenceLevel1
    AGCREF_AgcReferenceLevel2 = _pyupm_sx1276.SX1276_AGCREF_AgcReferenceLevel2
    AGCREF_AgcReferenceLevel3 = _pyupm_sx1276.SX1276_AGCREF_AgcReferenceLevel3
    AGCREF_AgcReferenceLevel4 = _pyupm_sx1276.SX1276_AGCREF_AgcReferenceLevel4
    AGCREF_AgcReferenceLevel5 = _pyupm_sx1276.SX1276_AGCREF_AgcReferenceLevel5
    _AGCREF_AgcReferenceLevel_MASK = _pyupm_sx1276.SX1276__AGCREF_AgcReferenceLevel_MASK
    _AGCREF_AgcReferenceLevel_SHIFT = _pyupm_sx1276.SX1276__AGCREF_AgcReferenceLevel_SHIFT
    AGCTHRESH1_AcgStep10 = _pyupm_sx1276.SX1276_AGCTHRESH1_AcgStep10
    AGCTHRESH1_AcgStep11 = _pyupm_sx1276.SX1276_AGCTHRESH1_AcgStep11
    AGCTHRESH1_AcgStep12 = _pyupm_sx1276.SX1276_AGCTHRESH1_AcgStep12
    AGCTHRESH1_AcgStep13 = _pyupm_sx1276.SX1276_AGCTHRESH1_AcgStep13
    _AGCTHRESH1_AcgStep1_MASK = _pyupm_sx1276.SX1276__AGCTHRESH1_AcgStep1_MASK
    _AGCTHRESH1_AcgStep1_SHIFT = _pyupm_sx1276.SX1276__AGCTHRESH1_AcgStep1_SHIFT
    AGCTHRESH2_AcgStep30 = _pyupm_sx1276.SX1276_AGCTHRESH2_AcgStep30
    AGCTHRESH2_AcgStep31 = _pyupm_sx1276.SX1276_AGCTHRESH2_AcgStep31
    AGCTHRESH2_AcgStep32 = _pyupm_sx1276.SX1276_AGCTHRESH2_AcgStep32
    AGCTHRESH2_AcgStep33 = _pyupm_sx1276.SX1276_AGCTHRESH2_AcgStep33
    _AGCTHRESH2_AcgStep3_MASK = _pyupm_sx1276.SX1276__AGCTHRESH2_AcgStep3_MASK
    _AGCTHRESH2_AcgStep3_SHIFT = _pyupm_sx1276.SX1276__AGCTHRESH2_AcgStep3_SHIFT
    AGCTHRESH2_AcgStep20 = _pyupm_sx1276.SX1276_AGCTHRESH2_AcgStep20
    AGCTHRESH2_AcgStep21 = _pyupm_sx1276.SX1276_AGCTHRESH2_AcgStep21
    AGCTHRESH2_AcgStep22 = _pyupm_sx1276.SX1276_AGCTHRESH2_AcgStep22
    AGCTHRESH2_AcgStep23 = _pyupm_sx1276.SX1276_AGCTHRESH2_AcgStep23
    _AGCTHRESH2_AcgStep2_MASK = _pyupm_sx1276.SX1276__AGCTHRESH2_AcgStep2_MASK
    _AGCTHRESH2_AcgStep2_SHIFT = _pyupm_sx1276.SX1276__AGCTHRESH2_AcgStep2_SHIFT
    LOR_DetectionThreshold_SF7_SF12 = _pyupm_sx1276.SX1276_LOR_DetectionThreshold_SF7_SF12
    LOR_DetectionThreshold_SF6 = _pyupm_sx1276.SX1276_LOR_DetectionThreshold_SF6
    AGCTHRESH3_AcgStep50 = _pyupm_sx1276.SX1276_AGCTHRESH3_AcgStep50
    AGCTHRESH3_AcgStep51 = _pyupm_sx1276.SX1276_AGCTHRESH3_AcgStep51
    AGCTHRESH3_AcgStep52 = _pyupm_sx1276.SX1276_AGCTHRESH3_AcgStep52
    AGCTHRESH3_AcgStep53 = _pyupm_sx1276.SX1276_AGCTHRESH3_AcgStep53
    _AGCTHRESH3_AcgStep5_MASK = _pyupm_sx1276.SX1276__AGCTHRESH3_AcgStep5_MASK
    _AGCTHRESH3_AcgStep5_SHIFT = _pyupm_sx1276.SX1276__AGCTHRESH3_AcgStep5_SHIFT
    AGCTHRESH3_AcgStep40 = _pyupm_sx1276.SX1276_AGCTHRESH3_AcgStep40
    AGCTHRESH3_AcgStep41 = _pyupm_sx1276.SX1276_AGCTHRESH3_AcgStep41
    AGCTHRESH3_AcgStep42 = _pyupm_sx1276.SX1276_AGCTHRESH3_AcgStep42
    AGCTHRESH3_AcgStep43 = _pyupm_sx1276.SX1276_AGCTHRESH3_AcgStep43
    _AGCTHRESH3_AcgStep4_MASK = _pyupm_sx1276.SX1276__AGCTHRESH3_AcgStep4_MASK
    _AGCTHRESH3_AcgStep4_SHIFT = _pyupm_sx1276.SX1276__AGCTHRESH3_AcgStep4_SHIFT
    def __init__(self, *args): 
        """
        __init__(upm::SX1276 self, uint8_t chipRev=chipRevision, int bus=1, int cs=10, int resetPin=14, int dio0=2, 
            int dio1=3, int dio2=4, int dio3=5, int dio4=17, int dio5=9) -> SX1276

        Parameters:
            chipRev: uint8_t
            bus: int
            cs: int
            resetPin: int
            dio0: int
            dio1: int
            dio2: int
            dio3: int
            dio4: int
            dio5: int

        __init__(upm::SX1276 self, uint8_t chipRev=chipRevision, int bus=1, int cs=10, int resetPin=14, int dio0=2, 
            int dio1=3, int dio2=4, int dio3=5, int dio4=17) -> SX1276

        Parameters:
            chipRev: uint8_t
            bus: int
            cs: int
            resetPin: int
            dio0: int
            dio1: int
            dio2: int
            dio3: int
            dio4: int

        __init__(upm::SX1276 self, uint8_t chipRev=chipRevision, int bus=1, int cs=10, int resetPin=14, int dio0=2, 
            int dio1=3, int dio2=4, int dio3=5) -> SX1276

        Parameters:
            chipRev: uint8_t
            bus: int
            cs: int
            resetPin: int
            dio0: int
            dio1: int
            dio2: int
            dio3: int

        __init__(upm::SX1276 self, uint8_t chipRev=chipRevision, int bus=1, int cs=10, int resetPin=14, int dio0=2, 
            int dio1=3, int dio2=4) -> SX1276

        Parameters:
            chipRev: uint8_t
            bus: int
            cs: int
            resetPin: int
            dio0: int
            dio1: int
            dio2: int

        __init__(upm::SX1276 self, uint8_t chipRev=chipRevision, int bus=1, int cs=10, int resetPin=14, int dio0=2, 
            int dio1=3) -> SX1276

        Parameters:
            chipRev: uint8_t
            bus: int
            cs: int
            resetPin: int
            dio0: int
            dio1: int

        __init__(upm::SX1276 self, uint8_t chipRev=chipRevision, int bus=1, int cs=10, int resetPin=14, int dio0=2) -> SX1276

        Parameters:
            chipRev: uint8_t
            bus: int
            cs: int
            resetPin: int
            dio0: int

        __init__(upm::SX1276 self, uint8_t chipRev=chipRevision, int bus=1, int cs=10, int resetPin=14) -> SX1276

        Parameters:
            chipRev: uint8_t
            bus: int
            cs: int
            resetPin: int

        __init__(upm::SX1276 self, uint8_t chipRev=chipRevision, int bus=1, int cs=10) -> SX1276

        Parameters:
            chipRev: uint8_t
            bus: int
            cs: int

        __init__(upm::SX1276 self, uint8_t chipRev=chipRevision, int bus=1) -> SX1276

        Parameters:
            chipRev: uint8_t
            bus: int

        __init__(upm::SX1276 self, uint8_t chipRev=chipRevision) -> SX1276

        Parameters:
            chipRev: uint8_t

        __init__(upm::SX1276 self) -> SX1276

        SX1276(uint8_t
        chipRev=chipRevision, int bus=1, int cs=10, int resetPin=14, int
        dio0=2, int dio1=3, int dio2=4, int dio3=5, int dio4=17, int dio5=9)

        SX1276 constructor

        Since this is a shield, you will not have much choice as to what pins
        are used.

        Parameters:
        -----------

        chipRev:  chip revision, default is 0x12

        bus:  spi bus to use

        cs:  GPIO pin to use as SPI Chip Select

        reset:  GPIO pin to use as reset (A0=GPIO14)

        dio0:  GPIO pin to use as reset DIO0 intr

        dio1:  GPIO pin to use as reset DIO1 intr

        dio2:  GPIO pin to use as reset DIO2 intr

        dio3:  GPIO pin to use as reset DIO3 intr

        dio4:  GPIO pin to use as reset DIO4 intr

        dio5:  GPIO pin to use as reset DIO5 intr 
        """
        this = _pyupm_sx1276.new_SX1276(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_sx1276.delete_SX1276
    __del__ = lambda self : None;
    def readReg(self, *args):
        """
        readReg(SX1276 self, uint8_t reg) -> uint8_t

        Parameters:
            reg: uint8_t


        uint8_t readReg(uint8_t
        reg)

        read a register

        Parameters:
        -----------

        reg:  the register to read

        the value of the register 
        """
        return _pyupm_sx1276.SX1276_readReg(self, *args)

    def writeReg(self, *args):
        """
        writeReg(SX1276 self, uint8_t reg, uint8_t val) -> bool

        Parameters:
            reg: uint8_t
            val: uint8_t


        bool writeReg(uint8_t
        reg, uint8_t val)

        write to a register

        Parameters:
        -----------

        reg:  the register to write to

        val:  the value to write

        true if successful, false otherwise 
        """
        return _pyupm_sx1276.SX1276_writeReg(self, *args)

    def getChipVersion(self):
        """
        getChipVersion(SX1276 self) -> uint8_t

        Parameters:
            self: upm::SX1276 *


        uint8_t
        getChipVersion()

        return the chip revision

        the chip revision (usually 0x12) 
        """
        return _pyupm_sx1276.SX1276_getChipVersion(self)

    def reset(self):
        """
        reset(SX1276 self)

        Parameters:
            self: upm::SX1276 *


        void reset()

        reset the modem 
        """
        return _pyupm_sx1276.SX1276_reset(self)

    def readFifo(self, *args):
        """
        readFifo(SX1276 self, uint8_t * buffer, int len)

        Parameters:
            buffer: uint8_t *
            len: int


        void readFifo(uint8_t
        *buffer, int len)

        read the FIFO into a buffer

        Parameters:
        -----------

        buffer:  The buffer to read data into

        len:  The length of the buffer 
        """
        return _pyupm_sx1276.SX1276_readFifo(self, *args)

    def writeFifo(self, *args):
        """
        writeFifo(SX1276 self, uint8_t * buffer, int len)

        Parameters:
            buffer: uint8_t *
            len: int


        void writeFifo(uint8_t
        *buffer, int len)

        write a buffer into the FIFO

        Parameters:
        -----------

        buffer:  The buffer containing the data to write

        len:  The length of the buffer 
        """
        return _pyupm_sx1276.SX1276_writeFifo(self, *args)

    def setChannel(self, *args):
        """
        setChannel(SX1276 self, uint32_t freq)

        Parameters:
            freq: uint32_t


        void
        setChannel(uint32_t freq)

        Set the frequency to transmit and receive on

        Parameters:
        -----------

        freq:  The frequency to set 
        """
        return _pyupm_sx1276.SX1276_setChannel(self, *args)

    def setOpMode(self, *args):
        """
        setOpMode(SX1276 self, upm::SX1276::MODE_T opMode)

        Parameters:
            opMode: enum upm::SX1276::MODE_T


        void setOpMode(MODE_T
        opMode)

        Set the operating mode

        Parameters:
        -----------

        opMode:  One of the MODE_T values 
        """
        return _pyupm_sx1276.SX1276_setOpMode(self, *args)

    def setModem(self, *args):
        """
        setModem(SX1276 self, upm::SX1276::RADIO_MODEM_T modem)

        Parameters:
            modem: enum upm::SX1276::RADIO_MODEM_T


        void
        setModem(RADIO_MODEM_T modem)

        Set the modem to access. This can be either the LORA or KSK/OOK modem.

        Parameters:
        -----------

        modem:  One of the MODEM_T values 
        """
        return _pyupm_sx1276.SX1276_setModem(self, *args)

    def setSleep(self):
        """
        setSleep(SX1276 self)

        Parameters:
            self: upm::SX1276 *


        void setSleep()

        Place the SX1276 into sleep mode 
        """
        return _pyupm_sx1276.SX1276_setSleep(self)

    def setStandby(self):
        """
        setStandby(SX1276 self)

        Parameters:
            self: upm::SX1276 *


        void setStandby()

        Place the SX1276 into standby mode 
        """
        return _pyupm_sx1276.SX1276_setStandby(self)

    def getRSSI(self, *args):
        """
        getRSSI(SX1276 self, upm::SX1276::RADIO_MODEM_T modem) -> int16_t

        Parameters:
            modem: enum upm::SX1276::RADIO_MODEM_T


        int16_t
        getRSSI(RADIO_MODEM_T modem)

        Return the current Received Signal Strength Indicator for the given
        modem

        Parameters:
        -----------

        modem:  One of the MODEM_T values 
        """
        return _pyupm_sx1276.SX1276_getRSSI(self, *args)

    def isChannelFree(self, *args):
        """
        isChannelFree(SX1276 self, upm::SX1276::RADIO_MODEM_T modem, uint32_t freq, int16_t rssiThresh) -> bool

        Parameters:
            modem: enum upm::SX1276::RADIO_MODEM_T
            freq: uint32_t
            rssiThresh: int16_t


        bool
        isChannelFree(RADIO_MODEM_T modem, uint32_t freq, int16_t rssiThresh)

        Check to see if a given channel is free by comparing the RSSI to the
        supplied threshold.

        Parameters:
        -----------

        modem:  One of the MODEM_T values

        freq:  The channel to check

        rssiThreshold:  The RSSI threshold, over which the channel os
        considerd in use. 
        """
        return _pyupm_sx1276.SX1276_isChannelFree(self, *args)

    def sendStr(self, *args):
        """
        sendStr(SX1276 self, std::string buffer, int timeout) -> upm::SX1276::RADIO_EVENT_T

        Parameters:
            buffer: std::string
            timeout: int


        SX1276::RADIO_EVENT_T
        sendStr(std::string buffer, int timeout)

        Send the supplied string. This writes the string into the FIFO and
        places the modem in transmit mode (via setTx()). This is a wrapper
        around send().

        Parameters:
        -----------

        buffer:  The buffer to send

        timeout:  The timeout in milliseconds

        one of the RADIO_EVENT_T values 
        """
        return _pyupm_sx1276.SX1276_sendStr(self, *args)

    def send(self, *args):
        """
        send(SX1276 self, uint8_t * buffer, uint8_t size, int timeout) -> upm::SX1276::RADIO_EVENT_T

        Parameters:
            buffer: uint8_t *
            size: uint8_t
            timeout: int


        SX1276::RADIO_EVENT_T
        send(uint8_t *buffer, uint8_t size, int timeout)

        Send the supplied buffer. The writes the buffer into the FIFO and
        places the modem in transmit mode (via setTx()).

        Parameters:
        -----------

        buffer:  The buffer to send

        size:  The size of the buffer

        timeout:  The timeout in milliseconds

        one of the RADIO_EVENT_T values 
        """
        return _pyupm_sx1276.SX1276_send(self, *args)

    def setRxConfig(self, *args):
        """
        setRxConfig(SX1276 self, upm::SX1276::RADIO_MODEM_T modem, uint32_t bandwidth, uint32_t datarate, uint8_t coderate, 
            uint32_t bandwidthAfc, uint16_t preambleLen, uint16_t symbTimeout, 
            bool fixLen, uint8_t payloadLen, bool crcOn, bool freqHopOn, uint8_t hopPeriod, 
            bool iqInverted, bool rxContinuous)

        Parameters:
            modem: enum upm::SX1276::RADIO_MODEM_T
            bandwidth: uint32_t
            datarate: uint32_t
            coderate: uint8_t
            bandwidthAfc: uint32_t
            preambleLen: uint16_t
            symbTimeout: uint16_t
            fixLen: bool
            payloadLen: uint8_t
            crcOn: bool
            freqHopOn: bool
            hopPeriod: uint8_t
            iqInverted: bool
            rxContinuous: bool


        void
        setRxConfig(RADIO_MODEM_T modem, uint32_t bandwidth, uint32_t
        datarate, uint8_t coderate, uint32_t bandwidthAfc, uint16_t
        preambleLen, uint16_t symbTimeout, bool fixLen, uint8_t payloadLen,
        bool crcOn, bool freqHopOn, uint8_t hopPeriod, bool iqInverted, bool
        rxContinuous)

        Set the receive configuration for a modem. It is important that both
        the receive and transmit configurations match in order for
        communication to work between two radios.

        Parameters:
        -----------

        modem:  One of the MODEM_T values

        bandwidth:  The bandwidth to use. Valid values are FSK : >= 2600 and
        <= 250000 Hz LoRa: [125 kHz, 250 kHz, 500 kHz]

        datarate:  Sets the Datarate FSK : 600..300000 bits/s LoRa: [6: 64, 7:
        128, 8: 256, 9: 512, 10: 1024, 11: 2048, 12: 4096 chips]

        coderate:  Sets the coding rate (LoRa only) FSK : N/A ( set to 0 )
        LoRa: [1: 4/5, 2: 4/6, 3: 4/7, 4: 4/8]

        bandwidthAfc:  Sets the AFC Bandwidth (FSK only) FSK : >= 2600 and <=
        250000 Hz LoRa: N/A ( set to 0 )

        preambleLen:  Sets the Preamble length FSK : Number of bytes LoRa:
        Length in symbols (the hardware adds 4 more symbols)

        symbTimeout:  Sets the RxSingle timeout value (LoRa only) FSK : N/A (
        set to 0 ) LoRa: timeout in symbols

        fixLen:  Fixed length packets [false: variable, true: fixed]

        payloadLen:  Sets payload length when fixed lenght is used

        crcOn:  Enables/Disables the CRC [false: OFF, true: ON]

        FreqHopOn:  Enables disables the intra-packet frequency hopping FSK :
        N/A ( set to 0 ) LoRa: [false: OFF, true: ON]

        HopPeriod:  Number of symbols bewteen each hop FSK : N/A ( set to 0 )
        LoRa: Number of symbols

        iqInverted:  Inverts IQ signals (LoRa only) FSK : N/A ( set to 0 )
        LoRa: [false: not inverted, true: inverted]

        rxContinuous:  Sets the reception in continuous mode [false: single
        mode, true: continuous mode] 
        """
        return _pyupm_sx1276.SX1276_setRxConfig(self, *args)

    def setTxConfig(self, *args):
        """
        setTxConfig(SX1276 self, upm::SX1276::RADIO_MODEM_T modem, int8_t power, uint32_t fdev, uint32_t bandwidth, 
            uint32_t datarate, uint8_t coderate, uint16_t preambleLen, bool fixLen, bool crcOn, 
            bool freqHopOn, uint8_t hopPeriod, bool iqInverted)

        Parameters:
            modem: enum upm::SX1276::RADIO_MODEM_T
            power: int8_t
            fdev: uint32_t
            bandwidth: uint32_t
            datarate: uint32_t
            coderate: uint8_t
            preambleLen: uint16_t
            fixLen: bool
            crcOn: bool
            freqHopOn: bool
            hopPeriod: uint8_t
            iqInverted: bool


        void
        setTxConfig(RADIO_MODEM_T modem, int8_t power, uint32_t fdev, uint32_t
        bandwidth, uint32_t datarate, uint8_t coderate, uint16_t preambleLen,
        bool fixLen, bool crcOn, bool freqHopOn, uint8_t hopPeriod, bool
        iqInverted)

        Set the transmit configuration for a modem. It is important that both
        the receive and transmit configurations match in order for
        communication to work between two radios.

        Parameters:
        -----------

        modem:  One of the MODEM_T values

        power:  Sets the output power [dBm]

        fdev:  Sets the frequency deviation (FSK only) FSK : [Hz] LoRa: 0

        bandwidth:  Sets the bandwidth (LoRa only) FSK : 0 LoRa: [125 kHz, 250
        kHz, or 500 kHz]

        datarate:  Sets the Datarate FSK : 600..300000 bits/s LoRa: [6: 64, 7:
        128, 8: 256, 9: 512, 10: 1024, 11: 2048, 12: 4096 chips]

        coderate:  Sets the coding rate (LoRa only) FSK : N/A ( set to 0 )
        LoRa: [1: 4/5, 2: 4/6, 3: 4/7, 4: 4/8]

        preambleLen:  Sets the preamble length FSK : Number of bytes LoRa:
        Length in symbols (the hardware adds 4 more symbols)

        fixLen:  Fixed length packets [false: variable, true: fixed]

        crcOn:  Enables disables the CRC [false: OFF, true: ON]

        FreqHopOn:  Enables disables the intra-packet frequency hopping FSK :
        N/A ( set to 0 ) LoRa: [false: OFF, true: ON]

        HopPeriod:  Number of symbols bewteen each hop FSK : N/A ( set to 0 )
        LoRa: Number of symbols

        iqInverted:  Inverts IQ signals (LoRa only) FSK : N/A ( set to 0 )
        LoRa: [false: not inverted, true: inverted] 
        """
        return _pyupm_sx1276.SX1276_setTxConfig(self, *args)

    def setRx(self, *args):
        """
        setRx(SX1276 self, uint32_t timeout) -> upm::SX1276::RADIO_EVENT_T

        Parameters:
            timeout: uint32_t


        SX1276::RADIO_EVENT_T
        setRx(uint32_t timeout)

        Start a receive operation. The method will return when completed,
        either successfully, or in error (crc, or other issue). If completed
        successfully, the returned buffer can be read via getRxBuffer() or
        getRxBufferStr(). In addition, values for RSSI and SNR (Lora only) can
        be retrieved.

        Parameters:
        -----------

        timeout:  The timeout in milliseconds

        one of the RADIO_EVENT_T values 
        """
        return _pyupm_sx1276.SX1276_setRx(self, *args)

    def getRxBufferStr(self):
        """
        getRxBufferStr(SX1276 self) -> std::string

        Parameters:
            self: upm::SX1276 *


        std::string
        getRxBufferStr()

        Upon a successful receive, this method can be used to retrieve the
        received packet.

        The received buffer in a std::string 
        """
        return _pyupm_sx1276.SX1276_getRxBufferStr(self)

    def getRxBuffer(self):
        """
        getRxBuffer(SX1276 self) -> uint8_t *

        Parameters:
            self: upm::SX1276 *


        uint8_t*
        getRxBuffer()

        Upon a successful receive, this method can be used to retrieve the
        received packet.

        a pointer to the received buffer. You can use getRxLen() to determine
        the number of valid bytes present. 
        """
        return _pyupm_sx1276.SX1276_getRxBuffer(self)

    def getRxRSSI(self):
        """
        getRxRSSI(SX1276 self) -> int

        Parameters:
            self: upm::SX1276 *


        int getRxRSSI()

        Upon a successful receive, this method can be used to retrieve the
        received packet's Received Signal Strength Indicator (RSSI) value.

        RSSI value 
        """
        return _pyupm_sx1276.SX1276_getRxRSSI(self)

    def getRxSNR(self):
        """
        getRxSNR(SX1276 self) -> int

        Parameters:
            self: upm::SX1276 *


        int getRxSNR()

        Upon a successful receive, this method can be used to retrieve the
        received packet's Signal to Noise (SNR) value.

        SNR value 
        """
        return _pyupm_sx1276.SX1276_getRxSNR(self)

    def getRxLen(self):
        """
        getRxLen(SX1276 self) -> int

        Parameters:
            self: upm::SX1276 *


        int getRxLen()

        Upon a successful receive, this method can be used to retrieve the
        number of bytes received.

        the number of bytes received 
        """
        return _pyupm_sx1276.SX1276_getRxLen(self)

SX1276_swigregister = _pyupm_sx1276.SX1276_swigregister
SX1276_swigregister(SX1276)

# This file is compatible with both classic and new-style classes.


