# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_groveehr', [dirname(__file__)])
        except ImportError:
            import _pyupm_groveehr
            return _pyupm_groveehr
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_groveehr', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_groveehr = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_groveehr
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class GroveEHR(_object):
    """
    API for the Grove Ear-clip Heart Rate Sensor.

    ID: groveehr

    Name: Grove Ear-clip Heart Rate Sensor

    Category: medical

    Manufacturer: seeed

    Connection: gpio  UPM module for the Grove ear-clip heart rate sensor.
    It is used to measure your heart rate.

    C++ includes: groveehr.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveEHR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GroveEHR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::GroveEHR self, int pin) -> GroveEHR

        Parameters:
            pin: int


        GroveEHR(int pin)

        GroveEHR constructor

        Parameters:
        -----------

        pin:  Digital pin to use 
        """
        this = _pyupm_groveehr.new_GroveEHR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_groveehr.delete_GroveEHR
    __del__ = lambda self : None;
    def getMillis(self):
        """
        getMillis(GroveEHR self) -> uint32_t

        Parameters:
            self: upm::GroveEHR *


        uint32_t getMillis()

        Returns the time of milliseconds elapsed since initClock() was last
        called.

        Elapsed milliseconds 
        """
        return _pyupm_groveehr.GroveEHR_getMillis(self)

    def initClock(self):
        """
        initClock(GroveEHR self)

        Parameters:
            self: upm::GroveEHR *


        void initClock()

        Resets the clock 
        """
        return _pyupm_groveehr.GroveEHR_initClock(self)

    def clearBeatCounter(self):
        """
        clearBeatCounter(GroveEHR self)

        Parameters:
            self: upm::GroveEHR *


        void
        clearBeatCounter()

        Resets the beat counter to 0. The beat counter should be stopped via
        stopBeatCounter() prior to calling this function. 
        """
        return _pyupm_groveehr.GroveEHR_clearBeatCounter(self)

    def startBeatCounter(self):
        """
        startBeatCounter(GroveEHR self)

        Parameters:
            self: upm::GroveEHR *


        void
        startBeatCounter()

        Starts the beat counter 
        """
        return _pyupm_groveehr.GroveEHR_startBeatCounter(self)

    def stopBeatCounter(self):
        """
        stopBeatCounter(GroveEHR self)

        Parameters:
            self: upm::GroveEHR *


        void
        stopBeatCounter()

        Stops the beat counter 
        """
        return _pyupm_groveehr.GroveEHR_stopBeatCounter(self)

    def beatCounter(self):
        """
        beatCounter(GroveEHR self) -> uint32_t

        Parameters:
            self: upm::GroveEHR *


        uint32_t
        beatCounter()

        Gets the beat Counter

        Beat counter 
        """
        return _pyupm_groveehr.GroveEHR_beatCounter(self)

    def heartRate(self):
        """
        heartRate(GroveEHR self) -> int

        Parameters:
            self: upm::GroveEHR *


        int heartRate()

        Computes the heart rate

        Computed heart rate 
        """
        return _pyupm_groveehr.GroveEHR_heartRate(self)

GroveEHR_swigregister = _pyupm_groveehr.GroveEHR_swigregister
GroveEHR_swigregister(GroveEHR)

# This file is compatible with both classic and new-style classes.


