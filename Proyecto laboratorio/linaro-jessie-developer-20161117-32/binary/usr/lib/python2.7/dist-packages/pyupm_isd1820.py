# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_isd1820', [dirname(__file__)])
        except ImportError:
            import _pyupm_isd1820
            return _pyupm_isd1820
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_isd1820', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_isd1820 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_isd1820
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class ISD1820(_object):
    """
    API support for the ISD1820-based Grove Voice Recorder.

    ID: isd1820

    Name: Grove Recorder

    Other Names: ISD1820 Recorder

    Category: sound

    Manufacturer: seeed

    Connection: gpio  This class implements support for the Grove Voice
    Recorder. There are two digital pins: one that enables recording, and
    the other that plays back what was previously recorded.

    C++ includes: isd1820.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISD1820, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISD1820, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::ISD1820 self, int playPin, int recPin) -> ISD1820

        Parameters:
            playPin: int
            recPin: int


        ISD1820(int playPin,
        int recPin)

        ISD1820 constructor

        Parameters:
        -----------

        recPin:  Pin to use for recording

        playPin:  Pin to use for playback 
        """
        this = _pyupm_isd1820.new_ISD1820(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_isd1820.delete_ISD1820
    __del__ = lambda self : None;
    def play(self, *args):
        """
        play(ISD1820 self, bool enable)

        Parameters:
            enable: bool


        void play(bool enable)

        Starts or stops playback

        Parameters:
        -----------

        enable:  Starts playback if true, stops if false 
        """
        return _pyupm_isd1820.ISD1820_play(self, *args)

    def record(self, *args):
        """
        record(ISD1820 self, bool enable)

        Parameters:
            enable: bool


        void record(bool enable)

        Starts or stops recording

        Parameters:
        -----------

        enable:  Starts recording if true, stops if false 
        """
        return _pyupm_isd1820.ISD1820_record(self, *args)

ISD1820_swigregister = _pyupm_isd1820.ISD1820_swigregister
ISD1820_swigregister(ISD1820)

# This file is compatible with both classic and new-style classes.


