# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_my9221', [dirname(__file__)])
        except ImportError:
            import _pyupm_my9221
            return _pyupm_my9221
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_my9221', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_my9221 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_my9221
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class MY9221(_object):
    """Proxy of C++ upm::MY9221 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MY9221, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MY9221, name)
    __repr__ = _swig_repr
    LEDS_PER_INSTANCE = _pyupm_my9221.MY9221_LEDS_PER_INSTANCE
    def __init__(self, *args): 
        """
        __init__(upm::MY9221 self, uint8_t dataPin, uint8_t clockPin, int instances=1) -> MY9221

        Parameters:
            dataPin: uint8_t
            clockPin: uint8_t
            instances: int

        __init__(upm::MY9221 self, uint8_t dataPin, uint8_t clockPin) -> MY9221

        Parameters:
            dataPin: uint8_t
            clockPin: uint8_t


        MY9221(uint8_t dataPin,
        uint8_t clockPin, int instances=1)

        Instantiates an MY9221 object

        Parameters:
        -----------

        dataPin:  Data pin

        clockPin:  Clock pin

        instances:  Number of daisy-chained my9221s, default 1 
        """
        this = _pyupm_my9221.new_MY9221(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_my9221.delete_MY9221
    __del__ = lambda self : None;
    def setAutoRefresh(self, *args):
        """
        setAutoRefresh(MY9221 self, bool enable)

        Parameters:
            enable: bool


        void
        setAutoRefresh(bool enable)

        Enable or disable auto refresh. When auto refresh is enabled, update
        the LED display as soon as the internal state changes. When false, the
        display(s) will not be updated until the refresh() method is called.

        Parameters:
        -----------

        enable:  true to enable auto refresh, false otherwise 
        """
        return _pyupm_my9221.MY9221_setAutoRefresh(self, *args)

    def setLED(self, *args):
        """
        setLED(MY9221 self, int led, bool on)

        Parameters:
            led: int
            on: bool


        void setLED(int led, bool
        on)

        Set an LED to a specific on (high intensity) or off (low intensity)
        value.

        Parameters:
        -----------

        led:  The LED whose state you wish to change

        on:  true to turn on the LED, false to turn the LED off 
        """
        return _pyupm_my9221.MY9221_setLED(self, *args)

    def setLowIntensityValue(self, *args):
        """
        setLowIntensityValue(MY9221 self, int intensity)

        Parameters:
            intensity: int


        void
        setLowIntensityValue(int intensity)

        Set the greyscale intensity of an LED in the OFF state. The intensity
        is a value from 0 (fully off) to 255 (fully on). This will take effect
        on any future LED set or clear operations.

        Parameters:
        -----------

        intensity:  a value from 0 (fully off) to 255 (fully on) 
        """
        return _pyupm_my9221.MY9221_setLowIntensityValue(self, *args)

    def setHighIntensityValue(self, *args):
        """
        setHighIntensityValue(MY9221 self, int intensity)

        Parameters:
            intensity: int


        void
        setHighIntensityValue(int intensity)

        Set the greyscale intensity of an LED in the ON state. The intensity
        is a value from 0 (fully off) to 255 (fully on). This will take effect
        on any future LED set or clear operations.

        Parameters:
        -----------

        intensity:  a value from 0 (fully off) to 255 (fully on) 
        """
        return _pyupm_my9221.MY9221_setHighIntensityValue(self, *args)

    def setAll(self):
        """
        setAll(MY9221 self)

        Parameters:
            self: upm::MY9221 *


        void setAll()

        Set all of the LEDS to the ON (high intensity value) state. 
        """
        return _pyupm_my9221.MY9221_setAll(self)

    def clearAll(self):
        """
        clearAll(MY9221 self)

        Parameters:
            self: upm::MY9221 *


        void clearAll()

        Set all of the LEDS to the OFF (low intensity value) state. 
        """
        return _pyupm_my9221.MY9221_clearAll(self)

    def refresh(self):
        """
        refresh(MY9221 self)

        Parameters:
            self: upm::MY9221 *


        void refresh()

        Set the LED states to match the internal stored states. This is useful
        when auto refresh ( setAutoRefresh()) is false to update the display.

        """
        return _pyupm_my9221.MY9221_refresh(self)

MY9221_swigregister = _pyupm_my9221.MY9221_swigregister
MY9221_swigregister(MY9221)

class GroveLEDBar(MY9221):
    """
    API for Grove LED Bars base on the MY9221.

    ID: groveledbar

    Name: Grove LED Bar

    Other Names: MY9221 LED Bar

    Category: display

    Manufacturer: seeed

    Link:http://www.seeedstudio.com/wiki/Grove_-_LED_Bar

    Connection: gpio

    Kit: eak  This is a 10-segment LED bar, with 8 green segments, 1
    yellow segment, and one red segment. They can be daisy chained
    together so that this module can control multiple LED bars.

    C++ includes: groveledbar.h 
    """
    __swig_setmethods__ = {}
    for _s in [MY9221]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveLEDBar, name, value)
    __swig_getmethods__ = {}
    for _s in [MY9221]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroveLEDBar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::GroveLEDBar self, uint8_t dataPin, uint8_t clockPin, int instances=1) -> GroveLEDBar

        Parameters:
            dataPin: uint8_t
            clockPin: uint8_t
            instances: int

        __init__(upm::GroveLEDBar self, uint8_t dataPin, uint8_t clockPin) -> GroveLEDBar

        Parameters:
            dataPin: uint8_t
            clockPin: uint8_t


        GroveLEDBar(uint8_t dataPin, uint8_t clockPin, int instances=1)

        Instantiates an GroveLEDBar object

        Parameters:
        -----------

        dataPin:  Data pin

        clockPin:  Clock pin

        instances:  Number of daisy-chained Grove LED Bars, default 1 
        """
        this = _pyupm_my9221.new_GroveLEDBar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_my9221.delete_GroveLEDBar
    __del__ = lambda self : None;
    def setBarLevel(self, *args):
        """
        setBarLevel(GroveLEDBar self, uint8_t level, bool greenToRed=True, int barNumber=0)

        Parameters:
            level: uint8_t
            greenToRed: bool
            barNumber: int

        setBarLevel(GroveLEDBar self, uint8_t level, bool greenToRed=True)

        Parameters:
            level: uint8_t
            greenToRed: bool

        setBarLevel(GroveLEDBar self, uint8_t level)

        Parameters:
            level: uint8_t


        void
        setBarLevel(uint8_t level, bool greenToRed=true, int barNumber=0)

        Sets the bar level

        Parameters:
        -----------

        level:  Selected level for the bar (0 - 10). 0 is off

        greenToRed:  true if you start the level on the first green LED, false
        otherwise

        barNumber:  If you have multiple LED bars chained together, this
        argument selects a specific bar starting at 0. The default is 0. 
        """
        return _pyupm_my9221.GroveLEDBar_setBarLevel(self, *args)

GroveLEDBar_swigregister = _pyupm_my9221.GroveLEDBar_swigregister
GroveLEDBar_swigregister(GroveLEDBar)

class GroveCircularLED(MY9221):
    """
    API for the Grove Circular LED module.

    ID: grovecircularled

    Name: Grove Circular LED

    Category: display

    Manufacturer: seeed

    Link:http://www.seeedstudio.com/wiki/Grove_-_Circular_LED

    Connection: gpio  This is a circular LED ring based on the MY9221
    chip. It is often used with a rotary encoder and has 24 controllable
    LEDs.

    C++ includes: grovecircularled.h 
    """
    __swig_setmethods__ = {}
    for _s in [MY9221]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveCircularLED, name, value)
    __swig_getmethods__ = {}
    for _s in [MY9221]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroveCircularLED, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::GroveCircularLED self, uint8_t dataPin, uint8_t clockPin) -> GroveCircularLED

        Parameters:
            dataPin: uint8_t
            clockPin: uint8_t


        GroveCircularLED(uint8_t dataPin, uint8_t clockPin)

        Instantiates an GroveCircularLED object

        Parameters:
        -----------

        dataPin:  Data pin

        clockPin:  Clock pin 
        """
        this = _pyupm_my9221.new_GroveCircularLED(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_my9221.delete_GroveCircularLED
    __del__ = lambda self : None;
    def setSpinner(self, *args):
        """
        setSpinner(GroveCircularLED self, uint8_t position)

        Parameters:
            position: uint8_t


        void
        setSpinner(uint8_t position)

        Sets the spinner (turns off all LEDs but selected one)

        Parameters:
        -----------

        position:  Selected position for the spinner (0-23) 
        """
        return _pyupm_my9221.GroveCircularLED_setSpinner(self, *args)

    def setLevel(self, *args):
        """
        setLevel(GroveCircularLED self, uint8_t level, bool direction=True)

        Parameters:
            level: uint8_t
            direction: bool

        setLevel(GroveCircularLED self, uint8_t level)

        Parameters:
            level: uint8_t


        void
        setLevel(uint8_t level, bool direction=true)

        Sets the lighting status

        Parameters:
        -----------

        level:  Selected level for the circular LED (0-23)

        direction:  Up or down; up is true and default 
        """
        return _pyupm_my9221.GroveCircularLED_setLevel(self, *args)

GroveCircularLED_swigregister = _pyupm_my9221.GroveCircularLED_swigregister
GroveCircularLED_swigregister(GroveCircularLED)

# This file is compatible with both classic and new-style classes.


