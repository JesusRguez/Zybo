# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_servo', [dirname(__file__)])
        except ImportError:
            import _pyupm_servo
            return _pyupm_servo
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_servo', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_servo = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_servo
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


MIN_PULSE_WIDTH = _pyupm_servo.MIN_PULSE_WIDTH
MAX_PULSE_WIDTH = _pyupm_servo.MAX_PULSE_WIDTH
PERIOD = _pyupm_servo.PERIOD
HIGH = _pyupm_servo.HIGH
LOW = _pyupm_servo.LOW
DEFAULT_WAIT_DISABLE_PWM = _pyupm_servo.DEFAULT_WAIT_DISABLE_PWM
class Servo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Servo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Servo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        Servo(int pin, int
        minPulseWidth, int maxPulseWidth, int waitAndDisablePwm)

        Instantiates a Servo object

        Parameters:
        -----------

        pin:   Servo pin number

        minPulseWidth:  Minimum pulse width, in microseconds

        maxPulseWidth:  Maximum pulse width, in microseconds

        waitAndDisablePwm:  If 1, PWM is enabled only during the setAngle()
        execution for a period of 1 second, and then turned back off. If 0,
        PWM remains on afterward. 
        """
        this = _pyupm_servo.new_Servo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_servo.delete_Servo
    __del__ = lambda self : None;
    def setAngle(self, *args):
        """
        mraa_result_t
        setAngle(int angle)

        Sets the angle of the servo engine.

        Parameters:
        -----------

        angle:  Number between 0 and 180

        0 if successful, non-zero otherwise 
        """
        return _pyupm_servo.Servo_setAngle(self, *args)

    def haltPwm(self):
        """
        mraa_result_t haltPwm()

        Halts PWM for this servo and allows it to move freely. 
        """
        return _pyupm_servo.Servo_haltPwm(self)

    def name(self):
        """
        std::string name()

        Returns the name of the component

        Name of the component 
        """
        return _pyupm_servo.Servo_name(self)

    def setMinPulseWidth(self, *args):
        """
        void
        setMinPulseWidth(int width)

        Sets the minimum pulse width

        Parameters:
        -----------

        width:  Minimum HIGH signal width 
        """
        return _pyupm_servo.Servo_setMinPulseWidth(self, *args)

    def setMaxPulseWidth(self, *args):
        """
        void
        setMaxPulseWidth(int width)

        Sets the maximum pulse width

        Parameters:
        -----------

        width:  Maximum HIGH signal width 
        """
        return _pyupm_servo.Servo_setMaxPulseWidth(self, *args)

    def setPeriod(self, *args):
        """
        void setPeriod(int
        period)

        Sets the maximum period width

        Parameters:
        -----------

        period:  PWM period width 
        """
        return _pyupm_servo.Servo_setPeriod(self, *args)

    def getMinPulseWidth(self):
        """
        int
        getMinPulseWidth()

        Returns the minimum pulse width

        Minimum pulse width 
        """
        return _pyupm_servo.Servo_getMinPulseWidth(self)

    def getMaxPulseWidth(self):
        """
        int
        getMaxPulseWidth()

        Returns the maximum pulse width

        Maximum pulse width 
        """
        return _pyupm_servo.Servo_getMaxPulseWidth(self)

    def getPeriod(self):
        """
        int getPeriod()

        Returns the maximum PWM period width

        Maximum PWM period width 
        """
        return _pyupm_servo.Servo_getPeriod(self)

Servo_swigregister = _pyupm_servo.Servo_swigregister
Servo_swigregister(Servo)

class ES08A(Servo):
    """
    API for the ES08A Servo.

    ID: es08a

    Name: ES08A Servo

    Other Names: Grove Servo

    Category: servos

    Manufacturer: emax

    Link:http://www.seeedstudio.com/wiki/Grove_-_Servo

    Connection: pwm

    Kit: gsk  This module defines the ES08A interface for ES08A servos.
    Like other servos, the ES08A servo has a shaft that can be controlled
    by setting the desired angle. There are also routines for setting and
    getting the minimum and maximum pulse width as well as the maximum
    period.

    C++ includes: es08a.h 
    """
    __swig_setmethods__ = {}
    for _s in [Servo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ES08A, name, value)
    __swig_getmethods__ = {}
    for _s in [Servo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ES08A, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        ES08A(int pin)

        Instantiates an ES08A object

        Parameters:
        -----------

        pin:   Servo pin number 
        """
        this = _pyupm_servo.new_ES08A(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_servo.delete_ES08A
    __del__ = lambda self : None;
ES08A_swigregister = _pyupm_servo.ES08A_swigregister
ES08A_swigregister(ES08A)

class ES9257(Servo):
    """
    API for the ES9257 Servo.

    ID: es9257

    Name: ES9257 Servo

    Other Names: Grove Servo

    Category: servos

    Manufacturer: emax

    Link:http://www.seeedstudio.com/wiki/Grove_-_Servo

    Connection: pwm

    Kit: gsk  This module defines the ES9257 interface for ES9257 servos.
    The ES9257 servo is a fast, heavy duty servo that is popular for
    moving the control surfaces on RC models.

    C++ includes: es9257.h 
    """
    __swig_setmethods__ = {}
    for _s in [Servo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ES9257, name, value)
    __swig_getmethods__ = {}
    for _s in [Servo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ES9257, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        ES9257(int pin)

        Instantiates an ES9257 object

        Parameters:
        -----------

        pin:   Servo pin number 
        """
        this = _pyupm_servo.new_ES9257(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_servo.delete_ES9257
    __del__ = lambda self : None;
ES9257_swigregister = _pyupm_servo.ES9257_swigregister
ES9257_swigregister(ES9257)

# This file is compatible with both classic and new-style classes.


