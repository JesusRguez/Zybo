# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_st7735', [dirname(__file__)])
        except ImportError:
            import _pyupm_st7735
            return _pyupm_st7735
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_st7735', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_st7735 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_st7735
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class GFX(_object):
    """
    GFX helper class.

    This file is used by the screen.

    C++ includes: ili9341_gfx.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GFX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GFX, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyupm_st7735.delete_GFX
    __del__ = lambda self : None;
    def setAddrWindow(self, *args):
        """
        setAddrWindow(GFX self, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)

        Parameters:
            x0: uint8_t
            y0: uint8_t
            x1: uint8_t
            y1: uint8_t


        virtual void
        setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)=0

        Sets the window address

        Parameters:
        -----------

        x0:  First coordinate

        y0:  First coordinate

        x1:  Second coordinate

        y1:  Second coordinate 
        """
        return _pyupm_st7735.GFX_setAddrWindow(self, *args)

    def drawPixel(self, *args):
        """
        drawPixel(GFX self, int16_t x, int16_t y, uint16_t color)

        Parameters:
            x: int16_t
            y: int16_t
            color: uint16_t


        virtual void
        drawPixel(int16_t x, int16_t y, uint16_t color)=0

        Sends a pixel color (RGB) to the chip. Must be implemented by the
        inherited class.

        Parameters:
        -----------

        x:  Axis on the horizontal scale

        y:  Axis on the vertical scale

        color:  RGB value 
        """
        return _pyupm_st7735.GFX_drawPixel(self, *args)

    def refresh(self):
        """
        refresh(GFX self)

        Parameters:
            self: upm::GFX *


        virtual void refresh()=0

        Copies the buffer to the chip via the SPI. 
        """
        return _pyupm_st7735.GFX_refresh(self)

    def drawChar(self, *args):
        """
        drawChar(GFX self, int16_t x, int16_t y, uint8_t data, uint16_t color, uint16_t bg, uint8_t size)

        Parameters:
            x: int16_t
            y: int16_t
            data: uint8_t
            color: uint16_t
            bg: uint16_t
            size: uint8_t


        void drawChar(int16_t x,
        int16_t y, uint8_t data, uint16_t color, uint16_t bg, uint8_t size)

        Parameters:
        -----------

        x:  Axis on the horizontal scale

        y:  Axis on the vertical scale

        data:  Character to write

        color:  Character color

        bg:  Character background color

        size:  Size of the font 
        """
        return _pyupm_st7735.GFX_drawChar(self, *args)

    def printString(self, *args):
        """
        printString(GFX self, std::string msg)

        Parameters:
            msg: std::string


        void print(std::string msg)

        Prints a message on the screen

        Parameters:
        -----------

        msg:  Message to print 
        """
        return _pyupm_st7735.GFX_printString(self, *args)

    def setPixel(self, *args):
        """
        setPixel(GFX self, int x, int y, uint16_t color) -> mraa::Result

        Parameters:
            x: int
            y: int
            color: uint16_t


        mraa::Result setPixel(int
        x, int y, uint16_t color)

        Prints a message on the screen

        Parameters:
        -----------

        x:  Axis on the horizontal scale

        y:  Axis on the vertical scale

        color:  Pixel color 
        """
        return _pyupm_st7735.GFX_setPixel(self, *args)

    def fillScreen(self, *args):
        """
        fillScreen(GFX self, uint16_t color)

        Parameters:
            color: uint16_t


        void fillScreen(uint16_t
        color)

        Fills the screen with a selected color

        Parameters:
        -----------

        color:  Selected color 
        """
        return _pyupm_st7735.GFX_fillScreen(self, *args)

    def fillRect(self, *args):
        """
        fillRect(GFX self, int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)

        Parameters:
            x: int16_t
            y: int16_t
            w: int16_t
            h: int16_t
            color: uint16_t


        void fillRect(int16_t x,
        int16_t y, int16_t w, int16_t h, uint16_t color)

        Fills a rectangle with a selected color

        Parameters:
        -----------

        x:  Axis on the horizontal scale (top-left corner)

        y:  Axis on the vertical scale (top-left corner)

        w:  Distanse from x

        h:  Distanse from y

        color:  Selected color 
        """
        return _pyupm_st7735.GFX_fillRect(self, *args)

    def drawFastVLine(self, *args):
        """
        drawFastVLine(GFX self, int16_t x, int16_t y, int16_t h, uint16_t color)

        Parameters:
            x: int16_t
            y: int16_t
            h: int16_t
            color: uint16_t


        void
        drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)

        Draws a line on the vertical scale

        Parameters:
        -----------

        x:  Axis on the horizontal scale

        y:  Axis on the vertical scale

        h:  Distanse from y

        color:  Selected color 
        """
        return _pyupm_st7735.GFX_drawFastVLine(self, *args)

    def drawLine(self, *args):
        """
        drawLine(GFX self, int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)

        Parameters:
            x0: int16_t
            y0: int16_t
            x1: int16_t
            y1: int16_t
            color: uint16_t


        void drawLine(int16_t x0,
        int16_t y0, int16_t x1, int16_t y1, uint16_t color)

        Draws a line from coordinate C0 to coordinate C1

        Parameters:
        -----------

        x0:  First coordinate

        y0:  First coordinate

        x1:  Second coordinate

        y1:  Second coordinate

        color:  selected color 
        """
        return _pyupm_st7735.GFX_drawLine(self, *args)

    def drawTriangle(self, *args):
        """
        drawTriangle(GFX self, int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)

        Parameters:
            x0: int16_t
            y0: int16_t
            x1: int16_t
            y1: int16_t
            x2: int16_t
            y2: int16_t
            color: uint16_t


        void
        drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t
        x2, int16_t y2, uint16_t color)

        Draws a triangle

        Parameters:
        -----------

        x0:  First coordinate

        y0:  First coordinate

        x1:  Second coordinate

        y1:  Second coordinate

        x2:  Third coordinate

        y2:  Third coordinate

        color:  Selected color 
        """
        return _pyupm_st7735.GFX_drawTriangle(self, *args)

    def drawCircle(self, *args):
        """
        drawCircle(GFX self, int16_t x, int16_t y, int16_t r, uint16_t color)

        Parameters:
            x: int16_t
            y: int16_t
            r: int16_t
            color: uint16_t


        void drawCircle(int16_t
        x, int16_t y, int16_t r, uint16_t color)

        Draws a circle

        Parameters:
        -----------

        x:  Center of the circle on the horizontal scale

        y:  Center of the circle on the vertical scale

        r:  Radius of the circle

        color:  Color of the circle 
        """
        return _pyupm_st7735.GFX_drawCircle(self, *args)

    def setCursor(self, *args):
        """
        setCursor(GFX self, int16_t x, int16_t y)

        Parameters:
            x: int16_t
            y: int16_t


        void setCursor(int16_t x,
        int16_t y)

        Sets the cursor for a text message

        Parameters:
        -----------

        x:  Axis on the horizontal scale

        y:  Axis on the vertical scale 
        """
        return _pyupm_st7735.GFX_setCursor(self, *args)

    def setTextColor(self, *args):
        """
        setTextColor(GFX self, uint16_t textColor, uint16_t textBGColor)

        Parameters:
            textColor: uint16_t
            textBGColor: uint16_t


        void
        setTextColor(uint16_t textColor, uint16_t textBGColor)

        Sets a text color for a message

        Parameters:
        -----------

        textColor:  Font color

        textBGColor:  Background color 
        """
        return _pyupm_st7735.GFX_setTextColor(self, *args)

    def setTextSize(self, *args):
        """
        setTextSize(GFX self, uint8_t size)

        Parameters:
            size: uint8_t


        void
        setTextSize(uint8_t size)

        Sets the size of the font

        Parameters:
        -----------

        size:  Font size 
        """
        return _pyupm_st7735.GFX_setTextSize(self, *args)

    def setTextWrap(self, *args):
        """
        setTextWrap(GFX self, uint8_t wrap)

        Parameters:
            wrap: uint8_t


        void
        setTextWrap(uint8_t wrap)

        Wraps a printed message

        Parameters:
        -----------

        wrap:  True (0x1) or false (0x0) 
        """
        return _pyupm_st7735.GFX_setTextWrap(self, *args)

    __swig_setmethods__["m_height"] = _pyupm_st7735.GFX_m_height_set
    __swig_getmethods__["m_height"] = _pyupm_st7735.GFX_m_height_get
    if _newclass:m_height = _swig_property(_pyupm_st7735.GFX_m_height_get, _pyupm_st7735.GFX_m_height_set)
    __swig_setmethods__["m_width"] = _pyupm_st7735.GFX_m_width_set
    __swig_getmethods__["m_width"] = _pyupm_st7735.GFX_m_width_get
    if _newclass:m_width = _swig_property(_pyupm_st7735.GFX_m_width_get, _pyupm_st7735.GFX_m_width_set)
    __swig_setmethods__["m_textSize"] = _pyupm_st7735.GFX_m_textSize_set
    __swig_getmethods__["m_textSize"] = _pyupm_st7735.GFX_m_textSize_get
    if _newclass:m_textSize = _swig_property(_pyupm_st7735.GFX_m_textSize_get, _pyupm_st7735.GFX_m_textSize_set)
    __swig_setmethods__["m_textColor"] = _pyupm_st7735.GFX_m_textColor_set
    __swig_getmethods__["m_textColor"] = _pyupm_st7735.GFX_m_textColor_get
    if _newclass:m_textColor = _swig_property(_pyupm_st7735.GFX_m_textColor_get, _pyupm_st7735.GFX_m_textColor_set)
    __swig_setmethods__["m_textBGColor"] = _pyupm_st7735.GFX_m_textBGColor_set
    __swig_getmethods__["m_textBGColor"] = _pyupm_st7735.GFX_m_textBGColor_get
    if _newclass:m_textBGColor = _swig_property(_pyupm_st7735.GFX_m_textBGColor_get, _pyupm_st7735.GFX_m_textBGColor_set)
    __swig_setmethods__["m_cursorX"] = _pyupm_st7735.GFX_m_cursorX_set
    __swig_getmethods__["m_cursorX"] = _pyupm_st7735.GFX_m_cursorX_get
    if _newclass:m_cursorX = _swig_property(_pyupm_st7735.GFX_m_cursorX_get, _pyupm_st7735.GFX_m_cursorX_set)
    __swig_setmethods__["m_cursorY"] = _pyupm_st7735.GFX_m_cursorY_set
    __swig_getmethods__["m_cursorY"] = _pyupm_st7735.GFX_m_cursorY_get
    if _newclass:m_cursorY = _swig_property(_pyupm_st7735.GFX_m_cursorY_get, _pyupm_st7735.GFX_m_cursorY_set)
    __swig_setmethods__["m_wrap"] = _pyupm_st7735.GFX_m_wrap_set
    __swig_getmethods__["m_wrap"] = _pyupm_st7735.GFX_m_wrap_get
    if _newclass:m_wrap = _swig_property(_pyupm_st7735.GFX_m_wrap_get, _pyupm_st7735.GFX_m_wrap_set)
    __swig_setmethods__["m_map"] = _pyupm_st7735.GFX_m_map_set
    __swig_getmethods__["m_map"] = _pyupm_st7735.GFX_m_map_get
    if _newclass:m_map = _swig_property(_pyupm_st7735.GFX_m_map_get, _pyupm_st7735.GFX_m_map_set)
GFX_swigregister = _pyupm_st7735.GFX_swigregister
GFX_swigregister(GFX)

INITR_GREENTAB = _pyupm_st7735.INITR_GREENTAB
INITR_REDTAB = _pyupm_st7735.INITR_REDTAB
INITR_BLACKTAB = _pyupm_st7735.INITR_BLACKTAB
ST7735_TFTWIDTH = _pyupm_st7735.ST7735_TFTWIDTH
ST7735_TFTHEIGHT = _pyupm_st7735.ST7735_TFTHEIGHT
ST7735_NOP = _pyupm_st7735.ST7735_NOP
ST7735_SWRESET = _pyupm_st7735.ST7735_SWRESET
ST7735_RDDID = _pyupm_st7735.ST7735_RDDID
ST7735_RDDST = _pyupm_st7735.ST7735_RDDST
ST7735_SLPIN = _pyupm_st7735.ST7735_SLPIN
ST7735_SLPOUT = _pyupm_st7735.ST7735_SLPOUT
ST7735_PTLON = _pyupm_st7735.ST7735_PTLON
ST7735_NORON = _pyupm_st7735.ST7735_NORON
ST7735_INVOFF = _pyupm_st7735.ST7735_INVOFF
ST7735_INVON = _pyupm_st7735.ST7735_INVON
ST7735_DISPOFF = _pyupm_st7735.ST7735_DISPOFF
ST7735_DISPON = _pyupm_st7735.ST7735_DISPON
ST7735_CASET = _pyupm_st7735.ST7735_CASET
ST7735_RASET = _pyupm_st7735.ST7735_RASET
ST7735_RAMWR = _pyupm_st7735.ST7735_RAMWR
ST7735_RAMRD = _pyupm_st7735.ST7735_RAMRD
ST7735_PTLAR = _pyupm_st7735.ST7735_PTLAR
ST7735_COLMOD = _pyupm_st7735.ST7735_COLMOD
ST7735_MADCTL = _pyupm_st7735.ST7735_MADCTL
ST7735_FRMCTR1 = _pyupm_st7735.ST7735_FRMCTR1
ST7735_FRMCTR2 = _pyupm_st7735.ST7735_FRMCTR2
ST7735_FRMCTR3 = _pyupm_st7735.ST7735_FRMCTR3
ST7735_INVCTR = _pyupm_st7735.ST7735_INVCTR
ST7735_DISSET5 = _pyupm_st7735.ST7735_DISSET5
ST7735_PWCTR1 = _pyupm_st7735.ST7735_PWCTR1
ST7735_PWCTR2 = _pyupm_st7735.ST7735_PWCTR2
ST7735_PWCTR3 = _pyupm_st7735.ST7735_PWCTR3
ST7735_PWCTR4 = _pyupm_st7735.ST7735_PWCTR4
ST7735_PWCTR5 = _pyupm_st7735.ST7735_PWCTR5
ST7735_VMCTR1 = _pyupm_st7735.ST7735_VMCTR1
ST7735_RDID1 = _pyupm_st7735.ST7735_RDID1
ST7735_RDID2 = _pyupm_st7735.ST7735_RDID2
ST7735_RDID3 = _pyupm_st7735.ST7735_RDID3
ST7735_RDID4 = _pyupm_st7735.ST7735_RDID4
ST7735_PWCTR6 = _pyupm_st7735.ST7735_PWCTR6
ST7735_GMCTRP1 = _pyupm_st7735.ST7735_GMCTRP1
ST7735_GMCTRN1 = _pyupm_st7735.ST7735_GMCTRN1
ST7735_BLACK = _pyupm_st7735.ST7735_BLACK
ST7735_BLUE = _pyupm_st7735.ST7735_BLUE
ST7735_RED = _pyupm_st7735.ST7735_RED
ST7735_GREEN = _pyupm_st7735.ST7735_GREEN
ST7735_CYAN = _pyupm_st7735.ST7735_CYAN
ST7735_MAGENTA = _pyupm_st7735.ST7735_MAGENTA
ST7735_YELLOW = _pyupm_st7735.ST7735_YELLOW
ST7735_WHITE = _pyupm_st7735.ST7735_WHITE
HIGH = _pyupm_st7735.HIGH
LOW = _pyupm_st7735.LOW
DELAY = _pyupm_st7735.DELAY
class ST7735(GFX):
    """
    API for the ST7735 LCD.

    ID: st7735

    Name: ST7735 LCD

    Category: display

    Manufacturer: adafruit

    Link:http://www.adafruit.com/product/358

    Connection: spi  This module defines the interface for the ST7735
    display library

    C++ includes: st7735.h 
    """
    __swig_setmethods__ = {}
    for _s in [GFX]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ST7735, name, value)
    __swig_getmethods__ = {}
    for _s in [GFX]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ST7735, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::ST7735 self, uint8_t csLCD, uint8_t cSD, uint8_t rs, uint8_t rst) -> ST7735

        Parameters:
            csLCD: uint8_t
            cSD: uint8_t
            rs: uint8_t
            rst: uint8_t


        ST7735(uint8_t csLCD,
        uint8_t cSD, uint8_t rs, uint8_t rst)

        Instantiates an ST7735 object

        Parameters:
        -----------

        csLCD:   LCD chip select pin

        cSD:  SD card chip select pin

        rs:  Data/command pin

        rst:  Reset pin 
        """
        this = _pyupm_st7735.new_ST7735(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self):
        """
        name(ST7735 self) -> std::string

        Parameters:
            self: upm::ST7735 *


        std::string name()

        Returns the name of the component 
        """
        return _pyupm_st7735.ST7735_name(self)

    def initModule(self):
        """
        initModule(ST7735 self)

        Parameters:
            self: upm::ST7735 *


        void initModule()

        Initializes the module GPIOs 
        """
        return _pyupm_st7735.ST7735_initModule(self)

    def configModule(self):
        """
        configModule(ST7735 self)

        Parameters:
            self: upm::ST7735 *


        void configModule()

        Configures the chip via the SPI 
        """
        return _pyupm_st7735.ST7735_configModule(self)

    def write(self, *args):
        """
        write(ST7735 self, uint8_t value)

        Parameters:
            value: uint8_t


        void write(uint8_t value)

        Sends a command to an SPI bus (rs must be LOW)

        Parameters:
        -----------

        value:  Command number 
        """
        return _pyupm_st7735.ST7735_write(self, *args)

    def data(self, *args):
        """
        data(ST7735 self, uint8_t value)

        Parameters:
            value: uint8_t


        void data(uint8_t value)

        Sends data to an SPI bus (rs must be HIGH)

        Parameters:
        -----------

        value:  Command number 
        """
        return _pyupm_st7735.ST7735_data(self, *args)

    def executeCMDList(self, *args):
        """
        executeCMDList(ST7735 self, uint8_t const * addr)

        Parameters:
            addr: uint8_t const *


        void
        executeCMDList(const uint8_t *addr)

        Executes a set of commands and data

        Parameters:
        -----------

        addr:  Pointer to the start of the commands/data section 
        """
        return _pyupm_st7735.ST7735_executeCMDList(self, *args)

    def setAddrWindow(self, *args):
        """
        setAddrWindow(ST7735 self, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)

        Parameters:
            x0: uint8_t
            y0: uint8_t
            x1: uint8_t
            y1: uint8_t


        void
        setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)

        Sets the window size inside the screen where pixels data is written.

        Parameters:
        -----------

        x0:  First coordinate

        y0:  First coordinate

        x1:  Second coordinate

        y1:  Second coordinate 
        """
        return _pyupm_st7735.ST7735_setAddrWindow(self, *args)

    def drawPixel(self, *args):
        """
        drawPixel(ST7735 self, int16_t x, int16_t y, uint16_t color)

        Parameters:
            x: int16_t
            y: int16_t
            color: uint16_t


        void drawPixel(int16_t
        x, int16_t y, uint16_t color)

        Sends a pixel color (RGB) to the chip.

        Parameters:
        -----------

        x:  Axis on the horizontal scale

        y:  Axis on the vertical scale

        color:  RGB (16-bit) color (R[0-4], G[5-10], B[11-15]) 
        """
        return _pyupm_st7735.ST7735_drawPixel(self, *args)

    def refresh(self):
        """
        refresh(ST7735 self)

        Parameters:
            self: upm::ST7735 *


        void refresh()

        Copies the buffer to the chip via the SPI. 
        """
        return _pyupm_st7735.ST7735_refresh(self)

    def lcdCSOn(self):
        """
        lcdCSOn(ST7735 self) -> mraa::Result

        Parameters:
            self: upm::ST7735 *


        mraa::Result lcdCSOn()

        LCD chip select is LOW 
        """
        return _pyupm_st7735.ST7735_lcdCSOn(self)

    def lcdCSOff(self):
        """
        lcdCSOff(ST7735 self) -> mraa::Result

        Parameters:
            self: upm::ST7735 *


        mraa::Result lcdCSOff()

        LCD chip select is HIGH 
        """
        return _pyupm_st7735.ST7735_lcdCSOff(self)

    def sdCSOn(self):
        """
        sdCSOn(ST7735 self) -> mraa::Result

        Parameters:
            self: upm::ST7735 *


        mraa::Result sdCSOn()

        CD card chip select is LOW 
        """
        return _pyupm_st7735.ST7735_sdCSOn(self)

    def sdCSOff(self):
        """
        sdCSOff(ST7735 self) -> mraa::Result

        Parameters:
            self: upm::ST7735 *


        mraa::Result sdCSOff()

        CD card select is HIGH 
        """
        return _pyupm_st7735.ST7735_sdCSOff(self)

    def rsHIGH(self):
        """
        rsHIGH(ST7735 self) -> mraa::Result

        Parameters:
            self: upm::ST7735 *


        mraa::Result rsHIGH()

        Data select is HIGH 
        """
        return _pyupm_st7735.ST7735_rsHIGH(self)

    def rsLOW(self):
        """
        rsLOW(ST7735 self) -> mraa::Result

        Parameters:
            self: upm::ST7735 *


        mraa::Result rsLOW()

        Data select is LOW 
        """
        return _pyupm_st7735.ST7735_rsLOW(self)

    __swig_setmethods__["m_map"] = _pyupm_st7735.ST7735_m_map_set
    __swig_getmethods__["m_map"] = _pyupm_st7735.ST7735_m_map_get
    if _newclass:m_map = _swig_property(_pyupm_st7735.ST7735_m_map_get, _pyupm_st7735.ST7735_m_map_set)
    __swig_destroy__ = _pyupm_st7735.delete_ST7735
    __del__ = lambda self : None;
ST7735_swigregister = _pyupm_st7735.ST7735_swigregister
ST7735_swigregister(ST7735)
cvar = _pyupm_st7735.cvar
Bcmd = cvar.Bcmd
Rcmd1 = cvar.Rcmd1
Rcmd2green = cvar.Rcmd2green
Rcmd2red = cvar.Rcmd2red
Rcmd3 = cvar.Rcmd3
font = cvar.font

# This file is compatible with both classic and new-style classes.


