# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_mcp9808', [dirname(__file__)])
        except ImportError:
            import _pyupm_mcp9808
            return _pyupm_mcp9808
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_mcp9808', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_mcp9808 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_mcp9808
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


MCP9808_REG_CONFIG = _pyupm_mcp9808.MCP9808_REG_CONFIG
MCP9808_REG_AMBIENT_TEMP = _pyupm_mcp9808.MCP9808_REG_AMBIENT_TEMP
MCP9808_REG_MANUF_ID = _pyupm_mcp9808.MCP9808_REG_MANUF_ID
MCP9808_REG_DEVICE_ID = _pyupm_mcp9808.MCP9808_REG_DEVICE_ID
MCP9808_REG_RESOLUTION = _pyupm_mcp9808.MCP9808_REG_RESOLUTION
MCP9808_CONFIG_SHUTDOWN = _pyupm_mcp9808.MCP9808_CONFIG_SHUTDOWN
MCP9808_CONFIG_CRITLOCKED = _pyupm_mcp9808.MCP9808_CONFIG_CRITLOCKED
MCP9808_CONFIG_WINLOCKED = _pyupm_mcp9808.MCP9808_CONFIG_WINLOCKED
MCP9808_CONFIG_INTCLR = _pyupm_mcp9808.MCP9808_CONFIG_INTCLR
class MCP9808(_object):
    """
    API for MCP9808 precision temprature sensor.

    ID: MCP9808

    Name: MCP9808 Temperature Sensor

    Category: temp

    Manufacturer: adafruit

    Connection: i2c

    Link:https://learn.adafruit.com/adafruit-mcp9808-precision-i2c-
    temperature- sensor-guide/overview

    Link:http://ww1.microchip.com/downloads/en/DeviceDoc/25095A.pdf  The
    MCP9808 digital temperature sensor converts temperatures between -20°C
    and +100°C to a digital word with ±0.5°C (max.) accuracy. The MCP9808
    comes with user-programmable registers that provide flexibility for
    temperature sensing applications. The registers allow user-selectable
    settings such as Shutdown or low-power modes and the specification of
    temperature Event and Critical output boundaries. When the temperature
    changes beyond the specified boundary limits, the MCP9808 outputs an
    Event signal. The user has the option of setting the event output
    signal polarity as an active-low or active-high comparator output for
    thermostat operation, or as temperature event interrupt output for
    microprocessor-based systems. The event output can also be configured
    as a Critical temperature output.

    Tested with Adafriut MCP9808 board.

    C++ includes: mcp9808.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCP9808, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCP9808, name)
    __repr__ = _swig_repr
    UPPER_TEMP = _pyupm_mcp9808.MCP9808_UPPER_TEMP
    LOWER_TEMP = _pyupm_mcp9808.MCP9808_LOWER_TEMP
    CRIT_TEMP = _pyupm_mcp9808.MCP9808_CRIT_TEMP
    RES_LOW = _pyupm_mcp9808.MCP9808_RES_LOW
    RES_MEDIUM = _pyupm_mcp9808.MCP9808_RES_MEDIUM
    RES_HIGH = _pyupm_mcp9808.MCP9808_RES_HIGH
    RES_PRECISION = _pyupm_mcp9808.MCP9808_RES_PRECISION
    ALERTSTAT = _pyupm_mcp9808.MCP9808_ALERTSTAT
    ALERTCTRL = _pyupm_mcp9808.MCP9808_ALERTCTRL
    ALERTSEL = _pyupm_mcp9808.MCP9808_ALERTSEL
    ALERTPOL = _pyupm_mcp9808.MCP9808_ALERTPOL
    ALERTMODE = _pyupm_mcp9808.MCP9808_ALERTMODE
    HYST_0 = _pyupm_mcp9808.MCP9808_HYST_0
    HYST_1_5 = _pyupm_mcp9808.MCP9808_HYST_1_5
    HYST_3_0 = _pyupm_mcp9808.MCP9808_HYST_3_0
    HYST_6_0 = _pyupm_mcp9808.MCP9808_HYST_6_0
    def __init__(self, *args): 
        """
        __init__(upm::MCP9808 self, int bus, uint8_t address=0x18) -> MCP9808

        Parameters:
            bus: int
            address: uint8_t

        __init__(upm::MCP9808 self, int bus) -> MCP9808

        Parameters:
            bus: int


        MCP9808(int bus,
        uint8_t address=0x18)

        MCP9808 constructor

        Parameters:
        -----------

        bus:  i2c bus the sensor is attached to.

        address.:  Device address. Default is 0x18. 
        """
        this = _pyupm_mcp9808.new_MCP9808(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_mcp9808.delete_MCP9808
    __del__ = lambda self : None;
    def name(self):
        """
        name(MCP9808 self) -> std::string

        Parameters:
            self: upm::MCP9808 *


        std::string name()

        Returns the name of the sensor 
        """
        return _pyupm_mcp9808.MCP9808_name(self)

    def getTemp(self):
        """
        getTemp(MCP9808 self) -> float

        Parameters:
            self: upm::MCP9808 *


        float getTemp(void)

        Returns current temperature. 
        """
        return _pyupm_mcp9808.MCP9808_getTemp(self)

    def shutDown(self, sleep=True):
        """
        shutDown(MCP9808 self, bool sleep=True)

        Parameters:
            sleep: bool

        shutDown(MCP9808 self)

        Parameters:
            self: upm::MCP9808 *


        void shutDown(bool
        sleep=true)

        Will cause the devices to either sleep or wakeup.

        Parameters:
        -----------

        sleep:  . Bool, default true to sleep. false to wake. 
        """
        return _pyupm_mcp9808.MCP9808_shutDown(self, sleep)

    def setMode(self, celsius=True):
        """
        setMode(MCP9808 self, bool celsius=True)

        Parameters:
            celsius: bool

        setMode(MCP9808 self)

        Parameters:
            self: upm::MCP9808 *


        void setMode(bool
        celsius=true)

        setMode - sets temperature reporting mode.

        Parameters:
        -----------

        celsius.:  Default is true. If false all temps will be reported in
        fahrenhiet. 
        """
        return _pyupm_mcp9808.MCP9808_setMode(self, celsius)

    def isCelsius(self):
        """
        isCelsius(MCP9808 self) -> bool

        Parameters:
            self: upm::MCP9808 *


        bool isCelsius(void)

        Returns true if mode is celsius False if fahrenheit. 
        """
        return _pyupm_mcp9808.MCP9808_isCelsius(self)

    def isTcrit(self):
        """
        isTcrit(MCP9808 self) -> bool

        Parameters:
            self: upm::MCP9808 *


        bool isTcrit()

        Returns true if TCrit threshold has been crossed Reflects the state of
        the bit based on the most recent readTemp() operation. 
        """
        return _pyupm_mcp9808.MCP9808_isTcrit(self)

    def isTupper(self):
        """
        isTupper(MCP9808 self) -> bool

        Parameters:
            self: upm::MCP9808 *


        bool isTupper()

        Returns true if TUpper threshold crossed Reflects the state of the bit
        based on the most recent readTemp() operation. 
        """
        return _pyupm_mcp9808.MCP9808_isTupper(self)

    def isTlower(self):
        """
        isTlower(MCP9808 self) -> bool

        Parameters:
            self: upm::MCP9808 *


        bool isTlower()

        Returns true if TLower threshold crossed. Reflects the state of the
        bit based on the most recent readTemp() operation. 
        """
        return _pyupm_mcp9808.MCP9808_isTlower(self)

    def setMonitorReg(self, *args):
        """
        setMonitorReg(MCP9808 self, upm::MCP9808::MCP9808_REG reg, float value)

        Parameters:
            reg: enum upm::MCP9808::MCP9808_REG
            value: float


        void
        setMonitorReg(MCP9808_REG reg, float value)

        Sets the value of TCrit, TUpper,TLower registers.

        reg - MCP9808_REG enum UPPER_TEMP, LOWER_TEMP or CRIT_TEMP.

        Parameters:
        -----------

        value:  - float value representing the set value 
        """
        return _pyupm_mcp9808.MCP9808_setMonitorReg(self, *args)

    def getMonitorReg(self, *args):
        """
        getMonitorReg(MCP9808 self, upm::MCP9808::MCP9808_REG reg) -> float

        Parameters:
            reg: enum upm::MCP9808::MCP9808_REG


        float
        getMonitorReg(MCP9808_REG reg)

        Returns the current value of TCrit, TUpper, TLower registers.

        Parameters:
        -----------

        reg:  - MCP9808_REG enum UPPER_TEMP, LOWER_TEMP or CRIT_TEMP. 
        """
        return _pyupm_mcp9808.MCP9808_getMonitorReg(self, *args)

    def clearInterrupt(self):
        """
        clearInterrupt(MCP9808 self)

        Parameters:
            self: upm::MCP9808 *


        void
        clearInterrupt(void)

        Clears the interrupt when ALERT_MODE is set to interrupt output and
        temp threshold crossed. 
        """
        return _pyupm_mcp9808.MCP9808_clearInterrupt(self)

    def setAlertMode(self, *args):
        """
        setAlertMode(MCP9808 self, uint16_t command)

        Parameters:
            command: uint16_t


        void
        setAlertMode(uint16_t command)

        Sets alert mode. Can use values from MCP9808_CONFIG enum. Values can
        be combined.

        Parameters:
        -----------

        command:  - a combination of options to set desired alert mode. See
        spcec sheet. 
        """
        return _pyupm_mcp9808.MCP9808_setAlertMode(self, *args)

    def clearAlertMode(self):
        """
        clearAlertMode(MCP9808 self)

        Parameters:
            self: upm::MCP9808 *


        void
        clearAlertMode(void)

        Clears Alert Mode sets all params to default. 
        """
        return _pyupm_mcp9808.MCP9808_clearAlertMode(self)

    def setHysteresis(self, *args):
        """
        setHysteresis(MCP9808 self, upm::MCP9808::MCP9808_CONFIG value)

        Parameters:
            value: enum upm::MCP9808::MCP9808_CONFIG


        void
        setHysteresis(MCP9808_CONFIG value)

        Sets hysteresis value.

        Parameters:
        -----------

        MCP9808_CONFIG:  enum value HYST_0, HYST_1_5, HYST_3_0 or HYST_6_0 
        """
        return _pyupm_mcp9808.MCP9808_setHysteresis(self, *args)

    def getHysteresis(self):
        """
        getHysteresis(MCP9808 self) -> float

        Parameters:
            self: upm::MCP9808 *


        float
        getHysteresis()

        Returns hysteresis setting as a float value. 
        """
        return _pyupm_mcp9808.MCP9808_getHysteresis(self)

    def setResolution(self, *args):
        """
        setResolution(MCP9808 self, upm::MCP9808::MCP9808_RESOLUTION value)

        Parameters:
            value: enum upm::MCP9808::MCP9808_RESOLUTION


        void
        setResolution(MCP9808_RESOLUTION value)

        Sets resolution of temperature conversion.

        Parameters:
        -----------

        value:  - MCP9808_RESOLUTION enum value. RES_LOW = +0.5 C RES_MEDIUM =
        +0.25 C RES_HIGH = +0.125 C RES_PRECISION = +0.0625 C (default). 
        """
        return _pyupm_mcp9808.MCP9808_setResolution(self, *args)

    def getResolution(self):
        """
        getResolution(MCP9808 self) -> float

        Parameters:
            self: upm::MCP9808 *


        float
        getResolution()

        Returns float value representing the current resolution setting. 
        """
        return _pyupm_mcp9808.MCP9808_getResolution(self)

    def getManufacturer(self):
        """
        getManufacturer(MCP9808 self) -> uint16_t

        Parameters:
            self: upm::MCP9808 *


        uint16_t
        getManufacturer()

        Returns Manufacturer ID. Typically 0x0054; 
        """
        return _pyupm_mcp9808.MCP9808_getManufacturer(self)

    def getDevicedId(self):
        """
        getDevicedId(MCP9808 self) -> uint16_t

        Parameters:
            self: upm::MCP9808 *


        uint16_t
        getDevicedId()

        Returns device ID and revision. Typically 0x0400 With ID in the High
        byte. 
        """
        return _pyupm_mcp9808.MCP9808_getDevicedId(self)

MCP9808_swigregister = _pyupm_mcp9808.MCP9808_swigregister
MCP9808_swigregister(MCP9808)

# This file is compatible with both classic and new-style classes.


