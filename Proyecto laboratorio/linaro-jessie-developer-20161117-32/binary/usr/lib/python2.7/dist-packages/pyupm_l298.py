# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_l298', [dirname(__file__)])
        except ImportError:
            import _pyupm_l298
            return _pyupm_l298
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_l298', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_l298 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_l298
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


L298_DEFAULT_PWM_PERIOD = _pyupm_l298.L298_DEFAULT_PWM_PERIOD
class L298(_object):
    """
    API for the L298 Dual H-Bridge Motor Driver.

    ID: l298

    Name: L298 Dual H-Bridge Motor Driver

    Category: motor

    Manufacturer: seeed sparkfun

    Link:https://www.sparkfun.com/products/9670

    Connection: gpio pwm  It was developed using the RobotBase Dual
    H-Bridge module.

    This module can support 2 DC motors, or one 2-phase stepper motor. It
    requires 3 pins per DC motor (or H-bridge), or 4 pins for the stepper
    motor (uses both H-bridges).

    L298 Dual H-Bridge Motor Driver image provided by SparkFun* underCC
    BY-NC-SA-3.0.

    Example driving a DC motorExample driving a stepper motor

    C++ includes: l298.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, L298, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, L298, name)
    __repr__ = _swig_repr
    DIR_NONE = _pyupm_l298.L298_DIR_NONE
    DIR_CW = _pyupm_l298.L298_DIR_CW
    DIR_CCW = _pyupm_l298.L298_DIR_CCW
    def __init__(self, *args): 
        """
        __init__(upm::L298 self, int pwm, int dir1, int dir2) -> L298

        Parameters:
            pwm: int
            dir1: int
            dir2: int

        __init__(upm::L298 self, int stepsPerRev, int en, int i1, int i2, int i3, int i4) -> L298

        Parameters:
            stepsPerRev: int
            en: int
            i1: int
            i2: int
            i3: int
            i4: int


        L298(int stepsPerRev, int en,
        int i1, int i2, int i3, int i4)

        L298 constructor for a 4-wire stepper motor

        Parameters:
        -----------

        stepsPerRev:  Number of steps per full revolution

        en:  Enables the pin

        i1:  Digital pin to use for stepper input 1

        i2:  Digital pin to use for stepper input 2

        i3:  Digital pin to use for stepper input 3

        i4:  Digital pin to use for stepper input 4 
        """
        this = _pyupm_l298.new_L298(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_l298.delete_L298
    __del__ = lambda self : None;
    def getMillis(self):
        """
        getMillis(L298 self) -> uint32_t

        Parameters:
            self: upm::L298 *


        uint32_t getMillis()

        Returns the number of milliseconds elapsed since initClock() was last
        called.

        Elapsed milliseconds 
        """
        return _pyupm_l298.L298_getMillis(self)

    def initClock(self):
        """
        initClock(L298 self)

        Parameters:
            self: upm::L298 *


        void initClock()

        Resets the clock 
        """
        return _pyupm_l298.L298_initClock(self)

    def setPeriodMS(self, *args):
        """
        setPeriodMS(L298 self, int ms)

        Parameters:
            ms: int


        void setPeriodMS(int
        ms)

        Sets the period in milliseconds

        Parameters:
        -----------

        ms:  Period in milliseconds 
        """
        return _pyupm_l298.L298_setPeriodMS(self, *args)

    def enable(self, *args):
        """
        enable(L298 self, bool enable)

        Parameters:
            enable: bool


        void enable(bool enable)

        Enables the PWM output for a motor

        Parameters:
        -----------

        enable:  Enables the PWM output if true, disables if false 
        """
        return _pyupm_l298.L298_enable(self, *args)

    def setSpeed(self, *args):
        """
        setSpeed(L298 self, int speed)

        Parameters:
            speed: int


        void setSpeed(int speed)

        Sets the speed of a DC or stepper motor. For a DC motor, values can
        range from 0 (off) to 100 (full speed). For a stepper motor, specify
        the desired RPM.

        Parameters:
        -----------

        speed:  Speed to set the motor to 
        """
        return _pyupm_l298.L298_setSpeed(self, *args)

    def setDirection(self, *args):
        """
        setDirection(L298 self, upm::L298::L298_DIRECTION_T dir)

        Parameters:
            dir: enum upm::L298::L298_DIRECTION_T


        void
        setDirection(L298_DIRECTION_T dir)

        Sets the direction of the motor, clockwise or counterclockwise

        Parameters:
        -----------

        dir:  Direction to set the motor to 
        """
        return _pyupm_l298.L298_setDirection(self, *args)

    def stepperSteps(self, *args):
        """
        stepperSteps(L298 self, unsigned int steps)

        Parameters:
            steps: unsigned int


        void
        stepperSteps(unsigned int steps)

        Steps the stepper motor a specified number of steps

        Parameters:
        -----------

        steps:  Number of steps to move the stepper motor 
        """
        return _pyupm_l298.L298_stepperSteps(self, *args)

L298_swigregister = _pyupm_l298.L298_swigregister
L298_swigregister(L298)

# This file is compatible with both classic and new-style classes.


