# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_rotaryencoder', [dirname(__file__)])
        except ImportError:
            import _pyupm_rotaryencoder
            return _pyupm_rotaryencoder
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_rotaryencoder', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_rotaryencoder = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_rotaryencoder
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class RotaryEncoder(_object):
    """
    API for the Grove Rotary Encoder.

    ID: rotaryencoder

    Name: Grove Rotary Encoder

    Category: other

    Manufacturer: seeed

    Link:http://www.seeedstudio.com/wiki/Grove_-_Encoder

    Connection: gpio

    Kit: hak  UPM module for the Grove rotary encoder. This rotary encoder
    encodes a rotation signal into electronic pulses that can be used to
    measure rotation and direction. It is useful in cases where a rotary
    knob is required, but using a potentiometer is not desirable. A rotary
    encoder can turn a full 360 degrees without a stop and does not place
    a resistive load on the circuit, as is the case with a potentiometer.

    This module maintains a position that is incremented or decremented
    according to the rotation on the encoder.

    C++ includes: rotaryencoder.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotaryEncoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RotaryEncoder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::RotaryEncoder self, int pinA, int pinB) -> RotaryEncoder

        Parameters:
            pinA: int
            pinB: int


        RotaryEncoder(int pinA, int pinB)

        RotaryEncoder constructor

        Parameters:
        -----------

        pinA:  Digital pin to use for signal A

        pinB:  Digital pin to use for signal B 
        """
        this = _pyupm_rotaryencoder.new_RotaryEncoder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_rotaryencoder.delete_RotaryEncoder
    __del__ = lambda self : None;
    def initPosition(self, count=0):
        """
        initPosition(RotaryEncoder self, int count=0)

        Parameters:
            count: int

        initPosition(RotaryEncoder self)

        Parameters:
            self: upm::RotaryEncoder *


        void
        initPosition(int count=0)

        Resets the position to a given number; default is 0.

        Parameters:
        -----------

        count:  Integer to initialize the position to 
        """
        return _pyupm_rotaryencoder.RotaryEncoder_initPosition(self, count)

    def position(self):
        """
        position(RotaryEncoder self) -> int

        Parameters:
            self: upm::RotaryEncoder *


        int position()

        Gets the position value 
        """
        return _pyupm_rotaryencoder.RotaryEncoder_position(self)

RotaryEncoder_swigregister = _pyupm_rotaryencoder.RotaryEncoder_swigregister
RotaryEncoder_swigregister(RotaryEncoder)

# This file is compatible with both classic and new-style classes.


