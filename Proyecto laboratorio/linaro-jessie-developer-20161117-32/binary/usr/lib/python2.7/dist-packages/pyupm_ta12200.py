# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_ta12200', [dirname(__file__)])
        except ImportError:
            import _pyupm_ta12200
            return _pyupm_ta12200
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_ta12200', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_ta12200 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_ta12200
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


TA12200_ADC_RES = _pyupm_ta12200.TA12200_ADC_RES
class TA12200(_object):
    """
    API for the TA12-200 Current Transformer.

    ID: ta12200

    Name: TA12-200 Current Transformer

    Other Names: Grove Electricity Sensor

    Category: electric

    Manufacturer: seeed

    Link:http://www.seeedstudio.com/wiki/Grove_-_Electricity_Sensor

    Connection: analog  UPM module for the TA12-200 current transformer
    found, for instance, in the Grove Electricity Sensor. This module can
    measure AC moving through a wire at up to 5 A.

    C++ includes: ta12200.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TA12200, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TA12200, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::TA12200 self, int pin) -> TA12200

        Parameters:
            pin: int


        TA12200(int pin)

        TA12200 constructor

        Parameters:
        -----------

        pin:  Analog pin to use 
        """
        this = _pyupm_ta12200.new_TA12200(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_ta12200.delete_TA12200
    __del__ = lambda self : None;
    def getMillis(self):
        """
        getMillis(TA12200 self) -> uint32_t

        Parameters:
            self: upm::TA12200 *


        uint32_t getMillis()

        Returns the number of milliseconds elapsed since initClock() was last
        called.

        Elapsed milliseconds 
        """
        return _pyupm_ta12200.TA12200_getMillis(self)

    def initClock(self):
        """
        initClock(TA12200 self)

        Parameters:
            self: upm::TA12200 *


        void initClock()

        Resets the clock 
        """
        return _pyupm_ta12200.TA12200_initClock(self)

    def highestValue(self):
        """
        highestValue(TA12200 self) -> unsigned int

        Parameters:
            self: upm::TA12200 *


        unsigned int
        highestValue()

        Gets the conversion value from the sensor

        Highest value obtained over 1 second of measuring 
        """
        return _pyupm_ta12200.TA12200_highestValue(self)

    def milliAmps(self, *args):
        """
        milliAmps(TA12200 self, unsigned int val, int res=1024) -> float

        Parameters:
            val: unsigned int
            res: int

        milliAmps(TA12200 self, unsigned int val) -> float

        Parameters:
            val: unsigned int


        float
        milliAmps(unsigned int val, int res=TA12200_ADC_RES)

        Computes the measured voltage

        Parameters:
        -----------

        val:  Value measured by highestValue()

        res:  ADC resolution

        Measured current in mA 
        """
        return _pyupm_ta12200.TA12200_milliAmps(self, *args)

TA12200_swigregister = _pyupm_ta12200.TA12200_swigregister
TA12200_swigregister(TA12200)

# This file is compatible with both classic and new-style classes.


