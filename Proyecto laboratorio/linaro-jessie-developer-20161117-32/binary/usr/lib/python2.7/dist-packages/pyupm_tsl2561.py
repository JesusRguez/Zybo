# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_tsl2561', [dirname(__file__)])
        except ImportError:
            import _pyupm_tsl2561
            return _pyupm_tsl2561
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_tsl2561', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_tsl2561 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_tsl2561
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


TSL2561_Address = _pyupm_tsl2561.TSL2561_Address
INTEGRATION_TIME0_13MS = _pyupm_tsl2561.INTEGRATION_TIME0_13MS
INTEGRATION_TIME1_101MS = _pyupm_tsl2561.INTEGRATION_TIME1_101MS
INTEGRATION_TIME2_402MS = _pyupm_tsl2561.INTEGRATION_TIME2_402MS
GAIN_0X = _pyupm_tsl2561.GAIN_0X
GAIN_16X = _pyupm_tsl2561.GAIN_16X
CONTROL_POWERON = _pyupm_tsl2561.CONTROL_POWERON
CONTROL_POWEROFF = _pyupm_tsl2561.CONTROL_POWEROFF
REGISTER_Control = _pyupm_tsl2561.REGISTER_Control
REGISTER_Timing = _pyupm_tsl2561.REGISTER_Timing
REGISTER_Interrupt = _pyupm_tsl2561.REGISTER_Interrupt
REGISTER_Channal0L = _pyupm_tsl2561.REGISTER_Channal0L
REGISTER_Channal0H = _pyupm_tsl2561.REGISTER_Channal0H
REGISTER_Channal1L = _pyupm_tsl2561.REGISTER_Channal1L
REGISTER_Channal1H = _pyupm_tsl2561.REGISTER_Channal1H
LUX_SCALE = _pyupm_tsl2561.LUX_SCALE
LUX_RATIOSCALE = _pyupm_tsl2561.LUX_RATIOSCALE
LUX_CHSCALE = _pyupm_tsl2561.LUX_CHSCALE
LUX_CHSCALE_TINT0 = _pyupm_tsl2561.LUX_CHSCALE_TINT0
LUX_CHSCALE_TINT1 = _pyupm_tsl2561.LUX_CHSCALE_TINT1
LUX_K1C = _pyupm_tsl2561.LUX_K1C
LUX_B1C = _pyupm_tsl2561.LUX_B1C
LUX_M1C = _pyupm_tsl2561.LUX_M1C
LUX_K2C = _pyupm_tsl2561.LUX_K2C
LUX_B2C = _pyupm_tsl2561.LUX_B2C
LUX_M2C = _pyupm_tsl2561.LUX_M2C
LUX_K3C = _pyupm_tsl2561.LUX_K3C
LUX_B3C = _pyupm_tsl2561.LUX_B3C
LUX_M3C = _pyupm_tsl2561.LUX_M3C
LUX_K4C = _pyupm_tsl2561.LUX_K4C
LUX_B4C = _pyupm_tsl2561.LUX_B4C
LUX_M4C = _pyupm_tsl2561.LUX_M4C
LUX_K5C = _pyupm_tsl2561.LUX_K5C
LUX_B5C = _pyupm_tsl2561.LUX_B5C
LUX_M5C = _pyupm_tsl2561.LUX_M5C
LUX_K6C = _pyupm_tsl2561.LUX_K6C
LUX_B6C = _pyupm_tsl2561.LUX_B6C
LUX_M6C = _pyupm_tsl2561.LUX_M6C
LUX_K7C = _pyupm_tsl2561.LUX_K7C
LUX_B7C = _pyupm_tsl2561.LUX_B7C
LUX_M7C = _pyupm_tsl2561.LUX_M7C
LUX_K8C = _pyupm_tsl2561.LUX_K8C
LUX_B8C = _pyupm_tsl2561.LUX_B8C
LUX_M8C = _pyupm_tsl2561.LUX_M8C
class TSL2561(_object):
    """
    API for the TSL2561 Digital Light Sensor.

    ID: tsl2561

    Name: TSL2561 Light Sensor

    Other Names: Grove Digital Light Sensor

    Category: light

    Manufacturer: seeed

    Link:http://www.seeedstudio.com/wiki/Grove_-_Digital_Light_Sensor

    Connection: i2c

    Kit: eak  TSL2560 and TSL2561 are light-to-digital converters that
    transform light intensity to a digital signal output capable of a
    direct I2C ( TSL2561) interface

    C++ includes: tsl2561.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TSL2561, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TSL2561, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::TSL2561 self, int bus=0, uint8_t devAddr=(0x29), uint8_t gain=(0x00), uint8_t integrationTime=(0x01)) -> TSL2561

        Parameters:
            bus: int
            devAddr: uint8_t
            gain: uint8_t
            integrationTime: uint8_t

        __init__(upm::TSL2561 self, int bus=0, uint8_t devAddr=(0x29), uint8_t gain=(0x00)) -> TSL2561

        Parameters:
            bus: int
            devAddr: uint8_t
            gain: uint8_t

        __init__(upm::TSL2561 self, int bus=0, uint8_t devAddr=(0x29)) -> TSL2561

        Parameters:
            bus: int
            devAddr: uint8_t

        __init__(upm::TSL2561 self, int bus=0) -> TSL2561

        Parameters:
            bus: int

        __init__(upm::TSL2561 self) -> TSL2561

        TSL2561(int bus=0,
        uint8_t devAddr=TSL2561_Address, uint8_t gain=GAIN_0X, uint8_t
        integrationTime=INTEGRATION_TIME1_101MS)

        Instantiates a TSL2561 object

        Parameters:
        -----------

        bus:  Number of the used bus

        devAddr:  Address of the used I2C device

        gain:  Correct gain to use

        integration:  Time to use 
        """
        this = _pyupm_tsl2561.new_TSL2561(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_tsl2561.delete_TSL2561
    __del__ = lambda self : None;
    def getLux(self):
        """
        getLux(TSL2561 self) -> int

        Parameters:
            self: upm::TSL2561 *


        int getLux()

        Gets the calculated lux reading from TSL2561

        Calculated lux value from the sensor 
        """
        return _pyupm_tsl2561.TSL2561_getLux(self)

TSL2561_swigregister = _pyupm_tsl2561.TSL2561_swigregister
TSL2561_swigregister(TSL2561)

# This file is compatible with both classic and new-style classes.


