# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_lol', [dirname(__file__)])
        except ImportError:
            import _pyupm_lol
            return _pyupm_lol
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_lol', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_lol = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_lol
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


LOL_X = _pyupm_lol.LOL_X
LOL_Y = _pyupm_lol.LOL_Y
class LoL(_object):
    """
    API for the Olimex LoL array.

    ID: lol

    Name: Olimex LoL Array

    Category: display

    Manufacturer: adafruit

    Connection: gpio  This module defines the LoL API and implementation
    for a simple framebuffer.

    C++ includes: lol.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoL, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(upm::LoL self) -> LoL

        LoL()

        Instantiates an LoL object singleton 
        """
        this = _pyupm_lol.new_LoL()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_lol.delete_LoL
    __del__ = lambda self : None;
    def getFramebuffer(self):
        """
        getFramebuffer(LoL self) -> unsigned char *

        Parameters:
            self: upm::LoL *


        unsigned char *
        getFramebuffer()

        Gets a framebuffer pointer 0 if successful 
        """
        return _pyupm_lol.LoL_getFramebuffer(self)

    def getPixel(self, *args):
        """
        getPixel(LoL self, int x, int y) -> bool

        Parameters:
            x: int
            y: int


        bool getPixel(int x, int
        y)

        Gets a pixel at specified coordinates

        Parameters:
        -----------

        x:  Coordinate x

        y:  Coordinate y

        true if the pixel is on, false if off

        Exceptions:
        -----------

        std::invalid_argument:  if pixel is out of bounds 
        """
        return _pyupm_lol.LoL_getPixel(self, *args)

    def setPixel(self, *args):
        """
        setPixel(LoL self, int x, int y, bool pixel)

        Parameters:
            x: int
            y: int
            pixel: bool


        void setPixel(int x, int
        y, bool pixel)

        Sets a pixel at specified coordinates

        Parameters:
        -----------

        x:  Coordinate x

        y:  Coordinate y

        pixel:  false is off, true is on

        Exceptions:
        -----------

        std::invalid_argument:  if pixel is out of bounds 
        """
        return _pyupm_lol.LoL_setPixel(self, *args)

LoL_swigregister = _pyupm_lol.LoL_swigregister
LoL_swigregister(LoL)

# This file is compatible with both classic and new-style classes.


