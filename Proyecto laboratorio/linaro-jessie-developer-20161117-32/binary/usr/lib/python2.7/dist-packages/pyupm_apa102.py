# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_apa102', [dirname(__file__)])
        except ImportError:
            import _pyupm_apa102
            return _pyupm_apa102
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_apa102', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_apa102 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_apa102
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


HIGH = _pyupm_apa102.HIGH
LOW = _pyupm_apa102.LOW
class APA102(_object):
    """
    API for controlling APA102/DotStar RGB LED Strips.

    ID: apa102

    Name: APA102/DotStar LED Strip

    Category: led

    Manufacturer: adafruit

    Connection: spi  APA102 LED Strips provide individually controllable
    LEDs through a SPI interface. For each LED, brightness (0-31) and RGB
    (0-255) values can be set.

    C++ includes: apa102.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, APA102, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, APA102, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::APA102 self, uint16_t ledCount, uint8_t spiBus, bool batchMode=False, int8_t csn=-1) -> APA102

        Parameters:
            ledCount: uint16_t
            spiBus: uint8_t
            batchMode: bool
            csn: int8_t

        __init__(upm::APA102 self, uint16_t ledCount, uint8_t spiBus, bool batchMode=False) -> APA102

        Parameters:
            ledCount: uint16_t
            spiBus: uint8_t
            batchMode: bool

        __init__(upm::APA102 self, uint16_t ledCount, uint8_t spiBus) -> APA102

        Parameters:
            ledCount: uint16_t
            spiBus: uint8_t


        APA102(uint16_t ledCount,
        uint8_t spiBus, bool batchMode=false, int8_t csn=-1)

        Instantiates a new APA102 LED Strip

        Parameters:
        -----------

        ledCount:  Number of APA102 leds in the strip

        spiBus:  SPI Bus number

        batchMode:  (optional) Immediatly write to SPI (false, default) or
        wait for a pushState call (true)

        csn:  (optional) Chip Select Pin 
        """
        this = _pyupm_apa102.new_APA102(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_apa102.delete_APA102
    __del__ = lambda self : None;
    def setLed(self, *args):
        """
        setLed(APA102 self, uint16_t ledIdx, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b)

        Parameters:
            ledIdx: uint16_t
            brightness: uint8_t
            r: uint8_t
            g: uint8_t
            b: uint8_t


        void setLed(uint16_t
        ledIdx, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b)

        Change the color for a single led

        Parameters:
        -----------

        ledIdx:  Index of the LED in the strip (0 based)

        brightness:  Brightness value (0-31)

        r:  Red component (0-255)

        g:  Green component (0-255)

        b:  Blue component (0-255) 
        """
        return _pyupm_apa102.APA102_setLed(self, *args)

    def setAllLeds(self, *args):
        """
        setAllLeds(APA102 self, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b)

        Parameters:
            brightness: uint8_t
            r: uint8_t
            g: uint8_t
            b: uint8_t


        void
        setAllLeds(uint8_t brightness, uint8_t r, uint8_t g, uint8_t b)

        Change the color for all leds

        Parameters:
        -----------

        brightness:  Brightness value (0-31)

        r:  Red component (0-255)

        g:  Green component (0-255)

        b:  Blue component (0-255) 
        """
        return _pyupm_apa102.APA102_setAllLeds(self, *args)

    def setLeds(self, *args):
        """
        setLeds(APA102 self, uint16_t startIdx, uint16_t endIdx, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b)

        Parameters:
            startIdx: uint16_t
            endIdx: uint16_t
            brightness: uint8_t
            r: uint8_t
            g: uint8_t
            b: uint8_t

        setLeds(APA102 self, uint16_t startIdx, uint16_t endIdx, uint8_t * colors)

        Parameters:
            startIdx: uint16_t
            endIdx: uint16_t
            colors: uint8_t *


        void setLeds(uint16_t
        startIdx, uint16_t endIdx, uint8_t *colors)

        (Advanced) Manually control the colors of a range of LEDS Best used to
        maximize performance

        Parameters:
        -----------

        startIdx:  Start index of the range of LEDs to update (0 based)

        endIdx:  End index of the range of LEDs to update (0 based)

        colors:  Pointer to an array of bytes. Each color is described as the
        following: B1: Brightness (224-255) B2: Blue (0-255) B3: Green (0-255)
        B4: Red (0-255) No check done on the boundaries 
        """
        return _pyupm_apa102.APA102_setLeds(self, *args)

    def pushState(self):
        """
        pushState(APA102 self)

        Parameters:
            self: upm::APA102 *


        void pushState()

        Outputs the current LED data to the SPI bus Note: Only required if
        batch mode is set to TRUE 
        """
        return _pyupm_apa102.APA102_pushState(self)

APA102_swigregister = _pyupm_apa102.APA102_swigregister
APA102_swigregister(APA102)

# This file is compatible with both classic and new-style classes.


