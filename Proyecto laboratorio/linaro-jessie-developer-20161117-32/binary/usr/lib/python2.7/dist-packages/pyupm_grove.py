# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_grove', [dirname(__file__)])
        except ImportError:
            import _pyupm_grove
            return _pyupm_grove
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_grove', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_grove = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_grove
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Grove(_object):
    """Proxy of C++ upm::Grove class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Grove, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Grove, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pyupm_grove.delete_Grove
    __del__ = lambda self : None;
    def name(self):
        """
        name(Grove self) -> std::string

        Parameters:
            self: upm::Grove *


        std::string name() 
        """
        return _pyupm_grove.Grove_name(self)

    def __init__(self): 
        """__init__(upm::Grove self) -> Grove"""
        this = _pyupm_grove.new_Grove()
        try: self.this.append(this)
        except: self.this = this
Grove_swigregister = _pyupm_grove.Grove_swigregister
Grove_swigregister(Grove)

class GroveLed(Grove):
    """
    API for the Grove LED.

    UPM module for the Grove LED (or other similar light-emitting diodes).
    An LED is a small lightbulb that emits light in response to a small
    current. The longer wire of an LED connects to the positive seat
    (anode); the shorter wire connects to the negative seat (cathode). The
    flat side of the bulb corresponds to the cathode, while the rounded
    side corresponds to the anode.

    C++ includes: grove.h 
    """
    __swig_setmethods__ = {}
    for _s in [Grove]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveLed, name, value)
    __swig_getmethods__ = {}
    for _s in [Grove]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroveLed, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::GroveLed self, int pin) -> GroveLed

        Parameters:
            pin: int


        GroveLed(int pin)

        Grove LED constructor

        Parameters:
        -----------

        gpio:  Pin to use 
        """
        this = _pyupm_grove.new_GroveLed(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_grove.delete_GroveLed
    __del__ = lambda self : None;
    def write(self, *args):
        """
        write(GroveLed self, int value) -> mraa_result_t

        Parameters:
            value: int


        mraa_result_t write(int
        value)

        Turns the LED on or off, depending on the value. If the value is
        positive (greater than or equal to 1), the LED is turned on.
        Otherwise, for 0 or negative values, the LED is turned off.

        Parameters:
        -----------

        value:  Tells the LED to turn on (for values >=1) or off (for values
        <1)

        0 if successful, non-zero otherwise 
        """
        return _pyupm_grove.GroveLed_write(self, *args)

    def off(self):
        """
        off(GroveLed self) -> mraa_result_t

        Parameters:
            self: upm::GroveLed *


        mraa_result_t off()

        Turns the LED off

        0 if successful, non-zero otherwise 
        """
        return _pyupm_grove.GroveLed_off(self)

    def on(self):
        """
        on(GroveLed self) -> mraa_result_t

        Parameters:
            self: upm::GroveLed *


        mraa_result_t on()

        Turns the LED on

        0 if successful, non-zero otherwise 
        """
        return _pyupm_grove.GroveLed_on(self)

GroveLed_swigregister = _pyupm_grove.GroveLed_swigregister
GroveLed_swigregister(GroveLed)

class GroveRelay(Grove):
    """
    API for the Grove Relay.

    UPM module for the Grove relay switch. Grove relay is a digital
    normally-open switch that uses low voltage or current to control a
    higher voltage and/or higher current. When closed, the indicator LED
    lights up and current is allowed to flow.

    C++ includes: grove.h 
    """
    __swig_setmethods__ = {}
    for _s in [Grove]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveRelay, name, value)
    __swig_getmethods__ = {}
    for _s in [Grove]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroveRelay, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::GroveRelay self, unsigned int pin) -> GroveRelay

        Parameters:
            pin: unsigned int


        GroveRelay(unsigned int pin)

        Grove relay constructor

        Parameters:
        -----------

        gpio:  Pin to use 
        """
        this = _pyupm_grove.new_GroveRelay(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_grove.delete_GroveRelay
    __del__ = lambda self : None;
    def on(self):
        """
        on(GroveRelay self) -> mraa_result_t

        Parameters:
            self: upm::GroveRelay *


        mraa_result_t on()

        Sets the relay switch to on (closed). This allows current to flow and
        lights up the indicator LED.

        0 if successful, non-zero otherwise 
        """
        return _pyupm_grove.GroveRelay_on(self)

    def off(self):
        """
        off(GroveRelay self) -> mraa_result_t

        Parameters:
            self: upm::GroveRelay *


        mraa_result_t off()

        Sets the relay switch to off (open). This stops current from flowing
        and the indicator LED is not lit.

        0 if successful, non-zero otherwise 
        """
        return _pyupm_grove.GroveRelay_off(self)

    def isOn(self):
        """
        isOn(GroveRelay self) -> bool

        Parameters:
            self: upm::GroveRelay *


        bool isOn()

        Defines whether the relay switch is closed.

        True if the switch is on (closed), false otherwise 
        """
        return _pyupm_grove.GroveRelay_isOn(self)

    def isOff(self):
        """
        isOff(GroveRelay self) -> bool

        Parameters:
            self: upm::GroveRelay *


        bool isOff()

        Defines whether the relay switch is open.

        True if the switch is off (open), false otherwise 
        """
        return _pyupm_grove.GroveRelay_isOff(self)

GroveRelay_swigregister = _pyupm_grove.GroveRelay_swigregister
GroveRelay_swigregister(GroveRelay)

class GroveTemp(Grove):
    """
    API for the Grove Temperature Sensor.

    Basic UPM module for the Grove temperature sensor on analog

    C++ includes: grove.h 
    """
    __swig_setmethods__ = {}
    for _s in [Grove]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveTemp, name, value)
    __swig_getmethods__ = {}
    for _s in [Grove]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroveTemp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::GroveTemp self, unsigned int pin) -> GroveTemp

        Parameters:
            pin: unsigned int


        GroveTemp(unsigned
        int pin)

        Grove analog temperature sensor constructor

        Parameters:
        -----------

        pin:  Analog pin to use 
        """
        this = _pyupm_grove.new_GroveTemp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_grove.delete_GroveTemp
    __del__ = lambda self : None;
    def raw_value(self):
        """
        raw_value(GroveTemp self) -> float

        Parameters:
            self: upm::GroveTemp *


        float raw_value()

        Gets the raw value from the AIO pin

        Raw value from the ADC 
        """
        return _pyupm_grove.GroveTemp_raw_value(self)

    def value(self):
        """
        value(GroveTemp self) -> int

        Parameters:
            self: upm::GroveTemp *


        int value()

        Gets the temperature in Celsius from the sensor

        Normalized temperature in Celsius 
        """
        return _pyupm_grove.GroveTemp_value(self)

GroveTemp_swigregister = _pyupm_grove.GroveTemp_swigregister
GroveTemp_swigregister(GroveTemp)

class GroveLight(Grove):
    """
    API for the Grove Light Sensor.

    The Grove light sensor detects the intensity of the ambient light. As
    the light intensity of the environment increases, the resistance of
    the sensor decreases. This means the raw value from the analog pin is
    greater in bright light and smaller in the dark. An approximate lux
    value can also be returned.

    C++ includes: grove.h 
    """
    __swig_setmethods__ = {}
    for _s in [Grove]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveLight, name, value)
    __swig_getmethods__ = {}
    for _s in [Grove]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroveLight, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::GroveLight self, unsigned int pin) -> GroveLight

        Parameters:
            pin: unsigned int


        GroveLight(unsigned int pin)

        Grove analog light sensor constructor

        Parameters:
        -----------

        pin:  Analog pin to use 
        """
        this = _pyupm_grove.new_GroveLight(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_grove.delete_GroveLight
    __del__ = lambda self : None;
    def raw_value(self):
        """
        raw_value(GroveLight self) -> float

        Parameters:
            self: upm::GroveLight *


        float raw_value()

        Gets the raw value from the AIO pin

        Raw value from the ADC 
        """
        return _pyupm_grove.GroveLight_raw_value(self)

    def value(self):
        """
        value(GroveLight self) -> int

        Parameters:
            self: upm::GroveLight *


        int value()

        Gets an approximate light value, in lux, from the sensor

        Normalized light reading in lux 
        """
        return _pyupm_grove.GroveLight_value(self)

GroveLight_swigregister = _pyupm_grove.GroveLight_swigregister
GroveLight_swigregister(GroveLight)

class GroveRotary(Grove):
    """
    API for the Grove Rotary Angle Sensor (Knob)

    Basic UPM module for the Grove rotary angle sensor (knob) on analog.
    Provides a set of functions to read the absolute pin value, degrees or
    radians, and another set to do the same relative to the center of the
    knob range.

    C++ includes: grove.h 
    """
    __swig_setmethods__ = {}
    for _s in [Grove]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveRotary, name, value)
    __swig_getmethods__ = {}
    for _s in [Grove]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroveRotary, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::GroveRotary self, unsigned int pin) -> GroveRotary

        Parameters:
            pin: unsigned int


        GroveRotary(unsigned int pin)

        Grove rotary angle sensor constructor

        Parameters:
        -----------

        pin:  Number of the analog pin to use 
        """
        this = _pyupm_grove.new_GroveRotary(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_grove.delete_GroveRotary
    __del__ = lambda self : None;
    def abs_value(self):
        """
        abs_value(GroveRotary self) -> float

        Parameters:
            self: upm::GroveRotary *


        float abs_value()

        Gets the absolute raw value from the AIO pin

        Unsigned value from the ADC 
        """
        return _pyupm_grove.GroveRotary_abs_value(self)

    def abs_deg(self):
        """
        abs_deg(GroveRotary self) -> float

        Parameters:
            self: upm::GroveRotary *


        float abs_deg()

        Gets absolute raw degrees from the AIO pin

        Unsigned degrees from the ADC 
        """
        return _pyupm_grove.GroveRotary_abs_deg(self)

    def abs_rad(self):
        """
        abs_rad(GroveRotary self) -> float

        Parameters:
            self: upm::GroveRotary *


        float abs_rad()

        Gets absolute raw radians from the AIO pin

        Unsigned radians from the ADC 
        """
        return _pyupm_grove.GroveRotary_abs_rad(self)

    def rel_value(self):
        """
        rel_value(GroveRotary self) -> float

        Parameters:
            self: upm::GroveRotary *


        float rel_value()

        Gets the relative value from the AIO pin

        Signed value from the ADC 
        """
        return _pyupm_grove.GroveRotary_rel_value(self)

    def rel_deg(self):
        """
        rel_deg(GroveRotary self) -> float

        Parameters:
            self: upm::GroveRotary *


        float rel_deg()

        Gets relative degrees from the AIO pin

        Signed degrees from the ADC 
        """
        return _pyupm_grove.GroveRotary_rel_deg(self)

    def rel_rad(self):
        """
        rel_rad(GroveRotary self) -> float

        Parameters:
            self: upm::GroveRotary *


        float rel_rad()

        Gets relative radians from the AIO pin

        Signed radians from the ADC 
        """
        return _pyupm_grove.GroveRotary_rel_rad(self)

GroveRotary_swigregister = _pyupm_grove.GroveRotary_swigregister
GroveRotary_swigregister(GroveRotary)

class GroveSlide(Grove):
    """
    API for the Grove Slide Potentiometer.

    Basic UPM module for the Grove slide potentiometer on analog that
    returns either a raw value or a scaled voltage value.

    C++ includes: grove.h 
    """
    __swig_setmethods__ = {}
    for _s in [Grove]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveSlide, name, value)
    __swig_getmethods__ = {}
    for _s in [Grove]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroveSlide, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::GroveSlide self, unsigned int pin, float ref_voltage=5.0) -> GroveSlide

        Parameters:
            pin: unsigned int
            ref_voltage: float

        __init__(upm::GroveSlide self, unsigned int pin) -> GroveSlide

        Parameters:
            pin: unsigned int


        GroveSlide(unsigned int pin, float ref_voltage=5.0)

        Grove analog slide potentiometer constructor

        Parameters:
        -----------

        pin:  Number of the analog pin to use

        ref_voltage:  Reference voltage the board is set to, as a floating-
        point value; default is 5.0V 
        """
        this = _pyupm_grove.new_GroveSlide(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_grove.delete_GroveSlide
    __del__ = lambda self : None;
    def raw_value(self):
        """
        raw_value(GroveSlide self) -> float

        Parameters:
            self: upm::GroveSlide *


        float raw_value()

        Gets the raw value from the AIO pin

        Raw value from the ADC 
        """
        return _pyupm_grove.GroveSlide_raw_value(self)

    def voltage_value(self):
        """
        voltage_value(GroveSlide self) -> float

        Parameters:
            self: upm::GroveSlide *


        float
        voltage_value()

        Gets the voltage value from the pin

        Voltage reading based on the reference voltage 
        """
        return _pyupm_grove.GroveSlide_voltage_value(self)

    def ref_voltage(self):
        """
        ref_voltage(GroveSlide self) -> float

        Parameters:
            self: upm::GroveSlide *


        float
        ref_voltage()

        Gets the board's reference voltage passed on object initialization

        Reference voltage the class was set for 
        """
        return _pyupm_grove.GroveSlide_ref_voltage(self)

GroveSlide_swigregister = _pyupm_grove.GroveSlide_swigregister
GroveSlide_swigregister(GroveSlide)

class GroveButton(Grove):
    """
    API for the Grove Button.

    Basic UPM module for the Grove button

    C++ includes: grove.h 
    """
    __swig_setmethods__ = {}
    for _s in [Grove]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveButton, name, value)
    __swig_getmethods__ = {}
    for _s in [Grove]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroveButton, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::GroveButton self, unsigned int pin) -> GroveButton

        Parameters:
            pin: unsigned int


        GroveButton(unsigned int pin)

        Grove button constructor

        Parameters:
        -----------

        gpio:  Pin to use 
        """
        this = _pyupm_grove.new_GroveButton(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_grove.delete_GroveButton
    __del__ = lambda self : None;
    def name(self):
        """
        name(GroveButton self) -> std::string

        Parameters:
            self: upm::GroveButton *


        std::string name()

        Gets the name of the sensor

        Name of this sensor 
        """
        return _pyupm_grove.GroveButton_name(self)

    def value(self):
        """
        value(GroveButton self) -> int

        Parameters:
            self: upm::GroveButton *


        int value()

        Gets the value from the GPIO pin

        Value from the GPIO pin 
        """
        return _pyupm_grove.GroveButton_value(self)

    def installISR(self, *args):
        """
        installISR(GroveButton self, mraa::Edge level, void (*)(void *) isr, void * arg)

        Parameters:
            level: mraa::Edge
            isr: void (*)(void *)
            arg: void *


        void
        installISR(mraa::Edge level, void(*isr)(void *), void *arg)

        Installs an interrupt service routine (ISR) to be called when the
        button is activated or deactivated.

        Parameters:
        -----------

        fptr:  Pointer to a function to be called on interrupt

        arg:  Pointer to an object to be supplied as an argument to the ISR.

        """
        return _pyupm_grove.GroveButton_installISR(self, *args)

    def uninstallISR(self):
        """
        uninstallISR(GroveButton self)

        Parameters:
            self: upm::GroveButton *


        void
        uninstallISR()

        Uninstalls the previously installed ISR 
        """
        return _pyupm_grove.GroveButton_uninstallISR(self)

GroveButton_swigregister = _pyupm_grove.GroveButton_swigregister
GroveButton_swigregister(GroveButton)

# This file is compatible with both classic and new-style classes.


