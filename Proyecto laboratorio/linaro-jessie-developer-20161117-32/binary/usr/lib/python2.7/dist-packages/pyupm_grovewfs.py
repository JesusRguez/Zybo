# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_grovewfs', [dirname(__file__)])
        except ImportError:
            import _pyupm_grovewfs
            return _pyupm_grovewfs
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_grovewfs', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_grovewfs = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_grovewfs
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class GroveWFS(_object):
    """
    API for the Grove Water Flow Sensor.

    ID: grovewfs

    Name: Grove Water Flow Sensor

    Category: liquid

    Manufacturer: seeed

    Link:http://www.seeedstudio.com/wiki/index.php?title=G1/2_Water_Flow_sensor

    Connection: gpio

    Kit: eak  This sensor is used to measure water flow in liters per
    minute (LPM). It incorporates a Hall Effect sensor. The UPM module
    defines an interrupt routine to be triggered on each low pulse,
    keeping count. This device requires a 10K pull-up resistor for the
    signal line (yellow wire). There is a schematic diagram on the
    SeeedStudio site
    (3/2015):http://www.seeedstudio.com/wiki/index.php?title=G1/2_Water_Flow_sensor

    However, be careful when wiring this up - the schematic appears to
    have a bug in it: the lower left connection of the signal line
    (yellow) to Vcc (red) should not be there. The sensor can work with
    this connection, but probably not for very long.

    C++ includes: grovewfs.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveWFS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GroveWFS, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::GroveWFS self, int pin) -> GroveWFS

        Parameters:
            pin: int


        GroveWFS(int pin)

        Grove Water Flow sensor constructor

        Parameters:
        -----------

        pin:  Digital pin to use 
        """
        this = _pyupm_grovewfs.new_GroveWFS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_grovewfs.delete_GroveWFS
    __del__ = lambda self : None;
    def getMillis(self):
        """
        getMillis(GroveWFS self) -> uint32_t

        Parameters:
            self: upm::GroveWFS *


        uint32_t getMillis()

        Returns the number of milliseconds elapsed since initClock() was last
        called.

        Elapsed milliseconds 
        """
        return _pyupm_grovewfs.GroveWFS_getMillis(self)

    def initClock(self):
        """
        initClock(GroveWFS self)

        Parameters:
            self: upm::GroveWFS *


        void initClock()

        Resets the clock 
        """
        return _pyupm_grovewfs.GroveWFS_initClock(self)

    def clearFlowCounter(self):
        """
        clearFlowCounter(GroveWFS self)

        Parameters:
            self: upm::GroveWFS *


        void
        clearFlowCounter()

        Resets the flow counter to 0. The flow counter should be stopped via
        stopFlowCounter() prior to calling this function. 
        """
        return _pyupm_grovewfs.GroveWFS_clearFlowCounter(self)

    def startFlowCounter(self):
        """
        startFlowCounter(GroveWFS self)

        Parameters:
            self: upm::GroveWFS *


        void
        startFlowCounter()

        Starts the flow counter 
        """
        return _pyupm_grovewfs.GroveWFS_startFlowCounter(self)

    def stopFlowCounter(self):
        """
        stopFlowCounter(GroveWFS self)

        Parameters:
            self: upm::GroveWFS *


        void
        stopFlowCounter()

        Stops the flow counter 
        """
        return _pyupm_grovewfs.GroveWFS_stopFlowCounter(self)

    def flowCounter(self):
        """
        flowCounter(GroveWFS self) -> uint32_t

        Parameters:
            self: upm::GroveWFS *


        uint32_t
        flowCounter()

        Gets the flow counter

        Flow counter 
        """
        return _pyupm_grovewfs.GroveWFS_flowCounter(self)

    def flowRate(self):
        """
        flowRate(GroveWFS self) -> float

        Parameters:
            self: upm::GroveWFS *


        float flowRate()

        Computes the flow rate in liters per minute (LPM)

        Computed flow rate 
        """
        return _pyupm_grovewfs.GroveWFS_flowRate(self)

GroveWFS_swigregister = _pyupm_grovewfs.GroveWFS_swigregister
GroveWFS_swigregister(GroveWFS)

# This file is compatible with both classic and new-style classes.


