# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_rfr359f', [dirname(__file__)])
        except ImportError:
            import _pyupm_rfr359f
            return _pyupm_rfr359f
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_rfr359f', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_rfr359f = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_rfr359f
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class RFR359F(_object):
    """
    API for the RFR359F-based Grove Distance Interrupter.

    ID: rfr359f

    Name: RFR359F Distance Interrupter

    Other Names: Grove Distance Interrupter

    Category: light

    Manufacturer: seeed

    Link:http://www.seeedstudio.com/wiki/Grove_-_IR_Distance_Interrupt

    Connection: gpio

    Kit: robok tsk  UPM module for the Grove distance interrupter. The
    sensitivity can be adjusted with the potentiometer on the sensor
    module. It has a range of approximately 4 inches and a quick response
    time.

    C++ includes: rfr359f.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RFR359F, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RFR359F, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::RFR359F self, int pin) -> RFR359F

        Parameters:
            pin: int


        RFR359F(int pin)

        RFR359F constructor

        Parameters:
        -----------

        pin:  Digital pin to use 
        """
        this = _pyupm_rfr359f.new_RFR359F(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_rfr359f.delete_RFR359F
    __del__ = lambda self : None;
    def objectDetected(self):
        """
        objectDetected(RFR359F self) -> bool

        Parameters:
            self: upm::RFR359F *


        bool
        objectDetected()

        Gets the status of the pin; true means an object has been detected

        True if the sensor has detected an object 
        """
        return _pyupm_rfr359f.RFR359F_objectDetected(self)

RFR359F_swigregister = _pyupm_rfr359f.RFR359F_swigregister
RFR359F_swigregister(RFR359F)

# This file is compatible with both classic and new-style classes.


