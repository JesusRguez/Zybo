# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_mma7455', [dirname(__file__)])
        except ImportError:
            import _pyupm_mma7455
            return _pyupm_mma7455
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_mma7455', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_mma7455 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_mma7455
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


ADDR = _pyupm_mma7455.ADDR
MMA7455_XOUTL = _pyupm_mma7455.MMA7455_XOUTL
MMA7455_XOUTH = _pyupm_mma7455.MMA7455_XOUTH
MMA7455_YOUTL = _pyupm_mma7455.MMA7455_YOUTL
MMA7455_YOUTH = _pyupm_mma7455.MMA7455_YOUTH
MMA7455_ZOUTL = _pyupm_mma7455.MMA7455_ZOUTL
MMA7455_ZOUTH = _pyupm_mma7455.MMA7455_ZOUTH
MMA7455_XOUT8 = _pyupm_mma7455.MMA7455_XOUT8
MMA7455_YOUT8 = _pyupm_mma7455.MMA7455_YOUT8
MMA7455_ZOUT8 = _pyupm_mma7455.MMA7455_ZOUT8
MMA7455_STATUS = _pyupm_mma7455.MMA7455_STATUS
MMA7455_DETSRC = _pyupm_mma7455.MMA7455_DETSRC
MMA7455_TOUT = _pyupm_mma7455.MMA7455_TOUT
MMA7455_RESERVED1 = _pyupm_mma7455.MMA7455_RESERVED1
MMA7455_I2CAD = _pyupm_mma7455.MMA7455_I2CAD
MMA7455_USRINF = _pyupm_mma7455.MMA7455_USRINF
MMA7455_WHOAMI = _pyupm_mma7455.MMA7455_WHOAMI
MMA7455_XOFFL = _pyupm_mma7455.MMA7455_XOFFL
MMA7455_XOFFH = _pyupm_mma7455.MMA7455_XOFFH
MMA7455_YOFFL = _pyupm_mma7455.MMA7455_YOFFL
MMA7455_YOFFH = _pyupm_mma7455.MMA7455_YOFFH
MMA7455_ZOFFL = _pyupm_mma7455.MMA7455_ZOFFL
MMA7455_ZOFFH = _pyupm_mma7455.MMA7455_ZOFFH
MMA7455_MCTL = _pyupm_mma7455.MMA7455_MCTL
MMA7455_INTRST = _pyupm_mma7455.MMA7455_INTRST
MMA7455_CTL1 = _pyupm_mma7455.MMA7455_CTL1
MMA7455_CTL2 = _pyupm_mma7455.MMA7455_CTL2
MMA7455_LDTH = _pyupm_mma7455.MMA7455_LDTH
MMA7455_PDTH = _pyupm_mma7455.MMA7455_PDTH
MMA7455_PD = _pyupm_mma7455.MMA7455_PD
MMA7455_LT = _pyupm_mma7455.MMA7455_LT
MMA7455_TW = _pyupm_mma7455.MMA7455_TW
MMA7455_RESERVED2 = _pyupm_mma7455.MMA7455_RESERVED2
MMA7455_D0 = _pyupm_mma7455.MMA7455_D0
MMA7455_D1 = _pyupm_mma7455.MMA7455_D1
MMA7455_D2 = _pyupm_mma7455.MMA7455_D2
MMA7455_D3 = _pyupm_mma7455.MMA7455_D3
MMA7455_D4 = _pyupm_mma7455.MMA7455_D4
MMA7455_D5 = _pyupm_mma7455.MMA7455_D5
MMA7455_D6 = _pyupm_mma7455.MMA7455_D6
MMA7455_D7 = _pyupm_mma7455.MMA7455_D7
MMA7455_DRDY = _pyupm_mma7455.MMA7455_DRDY
MMA7455_DOVR = _pyupm_mma7455.MMA7455_DOVR
MMA7455_PERR = _pyupm_mma7455.MMA7455_PERR
MMA7455_MODE0 = _pyupm_mma7455.MMA7455_MODE0
MMA7455_MODE1 = _pyupm_mma7455.MMA7455_MODE1
MMA7455_GLVL0 = _pyupm_mma7455.MMA7455_GLVL0
MMA7455_GLVL1 = _pyupm_mma7455.MMA7455_GLVL1
MMA7455_STON = _pyupm_mma7455.MMA7455_STON
MMA7455_SPI3W = _pyupm_mma7455.MMA7455_SPI3W
MMA7455_DRPD = _pyupm_mma7455.MMA7455_DRPD
MMA7455_INTPIN = _pyupm_mma7455.MMA7455_INTPIN
MMA7455_INTREG0 = _pyupm_mma7455.MMA7455_INTREG0
MMA7455_INTREG1 = _pyupm_mma7455.MMA7455_INTREG1
MMA7455_XDA = _pyupm_mma7455.MMA7455_XDA
MMA7455_YDA = _pyupm_mma7455.MMA7455_YDA
MMA7455_ZDA = _pyupm_mma7455.MMA7455_ZDA
MMA7455_THOPT = _pyupm_mma7455.MMA7455_THOPT
MMA7455_DFBW = _pyupm_mma7455.MMA7455_DFBW
MMA7455_LDPL = _pyupm_mma7455.MMA7455_LDPL
MMA7455_PDPL = _pyupm_mma7455.MMA7455_PDPL
MMA7455_DRVO = _pyupm_mma7455.MMA7455_DRVO
MMA7455_CLR_INT1 = _pyupm_mma7455.MMA7455_CLR_INT1
MMA7455_CLR_INT2 = _pyupm_mma7455.MMA7455_CLR_INT2
MMA7455_INT1 = _pyupm_mma7455.MMA7455_INT1
MMA7455_INT2 = _pyupm_mma7455.MMA7455_INT2
MMA7455_PDZ = _pyupm_mma7455.MMA7455_PDZ
MMA7455_PDY = _pyupm_mma7455.MMA7455_PDY
MMA7455_PDX = _pyupm_mma7455.MMA7455_PDX
MMA7455_LDZ = _pyupm_mma7455.MMA7455_LDZ
MMA7455_LDY = _pyupm_mma7455.MMA7455_LDY
MMA7455_LDX = _pyupm_mma7455.MMA7455_LDX
MMA7455_I2CDIS = _pyupm_mma7455.MMA7455_I2CDIS
HIGH = _pyupm_mma7455.HIGH
LOW = _pyupm_mma7455.LOW
class accelData(_object):
    """Proxy of C++ upm::accelData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, accelData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, accelData, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(upm::accelData self) -> accelData"""
        this = _pyupm_mma7455.new_accelData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_mma7455.delete_accelData
    __del__ = lambda self : None;
accelData_swigregister = _pyupm_mma7455.accelData_swigregister
accelData_swigregister(accelData)

class MMA7455(_object):
    """
    API for the MMA7455 Accelerometer.

    ID: mma7455

    Name: MMA7455 Accelerometer Sensor

    Category: accelerometer

    Manufacturer: generic

    Connection: i2c  This module defines the MMA7455 interface for
    libmma7455

    C++ includes: mma7455.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMA7455, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMA7455, name)
    __repr__ = _swig_repr
    def __init__(self, bus=0, devAddr=0x1D): 
        """
        __init__(upm::MMA7455 self, int bus=0, int devAddr=0x1D) -> MMA7455

        Parameters:
            bus: int
            devAddr: int

        __init__(upm::MMA7455 self, int bus=0) -> MMA7455

        Parameters:
            bus: int

        __init__(upm::MMA7455 self) -> MMA7455

        MMA7455(int bus=0, int
        devAddr=0x1D)

        Instantiates an MMA7455 object

        Parameters:
        -----------

        bus:  Number of the used bus

        devAddr:  Address of the used I2C device 
        """
        this = _pyupm_mma7455.new_MMA7455(bus, devAddr)
        try: self.this.append(this)
        except: self.this = this
    def name(self):
        """
        name(MMA7455 self) -> std::string

        Parameters:
            self: upm::MMA7455 *


        std::string name()

        Returns the name of the component

        Name of the component 
        """
        return _pyupm_mma7455.MMA7455_name(self)

    def calibrate(self):
        """
        calibrate(MMA7455 self) -> mraa::Result

        Parameters:
            self: upm::MMA7455 *


        mraa::Result
        calibrate()

        Calibrates the sensor

        0 (MRAA_SUCCESS) if successful; non-zero otherwise 
        """
        return _pyupm_mma7455.MMA7455_calibrate(self)

    def readData(self, *args):
        """
        readData(MMA7455 self, short * ptrX, short * ptrY, short * ptrZ) -> mraa::Result

        Parameters:
            ptrX: short *
            ptrY: short *
            ptrZ: short *


        mraa::Result
        readData(short *ptrX, short *ptrY, short *ptrZ)

        Reads X-axis, Y-axis, and Z-axis acceleration data

        Parameters:
        -----------

        ptrX:  X-axis

        ptrY:  Y-axis

        ptrZ:  Z-axis

        0 (MRAA_SUCCESS) if successful; non-zero otherwise 
        """
        return _pyupm_mma7455.MMA7455_readData(self, *args)

    def i2cReadReg(self, *args):
        """
        i2cReadReg(MMA7455 self, unsigned char reg, uint8_t * buffer, int len) -> int

        Parameters:
            reg: unsigned char
            buffer: uint8_t *
            len: int


        int
        i2cReadReg(unsigned char reg, uint8_t *buffer, int len)

        Internal function for reading I2C data

        Parameters:
        -----------

        reg:  Register address

        buffer:  Register data buffer

        len:  Buffer size 
        """
        return _pyupm_mma7455.MMA7455_i2cReadReg(self, *args)

    def i2cWriteReg(self, *args):
        """
        i2cWriteReg(MMA7455 self, unsigned char reg, uint8_t * buffer, int len) -> mraa::Result

        Parameters:
            reg: unsigned char
            buffer: uint8_t *
            len: int


        mraa::Result
        i2cWriteReg(unsigned char reg, uint8_t *buffer, int len)

        Internal function for writing I2C data

        Parameters:
        -----------

        reg:  Register address

        buffer:  Register data buffer

        len:  Buffer size 
        """
        return _pyupm_mma7455.MMA7455_i2cWriteReg(self, *args)

    __swig_destroy__ = _pyupm_mma7455.delete_MMA7455
    __del__ = lambda self : None;
MMA7455_swigregister = _pyupm_mma7455.MMA7455_swigregister
MMA7455_swigregister(MMA7455)

# This file is compatible with both classic and new-style classes.


