# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_rgbringcoder', [dirname(__file__)])
        except ImportError:
            import _pyupm_rgbringcoder
            return _pyupm_rgbringcoder
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_rgbringcoder', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_rgbringcoder = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_rgbringcoder
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class RGBRingCoder(_object):
    """
    API for the SparkFun* RGB RingCoder.

    ID: rgbringcoder

    Name: SparkFun RGB Ringcoder

    Category: led

    Link:https://www.sparkfun.com/products/11040

    Manufacturer: sparkfun

    Connection: pwm gpio  RGB RingCoder is a breakout board, a circular
    LED containing 16 LEDs arranged in a ring, and a rotary encoder. The
    encoder contains an RGB LED as well as a push button function.

    The device requires 11 pins, 3 of which must be PWM-capable (for the
    RGB LEDs).

    C++ includes: rgbringcoder.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RGBRingCoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RGBRingCoder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::RGBRingCoder self, int en, int latch, int clear, int clk, int dat, int sw, int encA, int encB, int red, 
            int green, int blue) -> RGBRingCoder

        Parameters:
            en: int
            latch: int
            clear: int
            clk: int
            dat: int
            sw: int
            encA: int
            encB: int
            red: int
            green: int
            blue: int


        RGBRingCoder(int en, int latch, int clear, int clk, int dat, int sw,
        int encA, int encB, int red, int green, int blue)

        RGBRingCoder constructor

        Parameters:
        -----------

        en:  Enables GPIO

        latch:  Latch GPIO

        clear:  Clears GPIO

        clk:  Clock GPIO

        dat:  Data out GPIO

        sw:  Push button switch GPIO

        encA:  Encoder A GPIO

        encB:  Encoder B GPIO

        red:  RGB red LED PWM

        green:  RGB green LED PWM

        blue:  RGB blue LED PWM 
        """
        this = _pyupm_rgbringcoder.new_RGBRingCoder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_rgbringcoder.delete_RGBRingCoder
    __del__ = lambda self : None;
    def setRingLEDS(self, *args):
        """
        setRingLEDS(RGBRingCoder self, uint16_t bits)

        Parameters:
            bits: uint16_t


        void
        setRingLEDS(uint16_t bits) 
        """
        return _pyupm_rgbringcoder.RGBRingCoder_setRingLEDS(self, *args)

    def getButtonState(self):
        """
        getButtonState(RGBRingCoder self) -> bool

        Parameters:
            self: upm::RGBRingCoder *


        bool
        getButtonState() 
        """
        return _pyupm_rgbringcoder.RGBRingCoder_getButtonState(self)

    def getEncoderPosition(self):
        """
        getEncoderPosition(RGBRingCoder self) -> int

        Parameters:
            self: upm::RGBRingCoder *


        int
        getEncoderPosition() 
        """
        return _pyupm_rgbringcoder.RGBRingCoder_getEncoderPosition(self)

    def clearEncoderPosition(self):
        """
        clearEncoderPosition(RGBRingCoder self)

        Parameters:
            self: upm::RGBRingCoder *


        void
        clearEncoderPosition() 
        """
        return _pyupm_rgbringcoder.RGBRingCoder_clearEncoderPosition(self)

    def setRGBLED(self, *args):
        """
        setRGBLED(RGBRingCoder self, float r, float g, float b)

        Parameters:
            r: float
            g: float
            b: float


        void
        setRGBLED(float r, float g, float b) 
        """
        return _pyupm_rgbringcoder.RGBRingCoder_setRGBLED(self, *args)

RGBRingCoder_swigregister = _pyupm_rgbringcoder.RGBRingCoder_swigregister
RGBRingCoder_swigregister(RGBRingCoder)

# This file is compatible with both classic and new-style classes.


