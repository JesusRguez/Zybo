# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_nrf8001', [dirname(__file__)])
        except ImportError:
            import _pyupm_nrf8001
            return _pyupm_nrf8001
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_nrf8001', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_nrf8001 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_nrf8001
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def init_local_interfaces(*args):
  """
    init_local_interfaces(aci_state_t * aci, uint8_t reqn, uint8_t rdyn, uint8_t rst)

    Parameters:
        aci: aci_state_t *
        reqn: uint8_t
        rdyn: uint8_t
        rst: uint8_t


    void
    init_local_interfaces(aci_state_t *aci, uint8_t reqn, uint8_t rdyn,
    uint8_t rst)

    NRF8001 Bluetooth Low Energy library.

    ID: nrf8001

    Name: NRF8001 Bluetooth Low Energy

    Category: wifi

    Manufacturer: adafruit

    Link:https://learn.adafruit.com/getting-started-with-the-
    nrf8001-bluefruit- le-breakout/introduction

    Connection: spi gpio analog  These files define the NRF8001 interface
    for lib-nrf8001. Interaction with this device is done through the ACI
    routines included with the library. You can use the nRF UART app in
    Apple* App Store and Google* Play* on Samsung* Galaxy S*4 running
    Android* 4.3 to interact with a microcontroller running the 'hello
    world' example.

    Include the services_lock.h to put the setup in the OTP memory of the
    nRF8001. This would mean that the setup cannot be changed once put in.
    However this removes the need to do the setup of the nRF8001 on every
    reset.

    Tell the ACI library, the MCU to nRF8001 pin connections. The Active
    pin is optional and can be marked UNUSED 
    """
  return _pyupm_nrf8001.init_local_interfaces(*args)

def close_local_interfaces(*args):
  """
    close_local_interfaces(aci_state_t * aci)

    Parameters:
        aci: aci_state_t *


    void
    close_local_interfaces(aci_state_t *aci) 
    """
  return _pyupm_nrf8001.close_local_interfaces(*args)
# This file is compatible with both classic and new-style classes.


