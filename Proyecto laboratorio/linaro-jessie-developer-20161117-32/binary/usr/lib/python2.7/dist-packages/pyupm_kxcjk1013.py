# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_kxcjk1013', [dirname(__file__)])
        except ImportError:
            import _pyupm_kxcjk1013
            return _pyupm_kxcjk1013
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_kxcjk1013', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_kxcjk1013 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_kxcjk1013
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class KXCJK1013(_object):
    """Proxy of C++ upm::KXCJK1013 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KXCJK1013, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KXCJK1013, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::KXCJK1013 self, int device) -> KXCJK1013

        Parameters:
            device: int

        """
        this = _pyupm_kxcjk1013.new_KXCJK1013(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_kxcjk1013.delete_KXCJK1013
    __del__ = lambda self : None;
    def installISR(self, *args):
        """
        installISR(KXCJK1013 self, void (*)(char *) isr, void * arg)

        Parameters:
            isr: void (*)(char *)
            arg: void *

        """
        return _pyupm_kxcjk1013.KXCJK1013_installISR(self, *args)

    def getChannelValue(self, *args):
        """
        getChannelValue(KXCJK1013 self, unsigned char * input, mraa_iio_channel * chan) -> int64_t

        Parameters:
            input: unsigned char *
            chan: mraa_iio_channel *

        """
        return _pyupm_kxcjk1013.KXCJK1013_getChannelValue(self, *args)

    def enableBuffer(self, *args):
        """
        enableBuffer(KXCJK1013 self, int length) -> bool

        Parameters:
            length: int

        """
        return _pyupm_kxcjk1013.KXCJK1013_enableBuffer(self, *args)

    def disableBuffer(self):
        """
        disableBuffer(KXCJK1013 self) -> bool

        Parameters:
            self: upm::KXCJK1013 *

        """
        return _pyupm_kxcjk1013.KXCJK1013_disableBuffer(self)

    def setScale(self, *args):
        """
        setScale(KXCJK1013 self, float const scale) -> bool

        Parameters:
            scale: float const

        """
        return _pyupm_kxcjk1013.KXCJK1013_setScale(self, *args)

    def setSamplingFrequency(self, *args):
        """
        setSamplingFrequency(KXCJK1013 self, float const sampling_frequency) -> bool

        Parameters:
            sampling_frequency: float const

        """
        return _pyupm_kxcjk1013.KXCJK1013_setSamplingFrequency(self, *args)

    def enable3AxisChannel(self):
        """
        enable3AxisChannel(KXCJK1013 self) -> bool

        Parameters:
            self: upm::KXCJK1013 *

        """
        return _pyupm_kxcjk1013.KXCJK1013_enable3AxisChannel(self)

    def extract3Axis(self, *args):
        """
        extract3Axis(KXCJK1013 self, char * data, float * x, float * y, float * z)

        Parameters:
            data: char *
            x: float *
            y: float *
            z: float *

        """
        return _pyupm_kxcjk1013.KXCJK1013_extract3Axis(self, *args)

KXCJK1013_swigregister = _pyupm_kxcjk1013.KXCJK1013_swigregister
KXCJK1013_swigregister(KXCJK1013)

# This file is compatible with both classic and new-style classes.


