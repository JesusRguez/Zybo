# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_micsv89', [dirname(__file__)])
        except ImportError:
            import _pyupm_micsv89
            return _pyupm_micsv89
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_micsv89', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_micsv89 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_micsv89
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class MICSV89(_object):
    """
    API for the MICS-VZ89 Gas Sensor.

    ID: micsv89

    Name: MICS-VZ89 Gas Sensor

    Category: gaseous

    Manufacturer: generic

    Connection: i2c

    Link:http://sgx.cdistore.com/datasheets/e2v/MiCS-
    VZ-86%20and%20VZ-89%20rev%204.pdf

    Link:http://www.sgxsensortech.com/content/uploads/2015/01/MICS-
    VZ-89-I2C- specs-rev-A.pdf  The MiCS-VZ-86/89 combines state-of-the-
    art MOS sensor technology with intelligent detection algorithms to
    monitor VOCs and CO2 equivalent variations in confined spaces.

    The MICSV89 comes in 4 variants, PWM and I2C in 3.3 volts and 5 volts.
    This library only implements the I2c version of the device.

    Device output is not valid until a warm up of 15 minutes of operation.

    C++ includes: micsv89.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MICSV89, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MICSV89, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::MICSV89 self, int bus, uint8_t address=0x70) -> MICSV89

        Parameters:
            bus: int
            address: uint8_t

        __init__(upm::MICSV89 self, int bus) -> MICSV89

        Parameters:
            bus: int


        MICSV89(int bus,
        uint8_t address=0x70)

        MICSV89 constructor

        Parameters:
        -----------

        bus:  i2c bus the sensor is attached to.

        address.:  Device address. Default is 0x70. 
        """
        this = _pyupm_micsv89.new_MICSV89(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_micsv89.delete_MICSV89
    __del__ = lambda self : None;
    def name(self):
        """
        name(MICSV89 self) -> std::string

        Parameters:
            self: upm::MICSV89 *


        std::string name()

        Returns the name of the sensor 
        """
        return _pyupm_micsv89.MICSV89_name(self)

    def co2equ(self):
        """
        co2equ(MICSV89 self) -> float

        Parameters:
            self: upm::MICSV89 *


        float co2equ()

        Returns the CO2 equivalent value. 
        """
        return _pyupm_micsv89.MICSV89_co2equ(self)

    def vocshort(self):
        """
        vocshort(MICSV89 self) -> int

        Parameters:
            self: upm::MICSV89 *


        int vocshort()

        Returns VOC Short value. 
        """
        return _pyupm_micsv89.MICSV89_vocshort(self)

    def tvoc(self):
        """
        tvoc(MICSV89 self) -> float

        Parameters:
            self: upm::MICSV89 *


        float tvoc()

        Returns Total VOC. 
        """
        return _pyupm_micsv89.MICSV89_tvoc(self)

    def resistor(self):
        """
        resistor(MICSV89 self) -> float

        Parameters:
            self: upm::MICSV89 *


        float resistor()

        Returns resistor value. 
        """
        return _pyupm_micsv89.MICSV89_resistor(self)

    def update(self):
        """
        update(MICSV89 self)

        Parameters:
            self: upm::MICSV89 *


        void update()

        Performs a write/read cycle. 
        """
        return _pyupm_micsv89.MICSV89_update(self)

    def valid(self):
        """
        valid(MICSV89 self) -> bool

        Parameters:
            self: upm::MICSV89 *


        bool valid()

        Returns true if a valid write/read cycle has been completed. At
        startup and during write/read cycle will be false. 
        """
        return _pyupm_micsv89.MICSV89_valid(self)

MICSV89_swigregister = _pyupm_micsv89.MICSV89_swigregister
MICSV89_swigregister(MICSV89)

# This file is compatible with both classic and new-style classes.


