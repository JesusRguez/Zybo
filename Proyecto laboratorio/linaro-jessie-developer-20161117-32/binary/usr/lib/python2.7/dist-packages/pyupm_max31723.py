# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_max31723', [dirname(__file__)])
        except ImportError:
            import _pyupm_max31723
            return _pyupm_max31723
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_max31723', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_max31723 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_max31723
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


HIGH = _pyupm_max31723.HIGH
LOW = _pyupm_max31723.LOW
class MAX31723(_object):
    """
    API for the MAX31723 Temperature Sensor.

    ID: max31723

    Name: MAX31723 Temperature Sensor

    Category: temperature

    Manufacturer: maxim

    Connection: spi  Maxim Integrated*MAX31723 is a low-voltage 3-wire/SPI
    temperature sensor controller. This module was tested on the Maxim
    IntegratedMAX31732PMB1 PMOD module from the analog PMOD kit.

    C++ includes: max31723.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MAX31723, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MAX31723, name)
    __repr__ = _swig_repr
    R_STS_READ_CMD = _pyupm_max31723.MAX31723_R_STS_READ_CMD
    R_STS_WRITE_CMD = _pyupm_max31723.MAX31723_R_STS_WRITE_CMD
    R_TEMPERATURE_LSB = _pyupm_max31723.MAX31723_R_TEMPERATURE_LSB
    R_TEMPERATURE_MSB = _pyupm_max31723.MAX31723_R_TEMPERATURE_MSB
    B_CONT_READING = _pyupm_max31723.MAX31723_B_CONT_READING
    def __init__(self, *args): 
        """
        __init__(upm::MAX31723 self, int csn) -> MAX31723

        Parameters:
            csn: int


        MAX31723(int csn)

        Instantiates an MAX31723 object

        Parameters:
        -----------

        bus:  Number of the used bus

        devAddr:  Address of the used I2C device 
        """
        this = _pyupm_max31723.new_MAX31723(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTemperature(self):
        """
        getTemperature(MAX31723 self) -> short

        Parameters:
            self: upm::MAX31723 *


        short
        getTemperature()

        MAXDS3231M object destructor; basically, it closes the I2C connection.
        it is not needed anymore, as the connections will be closed when m_spi
        and m_csnPinCtx variables will go out of scope ~MAX31723 (); Gets the
        on- board temperature. 
        """
        return _pyupm_max31723.MAX31723_getTemperature(self)

    def name(self):
        """
        name(MAX31723 self) -> std::string

        Parameters:
            self: upm::MAX31723 *


        std::string name()

        Returns the name of the component 
        """
        return _pyupm_max31723.MAX31723_name(self)

    __swig_destroy__ = _pyupm_max31723.delete_MAX31723
    __del__ = lambda self : None;
MAX31723_swigregister = _pyupm_max31723.MAX31723_swigregister
MAX31723_swigregister(MAX31723)

# This file is compatible with both classic and new-style classes.


