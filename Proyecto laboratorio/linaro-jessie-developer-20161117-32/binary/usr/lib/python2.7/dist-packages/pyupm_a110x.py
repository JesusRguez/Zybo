# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_a110x', [dirname(__file__)])
        except ImportError:
            import _pyupm_a110x
            return _pyupm_a110x
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_a110x', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_a110x = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_a110x
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class A110X(_object):
    """
    API for the A110X Hall Effect sensors.

    ID: a110x

    Name: A110X Hall Effect Sensor

    Other Names: Grove Hall Sensor

    Other Chips: A1101, A1102, A1103, A1004, A1106

    Category: electric

    Manufacturer: seeed

    Link:http://www.allegromicro.com/en/Products/Magnetic-Digital-
    Position- Sensor-ICs/Hall-Effect-Unipolar-Switches/A1101-2-3-4-6.aspx

    Connection: gpio

    Kit: robok  UPM module for the A110X (A1101, A1102, A1103, A1104, and
    A1106) Hall Effect sensors. It outputs a digital signal indicating
    whether it is detecting a magnetic field with south polarity
    perpendicular to the sensor element.

    An example showing a simple test for the presence of a fieldAn example
    demonstrating the use of an interrupt handler to count pulses

    C++ includes: a110x.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A110X, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A110X, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::A110X self, int pin) -> A110X

        Parameters:
            pin: int


        A110X(int pin)

        A110x digital sensor constructor

        Parameters:
        -----------

        pin:  Digital pin to use 
        """
        this = _pyupm_a110x.new_A110X(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_a110x.delete_A110X
    __del__ = lambda self : None;
    def magnetDetected(self):
        """
        magnetDetected(A110X self) -> bool

        Parameters:
            self: upm::A110X *


        bool
        magnetDetected()

        Determines whether a magnetic field of south polarity has been
        detected

        True if magnetic field detected 
        """
        return _pyupm_a110x.A110X_magnetDetected(self)

    def installISR(self, *args):
        """
        installISR(A110X self, void (*)(void *) isr, void * arg)

        Parameters:
            isr: void (*)(void *)
            arg: void *


        void
        installISR(void(*isr)(void *), void *arg)

        Installs an interrupt service routine (ISR) to be called when the
        appropriate magnetic field is detected

        Parameters:
        -----------

        fptr:  Pointer to a function to be called on interrupt

        arg:  Pointer to an object to be supplied as an argument to the ISR.

        """
        return _pyupm_a110x.A110X_installISR(self, *args)

    def uninstallISR(self):
        """
        uninstallISR(A110X self)

        Parameters:
            self: upm::A110X *


        void uninstallISR()

        Uninstalls the previously installed ISR 
        """
        return _pyupm_a110x.A110X_uninstallISR(self)

A110X_swigregister = _pyupm_a110x.A110X_swigregister
A110X_swigregister(A110X)

# This file is compatible with both classic and new-style classes.


