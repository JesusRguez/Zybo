# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_adafruitms1438', [dirname(__file__)])
        except ImportError:
            import _pyupm_adafruitms1438
            return _pyupm_adafruitms1438
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_adafruitms1438', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_adafruitms1438 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_adafruitms1438
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


ADAFRUITMS1438_I2C_BUS = _pyupm_adafruitms1438.ADAFRUITMS1438_I2C_BUS
ADAFRUITMS1438_DEFAULT_I2C_ADDR = _pyupm_adafruitms1438.ADAFRUITMS1438_DEFAULT_I2C_ADDR
class AdafruitMS1438(_object):
    """
    API for the AdafruitMS1438 Motor Shield.

    ID: adafruitms1438

    Name: Adafruit Motor Shield

    Category: motor

    Manufacturer: adafruit

    Link:http://www.adafruit.com/products/1438

    Connection: i2c  This class implements support for the stepper and DC
    motors that can be connected to this Motor Shield. Note: the two servo
    connections are not controlled by the PCA9685 controller (or this
    class). They are connected directly to digital PWM pins 9 and 10 on
    the Arduino* breakout board.

    An example using a DC motor connected to M3An example using a stepper
    motor connected to M1 & M2

    C++ includes: adafruitms1438.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdafruitMS1438, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdafruitMS1438, name)
    __repr__ = _swig_repr
    DIR_NONE = _pyupm_adafruitms1438.AdafruitMS1438_DIR_NONE
    DIR_CW = _pyupm_adafruitms1438.AdafruitMS1438_DIR_CW
    DIR_CCW = _pyupm_adafruitms1438.AdafruitMS1438_DIR_CCW
    MOTOR_M1 = _pyupm_adafruitms1438.AdafruitMS1438_MOTOR_M1
    MOTOR_M2 = _pyupm_adafruitms1438.AdafruitMS1438_MOTOR_M2
    MOTOR_M3 = _pyupm_adafruitms1438.AdafruitMS1438_MOTOR_M3
    MOTOR_M4 = _pyupm_adafruitms1438.AdafruitMS1438_MOTOR_M4
    STEPMOTOR_M12 = _pyupm_adafruitms1438.AdafruitMS1438_STEPMOTOR_M12
    STEPMOTOR_M34 = _pyupm_adafruitms1438.AdafruitMS1438_STEPMOTOR_M34
    def __init__(self, *args): 
        """
        __init__(upm::AdafruitMS1438 self, int bus, uint8_t address=0x60) -> AdafruitMS1438

        Parameters:
            bus: int
            address: uint8_t

        __init__(upm::AdafruitMS1438 self, int bus) -> AdafruitMS1438

        Parameters:
            bus: int


        AdafruitMS1438(int bus, uint8_t
        address=ADAFRUITMS1438_DEFAULT_I2C_ADDR)

        AdafruitMS1438 constructor

        Parameters:
        -----------

        bus:  I2C bus to use

        address:  Address for this sensor 
        """
        this = _pyupm_adafruitms1438.new_AdafruitMS1438(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_adafruitms1438.delete_AdafruitMS1438
    __del__ = lambda self : None;
    def getMillis(self, *args):
        """
        getMillis(AdafruitMS1438 self, upm::AdafruitMS1438::STEPMOTORS_T motor) -> uint32_t

        Parameters:
            motor: enum upm::AdafruitMS1438::STEPMOTORS_T


        uint32_t
        getMillis(STEPMOTORS_T motor)

        Returns the number of milliseconds elapsed since initClock(...) was
        last called.

        Elapsed milliseconds 
        """
        return _pyupm_adafruitms1438.AdafruitMS1438_getMillis(self, *args)

    def initClock(self, *args):
        """
        initClock(AdafruitMS1438 self, upm::AdafruitMS1438::STEPMOTORS_T motor)

        Parameters:
            motor: enum upm::AdafruitMS1438::STEPMOTORS_T


        void
        initClock(STEPMOTORS_T motor)

        Resets the clock 
        """
        return _pyupm_adafruitms1438.AdafruitMS1438_initClock(self, *args)

    def setPWMPeriod(self, *args):
        """
        setPWMPeriod(AdafruitMS1438 self, float hz)

        Parameters:
            hz: float


        void
        setPWMPeriod(float hz)

        Sets the PWM period. Note: this applies to all PWM channels.

        Parameters:
        -----------

        hz:  Sets the PWM period 
        """
        return _pyupm_adafruitms1438.AdafruitMS1438_setPWMPeriod(self, *args)

    def enableMotor(self, *args):
        """
        enableMotor(AdafruitMS1438 self, upm::AdafruitMS1438::DCMOTORS_T motor)

        Parameters:
            motor: enum upm::AdafruitMS1438::DCMOTORS_T


        void
        enableMotor(DCMOTORS_T motor)

        Enables PWM output for a motor

        Parameters:
        -----------

        motor:  DC motor to enable 
        """
        return _pyupm_adafruitms1438.AdafruitMS1438_enableMotor(self, *args)

    def disableMotor(self, *args):
        """
        disableMotor(AdafruitMS1438 self, upm::AdafruitMS1438::DCMOTORS_T motor)

        Parameters:
            motor: enum upm::AdafruitMS1438::DCMOTORS_T


        void
        disableMotor(DCMOTORS_T motor)

        Disables PWM output for a motor

        Parameters:
        -----------

        motor:  DC motor to disable 
        """
        return _pyupm_adafruitms1438.AdafruitMS1438_disableMotor(self, *args)

    def enableStepper(self, *args):
        """
        enableStepper(AdafruitMS1438 self, upm::AdafruitMS1438::STEPMOTORS_T motor)

        Parameters:
            motor: enum upm::AdafruitMS1438::STEPMOTORS_T


        void
        enableStepper(STEPMOTORS_T motor)

        Enables output for a stepper motor

        Parameters:
        -----------

        motor:  Stepper motor to enable 
        """
        return _pyupm_adafruitms1438.AdafruitMS1438_enableStepper(self, *args)

    def disableStepper(self, *args):
        """
        disableStepper(AdafruitMS1438 self, upm::AdafruitMS1438::STEPMOTORS_T motor)

        Parameters:
            motor: enum upm::AdafruitMS1438::STEPMOTORS_T


        void
        disableStepper(STEPMOTORS_T motor)

        Disable output for a stepper motor

        Parameters:
        -----------

        motor:  Stepper motor to disable 
        """
        return _pyupm_adafruitms1438.AdafruitMS1438_disableStepper(self, *args)

    def setMotorSpeed(self, *args):
        """
        setMotorSpeed(AdafruitMS1438 self, upm::AdafruitMS1438::DCMOTORS_T motor, int speed)

        Parameters:
            motor: enum upm::AdafruitMS1438::DCMOTORS_T
            speed: int


        void
        setMotorSpeed(DCMOTORS_T motor, int speed)

        set the speed of a DC motor. Values can range from 0 (off) to 100
        (full speed).

        Parameters:
        -----------

        motor:  the DC motor to configure

        speed:  speed to set the motor to 
        """
        return _pyupm_adafruitms1438.AdafruitMS1438_setMotorSpeed(self, *args)

    def setStepperSpeed(self, *args):
        """
        setStepperSpeed(AdafruitMS1438 self, upm::AdafruitMS1438::STEPMOTORS_T motor, int speed)

        Parameters:
            motor: enum upm::AdafruitMS1438::STEPMOTORS_T
            speed: int


        void
        setStepperSpeed(STEPMOTORS_T motor, int speed)

        Sets the speed of a stepper in revolutions per minute (RPM)

        Parameters:
        -----------

        motor:  DC motor to configure

        speed:  Speed to set the motor to 
        """
        return _pyupm_adafruitms1438.AdafruitMS1438_setStepperSpeed(self, *args)

    def setMotorDirection(self, *args):
        """
        setMotorDirection(AdafruitMS1438 self, upm::AdafruitMS1438::DCMOTORS_T motor, upm::AdafruitMS1438::DIRECTION_T dir)

        Parameters:
            motor: enum upm::AdafruitMS1438::DCMOTORS_T
            dir: enum upm::AdafruitMS1438::DIRECTION_T


        void
        setMotorDirection(DCMOTORS_T motor, DIRECTION_T dir)

        Sets the direction of a DC motor, clockwise or counterclockwise

        Parameters:
        -----------

        motor:  DC motor to configure

        dir:  Direction to set the motor in 
        """
        return _pyupm_adafruitms1438.AdafruitMS1438_setMotorDirection(self, *args)

    def setStepperDirection(self, *args):
        """
        setStepperDirection(AdafruitMS1438 self, upm::AdafruitMS1438::STEPMOTORS_T motor, upm::AdafruitMS1438::DIRECTION_T dir)

        Parameters:
            motor: enum upm::AdafruitMS1438::STEPMOTORS_T
            dir: enum upm::AdafruitMS1438::DIRECTION_T


        void
        setStepperDirection(STEPMOTORS_T motor, DIRECTION_T dir)

        Sets the direction of a stepper motor, clockwise or counterclockwise

        Parameters:
        -----------

        motor:  Stepper motor to configure

        dir:  Direction to set the motor in 
        """
        return _pyupm_adafruitms1438.AdafruitMS1438_setStepperDirection(self, *args)

    def stepConfig(self, *args):
        """
        stepConfig(AdafruitMS1438 self, upm::AdafruitMS1438::STEPMOTORS_T motor, unsigned int stepsPerRev)

        Parameters:
            motor: enum upm::AdafruitMS1438::STEPMOTORS_T
            stepsPerRev: unsigned int


        void
        stepConfig(STEPMOTORS_T motor, unsigned int stepsPerRev)

        Sets a stepper motor configuration

        Parameters:
        -----------

        motor:  Stepper motor to configure

        stepsPerRev:  Number of steps to complete a full revolution 
        """
        return _pyupm_adafruitms1438.AdafruitMS1438_stepConfig(self, *args)

    def stepperSteps(self, *args):
        """
        stepperSteps(AdafruitMS1438 self, upm::AdafruitMS1438::STEPMOTORS_T motor, unsigned int steps)

        Parameters:
            motor: enum upm::AdafruitMS1438::STEPMOTORS_T
            steps: unsigned int


        void
        stepperSteps(STEPMOTORS_T motor, unsigned int steps)

        Steps a stepper motor a specified number of steps

        Parameters:
        -----------

        motor:  Stepper motor to step

        steps:  Number of steps to move the stepper motor 
        """
        return _pyupm_adafruitms1438.AdafruitMS1438_stepperSteps(self, *args)

AdafruitMS1438_swigregister = _pyupm_adafruitms1438.AdafruitMS1438_swigregister
AdafruitMS1438_swigregister(AdafruitMS1438)

# This file is compatible with both classic and new-style classes.


