# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_nrf24l01', [dirname(__file__)])
        except ImportError:
            import _pyupm_nrf24l01
            return _pyupm_nrf24l01
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_nrf24l01', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_nrf24l01 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_nrf24l01
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class uint8Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint8Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint8Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyupm_nrf24l01.new_uint8Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_nrf24l01.delete_uint8Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _pyupm_nrf24l01.uint8Array___getitem__(self, *args)
    def __setitem__(self, *args): return _pyupm_nrf24l01.uint8Array___setitem__(self, *args)
    def cast(self): return _pyupm_nrf24l01.uint8Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyupm_nrf24l01.uint8Array_frompointer
    if _newclass:frompointer = staticmethod(_pyupm_nrf24l01.uint8Array_frompointer)
uint8Array_swigregister = _pyupm_nrf24l01.uint8Array_swigregister
uint8Array_swigregister(uint8Array)

def uint8Array_frompointer(*args):
  return _pyupm_nrf24l01.uint8Array_frompointer(*args)
uint8Array_frompointer = _pyupm_nrf24l01.uint8Array_frompointer

CONFIG = _pyupm_nrf24l01.CONFIG
EN_AA = _pyupm_nrf24l01.EN_AA
EN_RXADDR = _pyupm_nrf24l01.EN_RXADDR
SETUP_AW = _pyupm_nrf24l01.SETUP_AW
SETUP_RETR = _pyupm_nrf24l01.SETUP_RETR
RF_CH = _pyupm_nrf24l01.RF_CH
RF_SETUP = _pyupm_nrf24l01.RF_SETUP
STATUS = _pyupm_nrf24l01.STATUS
OBSERVE_TX = _pyupm_nrf24l01.OBSERVE_TX
CD = _pyupm_nrf24l01.CD
RX_ADDR_P0 = _pyupm_nrf24l01.RX_ADDR_P0
RX_ADDR_P1 = _pyupm_nrf24l01.RX_ADDR_P1
RX_ADDR_P2 = _pyupm_nrf24l01.RX_ADDR_P2
RX_ADDR_P3 = _pyupm_nrf24l01.RX_ADDR_P3
RX_ADDR_P4 = _pyupm_nrf24l01.RX_ADDR_P4
RX_ADDR_P5 = _pyupm_nrf24l01.RX_ADDR_P5
TX_ADDR = _pyupm_nrf24l01.TX_ADDR
RX_PW_P0 = _pyupm_nrf24l01.RX_PW_P0
RX_PW_P1 = _pyupm_nrf24l01.RX_PW_P1
RX_PW_P2 = _pyupm_nrf24l01.RX_PW_P2
RX_PW_P3 = _pyupm_nrf24l01.RX_PW_P3
RX_PW_P4 = _pyupm_nrf24l01.RX_PW_P4
RX_PW_P5 = _pyupm_nrf24l01.RX_PW_P5
FIFO_STATUS = _pyupm_nrf24l01.FIFO_STATUS
DYNPD = _pyupm_nrf24l01.DYNPD
FEATURE = _pyupm_nrf24l01.FEATURE
MASK_RX_DR = _pyupm_nrf24l01.MASK_RX_DR
MASK_TX_DS = _pyupm_nrf24l01.MASK_TX_DS
MASK_MAX_RT = _pyupm_nrf24l01.MASK_MAX_RT
EN_CRC = _pyupm_nrf24l01.EN_CRC
CRCO = _pyupm_nrf24l01.CRCO
PWR_UP = _pyupm_nrf24l01.PWR_UP
PRIM_RX = _pyupm_nrf24l01.PRIM_RX
ENAA_P5 = _pyupm_nrf24l01.ENAA_P5
ENAA_P4 = _pyupm_nrf24l01.ENAA_P4
ENAA_P3 = _pyupm_nrf24l01.ENAA_P3
ENAA_P2 = _pyupm_nrf24l01.ENAA_P2
ENAA_P1 = _pyupm_nrf24l01.ENAA_P1
ENAA_P0 = _pyupm_nrf24l01.ENAA_P0
ERX_P5 = _pyupm_nrf24l01.ERX_P5
ERX_P4 = _pyupm_nrf24l01.ERX_P4
ERX_P3 = _pyupm_nrf24l01.ERX_P3
ERX_P2 = _pyupm_nrf24l01.ERX_P2
ERX_P1 = _pyupm_nrf24l01.ERX_P1
ERX_P0 = _pyupm_nrf24l01.ERX_P0
AW = _pyupm_nrf24l01.AW
ARD = _pyupm_nrf24l01.ARD
ARC = _pyupm_nrf24l01.ARC
PLL_LOCK = _pyupm_nrf24l01.PLL_LOCK
RF_DR = _pyupm_nrf24l01.RF_DR
RF_PWR = _pyupm_nrf24l01.RF_PWR
LNA_HCURR = _pyupm_nrf24l01.LNA_HCURR
RX_DR = _pyupm_nrf24l01.RX_DR
TX_DS = _pyupm_nrf24l01.TX_DS
MAX_RT = _pyupm_nrf24l01.MAX_RT
RX_P_NO = _pyupm_nrf24l01.RX_P_NO
TX_FULL = _pyupm_nrf24l01.TX_FULL
PLOS_CNT = _pyupm_nrf24l01.PLOS_CNT
ARC_CNT = _pyupm_nrf24l01.ARC_CNT
TX_REUSE = _pyupm_nrf24l01.TX_REUSE
FIFO_FULL = _pyupm_nrf24l01.FIFO_FULL
TX_EMPTY = _pyupm_nrf24l01.TX_EMPTY
RX_FULL = _pyupm_nrf24l01.RX_FULL
RX_EMPTY = _pyupm_nrf24l01.RX_EMPTY
R_REGISTER = _pyupm_nrf24l01.R_REGISTER
W_REGISTER = _pyupm_nrf24l01.W_REGISTER
REGISTER_MASK = _pyupm_nrf24l01.REGISTER_MASK
R_RX_PAYLOAD = _pyupm_nrf24l01.R_RX_PAYLOAD
W_TX_PAYLOAD = _pyupm_nrf24l01.W_TX_PAYLOAD
FLUSH_TX = _pyupm_nrf24l01.FLUSH_TX
FLUSH_RX = _pyupm_nrf24l01.FLUSH_RX
REUSE_TX_PL = _pyupm_nrf24l01.REUSE_TX_PL
NOP = _pyupm_nrf24l01.NOP
RF_DR_LOW = _pyupm_nrf24l01.RF_DR_LOW
RF_DR_HIGH = _pyupm_nrf24l01.RF_DR_HIGH
RF_PWR_LOW = _pyupm_nrf24l01.RF_PWR_LOW
RF_PWR_HIGH = _pyupm_nrf24l01.RF_PWR_HIGH
ADDR_LEN = _pyupm_nrf24l01.ADDR_LEN
_CONFIG = _pyupm_nrf24l01._CONFIG
MAX_BUFFER = _pyupm_nrf24l01.MAX_BUFFER
HIGH = _pyupm_nrf24l01.HIGH
LOW = _pyupm_nrf24l01.LOW
BLE_MAC_0 = _pyupm_nrf24l01.BLE_MAC_0
BLE_MAC_1 = _pyupm_nrf24l01.BLE_MAC_1
BLE_MAC_2 = _pyupm_nrf24l01.BLE_MAC_2
BLE_MAC_3 = _pyupm_nrf24l01.BLE_MAC_3
BLE_MAC_4 = _pyupm_nrf24l01.BLE_MAC_4
BLE_MAC_5 = _pyupm_nrf24l01.BLE_MAC_5
BLE_PAYLOAD_OFFSET = _pyupm_nrf24l01.BLE_PAYLOAD_OFFSET
NRF_250KBPS = _pyupm_nrf24l01.NRF_250KBPS
NRF_1MBPS = _pyupm_nrf24l01.NRF_1MBPS
NRF_2MBPS = _pyupm_nrf24l01.NRF_2MBPS
NRF_0DBM = _pyupm_nrf24l01.NRF_0DBM
NRF_6DBM = _pyupm_nrf24l01.NRF_6DBM
NRF_12DBM = _pyupm_nrf24l01.NRF_12DBM
NRF_18DBM = _pyupm_nrf24l01.NRF_18DBM
class NRF24L01(_object):
    """
    API for the NRF24L01 Transceiver Module.

    ID: nrf24l01

    Name: NRF24L01 Transceiver

    Category: wifi

    Manufacturer: seeed sparkfun

    Link:http://www.seeedstudio.com/depot/nRF24L01Module-p-1394.html

    Connection: spi  id This module defines the NRF24L01 interface for
    libnrf24l01

    C++ includes: nrf24l01.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NRF24L01, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NRF24L01, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::NRF24L01 self, uint8_t cs, uint8_t ce) -> NRF24L01

        Parameters:
            cs: uint8_t
            ce: uint8_t


        NRF24L01(uint8_t cs,
        uint8_t ce)

        Instantiates an NRF24l01 object

        Parameters:
        -----------

        cs:  Chip select pin 
        """
        this = _pyupm_nrf24l01.new_NRF24L01(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self):
        """
        name(NRF24L01 self) -> std::string

        Parameters:
            self: upm::NRF24L01 *


        std::string name()

        Returns the name of the component 
        """
        return _pyupm_nrf24l01.NRF24L01_name(self)

    def init(self, *args):
        """
        init(NRF24L01 self, uint8_t chipSelect, uint8_t chipEnable)

        Parameters:
            chipSelect: uint8_t
            chipEnable: uint8_t


        void init(uint8_t
        chipSelect, uint8_t chipEnable)

        Initializes needed GPIO pins and SPI

        Parameters:
        -----------

        chipSelect:  Sets up the chip select pin

        chipEnable:  Sets up the chip enable pin 
        """
        return _pyupm_nrf24l01.NRF24L01_init(self, *args)

    def configure(self):
        """
        configure(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *


        void configure()

        Configures the NRF24L01 transceiver 
        """
        return _pyupm_nrf24l01.NRF24L01_configure(self)

    def send(self, *args):
        """
        send(NRF24L01 self, uint8_t * value)

        Parameters:
            value: uint8_t *

        send(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *


        void send()

        Sends the data located in an inner bufer; the user must fill the
        m_txBuffer buffer 
        """
        return _pyupm_nrf24l01.NRF24L01_send(self, *args)

    def setSourceAddress(self, *args):
        """
        setSourceAddress(NRF24L01 self, uint8_t * addr)

        Parameters:
            addr: uint8_t *


        void
        setSourceAddress(uint8_t *addr)

        Sets a receiving address of the device

        Parameters:
        -----------

        addr:  5-byte address 
        """
        return _pyupm_nrf24l01.NRF24L01_setSourceAddress(self, *args)

    def setDestinationAddress(self, *args):
        """
        setDestinationAddress(NRF24L01 self, uint8_t * addr)

        Parameters:
            addr: uint8_t *


        void
        setDestinationAddress(uint8_t *addr)

        Sets a recipient address. The nrfSend method sends the data buffer to
        this address

        Parameters:
        -----------

        addr:  5-byte address 
        """
        return _pyupm_nrf24l01.NRF24L01_setDestinationAddress(self, *args)

    def setBroadcastAddress(self, *args):
        """
        setBroadcastAddress(NRF24L01 self, uint8_t * addr)

        Parameters:
            addr: uint8_t *


        void
        setBroadcastAddress(uint8_t *addr)

        Sets a broadcasting address

        Parameters:
        -----------

        addr:  5-byte address 
        """
        return _pyupm_nrf24l01.NRF24L01_setBroadcastAddress(self, *args)

    def setPayload(self, *args):
        """
        setPayload(NRF24L01 self, uint8_t load)

        Parameters:
            load: uint8_t


        void
        setPayload(uint8_t load)

        Sets the payload size

        Parameters:
        -----------

        load:  Size of the payload (MAX 32) 
        """
        return _pyupm_nrf24l01.NRF24L01_setPayload(self, *args)

    def setDataReceivedHandler(self, *args):
        """
        setDataReceivedHandler(NRF24L01 self, upm::funcPtrVoidVoid handler)

        Parameters:
            handler: upm::funcPtrVoidVoid


        void
        setDataReceivedHandler(funcPtrVoidVoid handler)

        Sets the handler to be called when data has been received

        Parameters:
        -----------

        handler:  Handler used for callback 
        """
        return _pyupm_nrf24l01.NRF24L01_setDataReceivedHandler(self, *args)

    def dataReady(self):
        """
        dataReady(NRF24L01 self) -> bool

        Parameters:
            self: upm::NRF24L01 *


        bool dataReady()

        Checks if the data has arrived 
        """
        return _pyupm_nrf24l01.NRF24L01_dataReady(self)

    def dataSending(self):
        """
        dataSending(NRF24L01 self) -> bool

        Parameters:
            self: upm::NRF24L01 *


        bool dataSending()

        Checks if the transceiver is in the sending mode 
        """
        return _pyupm_nrf24l01.NRF24L01_dataSending(self)

    def getData(self, *args):
        """
        getData(NRF24L01 self, uint8_t * data)

        Parameters:
            data: uint8_t *


        void getData(uint8_t
        *data)

        Sinks all the arrived data into a provided buffer

        Parameters:
        -----------

        load:  Size of the payload (MAX 32) 
        """
        return _pyupm_nrf24l01.NRF24L01_getData(self, *args)

    def getStatus(self):
        """
        getStatus(NRF24L01 self) -> uint8_t

        Parameters:
            self: upm::NRF24L01 *


        uint8_t getStatus()

        Checks the transceiver state 
        """
        return _pyupm_nrf24l01.NRF24L01_getStatus(self)

    def rxFifoEmpty(self):
        """
        rxFifoEmpty(NRF24L01 self) -> bool

        Parameters:
            self: upm::NRF24L01 *


        bool rxFifoEmpty()

        Checks if the receive stack is empty 
        """
        return _pyupm_nrf24l01.NRF24L01_rxFifoEmpty(self)

    def rxPowerUp(self):
        """
        rxPowerUp(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *


        void rxPowerUp()

        Powers the receiver up 
        """
        return _pyupm_nrf24l01.NRF24L01_rxPowerUp(self)

    def rxFlushBuffer(self):
        """
        rxFlushBuffer(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *


        void
        rxFlushBuffer()

        Flushes the receive stack 
        """
        return _pyupm_nrf24l01.NRF24L01_rxFlushBuffer(self)

    def txPowerUp(self):
        """
        txPowerUp(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *


        void txPowerUp()

        Powers the transmitter up 
        """
        return _pyupm_nrf24l01.NRF24L01_txPowerUp(self)

    def powerDown(self):
        """
        powerDown(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *


        void powerDown()

        Powers everything down 
        """
        return _pyupm_nrf24l01.NRF24L01_powerDown(self)

    def setChannel(self, *args):
        """
        setChannel(NRF24L01 self, uint8_t channel)

        Parameters:
            channel: uint8_t


        void
        setChannel(uint8_t channel) 
        """
        return _pyupm_nrf24l01.NRF24L01_setChannel(self, *args)

    def setPower(self, *args):
        """
        setPower(NRF24L01 self, upm::power_t power)

        Parameters:
            power: enum upm::power_t


        void setPower(power_t
        power) 
        """
        return _pyupm_nrf24l01.NRF24L01_setPower(self, *args)

    def setSpeedRate(self, *args):
        """
        setSpeedRate(NRF24L01 self, upm::speed_rate_t rate) -> uint8_t

        Parameters:
            rate: enum upm::speed_rate_t


        uint8_t
        setSpeedRate(speed_rate_t rate) 
        """
        return _pyupm_nrf24l01.NRF24L01_setSpeedRate(self, *args)

    def txFlushBuffer(self):
        """
        txFlushBuffer(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *


        void
        txFlushBuffer()

        Flushes the transmit stack 
        """
        return _pyupm_nrf24l01.NRF24L01_txFlushBuffer(self)

    def pollListener(self):
        """
        pollListener(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *


        void
        pollListener()

        Pulling the method listening for the arrived data, dataRecievedHandler
        is triggered if data arrives 
        """
        return _pyupm_nrf24l01.NRF24L01_pollListener(self)

    def ceHigh(self):
        """
        ceHigh(NRF24L01 self) -> mraa::Result

        Parameters:
            self: upm::NRF24L01 *


        mraa::Result ceHigh()

        Sets the chip enable pin to HIGH 
        """
        return _pyupm_nrf24l01.NRF24L01_ceHigh(self)

    def ceLow(self):
        """
        ceLow(NRF24L01 self) -> mraa::Result

        Parameters:
            self: upm::NRF24L01 *


        mraa::Result ceLow()

        Sets the chip enable pin to LOW 
        """
        return _pyupm_nrf24l01.NRF24L01_ceLow(self)

    def csOn(self):
        """
        csOn(NRF24L01 self) -> mraa::Result

        Parameters:
            self: upm::NRF24L01 *


        mraa::Result csOn()

        Sets the chip select pin to LOW 
        """
        return _pyupm_nrf24l01.NRF24L01_csOn(self)

    def csOff(self):
        """
        csOff(NRF24L01 self) -> mraa::Result

        Parameters:
            self: upm::NRF24L01 *


        mraa::Result csOff()

        Sets the chip select pin to HIGH 
        """
        return _pyupm_nrf24l01.NRF24L01_csOff(self)

    def setBeaconingMode(self):
        """
        setBeaconingMode(NRF24L01 self)

        Parameters:
            self: upm::NRF24L01 *


        void
        setBeaconingMode()

        Configures the NRF24L01 transceiver to behave as a BLE (Bluetooth Low
        Energy) beaconing devcie. 
        """
        return _pyupm_nrf24l01.NRF24L01_setBeaconingMode(self)

    def sendBeaconingMsg(self, *args):
        """
        sendBeaconingMsg(NRF24L01 self, uint8_t * msg)

        Parameters:
            msg: uint8_t *


        void
        sendBeaconingMsg(uint8_t *msg)

        Beacons the provided message to BLE scanners.

        Parameters:
        -----------

        msg:  Beacons the provided message (max length is 16 bytes) 
        """
        return _pyupm_nrf24l01.NRF24L01_sendBeaconingMsg(self, *args)

    __swig_setmethods__["m_rxBuffer"] = _pyupm_nrf24l01.NRF24L01_m_rxBuffer_set
    __swig_getmethods__["m_rxBuffer"] = _pyupm_nrf24l01.NRF24L01_m_rxBuffer_get
    if _newclass:m_rxBuffer = _swig_property(_pyupm_nrf24l01.NRF24L01_m_rxBuffer_get, _pyupm_nrf24l01.NRF24L01_m_rxBuffer_set)
    __swig_setmethods__["m_txBuffer"] = _pyupm_nrf24l01.NRF24L01_m_txBuffer_set
    __swig_getmethods__["m_txBuffer"] = _pyupm_nrf24l01.NRF24L01_m_txBuffer_get
    if _newclass:m_txBuffer = _swig_property(_pyupm_nrf24l01.NRF24L01_m_txBuffer_get, _pyupm_nrf24l01.NRF24L01_m_txBuffer_set)
    __swig_setmethods__["m_bleBuffer"] = _pyupm_nrf24l01.NRF24L01_m_bleBuffer_set
    __swig_getmethods__["m_bleBuffer"] = _pyupm_nrf24l01.NRF24L01_m_bleBuffer_get
    if _newclass:m_bleBuffer = _swig_property(_pyupm_nrf24l01.NRF24L01_m_bleBuffer_get, _pyupm_nrf24l01.NRF24L01_m_bleBuffer_set)
    __swig_destroy__ = _pyupm_nrf24l01.delete_NRF24L01
    __del__ = lambda self : None;
NRF24L01_swigregister = _pyupm_nrf24l01.NRF24L01_swigregister
NRF24L01_swigregister(NRF24L01)

# This file is compatible with both classic and new-style classes.


