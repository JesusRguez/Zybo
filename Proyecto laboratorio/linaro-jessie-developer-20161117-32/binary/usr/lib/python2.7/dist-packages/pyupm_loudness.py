# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_loudness', [dirname(__file__)])
        except ImportError:
            import _pyupm_loudness
            return _pyupm_loudness
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_loudness', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_loudness = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_loudness
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Loudness(_object):
    """
    API for the Loudness Sensor.

    ID: loudness

    Name: Loudness Sensor

    Other Names: Grove loudness hyld9767

    Category: sound

    Manufacturer: dfrobot seeed

    Link:http://www.dfrobot.com/index.php?route=product/product&product_id=83

    Connection: analog  This sensor family returns an analog voltage
    proportional to the loudness of the ambient environment. It's output
    does not correspond to a particular sound level in decibels. The
    higher the output voltage, the louder the ambient noise level.

    This device uses an electret microphone for sound input.

    This driver was developed using the DFRobot Loudness Sensor V2 and the
    Grove Loudness sensor.

    C++ includes: loudness.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Loudness, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Loudness, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::Loudness self, int pin, float aref=5.0) -> Loudness

        Parameters:
            pin: int
            aref: float

        __init__(upm::Loudness self, int pin) -> Loudness

        Parameters:
            pin: int


        Loudness(int pin,
        float aref=5.0)

        Loudness constructor

        Parameters:
        -----------

        pin:  Analog pin to use

        aref:  Analog reference voltage; default is 5.0 V 
        """
        this = _pyupm_loudness.new_Loudness(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_loudness.delete_Loudness
    __del__ = lambda self : None;
    def loudness(self):
        """
        loudness(Loudness self) -> float

        Parameters:
            self: upm::Loudness *


        float loudness()

        Returns the voltage detected on the analog pin

        The detected voltage 
        """
        return _pyupm_loudness.Loudness_loudness(self)

Loudness_swigregister = _pyupm_loudness.Loudness_swigregister
Loudness_swigregister(Loudness)

# This file is compatible with both classic and new-style classes.


