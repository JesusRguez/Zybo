# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_sx6119', [dirname(__file__)])
        except ImportError:
            import _pyupm_sx6119
            return _pyupm_sx6119
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_sx6119', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_sx6119 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_sx6119
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SX6119(_object):
    """
    API support for the SX6119-based Grove FM Receiver.

    ID: sx6119

    Name: Grove FM Receiver

    Other Names: SX6119 FM Receiver

    Category: sound

    Manufacturer: seeed

    Connection: gpio  This class implements support for the SX6119 FM
    Receiver. There are two digital pins: one that toggles power on/off,
    and the other that does a seek to the next station.

    C++ includes: sx6119.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SX6119, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SX6119, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::SX6119 self, int powerPin, int seekPin) -> SX6119

        Parameters:
            powerPin: int
            seekPin: int


        SX6119(int powerPin, int
        seekPin)

        SX6119 constructor

        Parameters:
        -----------

        powerPin:  Pin to use for recording

        seekPin:  Pin to use for seeking to the next station 
        """
        this = _pyupm_sx6119.new_SX6119(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_sx6119.delete_SX6119
    __del__ = lambda self : None;
    def togglePower(self):
        """
        togglePower(SX6119 self)

        Parameters:
            self: upm::SX6119 *


        void togglePower()

        Toggles the device power on or off 
        """
        return _pyupm_sx6119.SX6119_togglePower(self)

    def seek(self):
        """
        seek(SX6119 self)

        Parameters:
            self: upm::SX6119 *


        void seek()

        Seeks to the next station 
        """
        return _pyupm_sx6119.SX6119_seek(self)

SX6119_swigregister = _pyupm_sx6119.SX6119_swigregister
SX6119_swigregister(SX6119)

# This file is compatible with both classic and new-style classes.


