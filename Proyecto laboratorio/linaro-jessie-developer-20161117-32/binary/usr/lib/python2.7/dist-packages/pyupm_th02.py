# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_th02', [dirname(__file__)])
        except ImportError:
            import _pyupm_th02
            return _pyupm_th02
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_th02', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_th02 = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_th02
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


TH02_ADDR = _pyupm_th02.TH02_ADDR
TH02_REG_STATUS = _pyupm_th02.TH02_REG_STATUS
TH02_REG_DATA_H = _pyupm_th02.TH02_REG_DATA_H
TH02_REG_DATA_L = _pyupm_th02.TH02_REG_DATA_L
TH02_REG_CONFIG = _pyupm_th02.TH02_REG_CONFIG
TH02_REG_ID = _pyupm_th02.TH02_REG_ID
TH02_STATUS_RDY_MASK = _pyupm_th02.TH02_STATUS_RDY_MASK
TH02_CMD_MEASURE_HUMI = _pyupm_th02.TH02_CMD_MEASURE_HUMI
TH02_CMD_MEASURE_TEMP = _pyupm_th02.TH02_CMD_MEASURE_TEMP
class TH02(_object):
    """
    API for the TH02 Temperature & Humidity Sensor.

    ID: th02

    Name: TH02 Temperature & Humidity Sensor

    Other Names: Grove Temperature & Humidity Sensor (High-Accuracy &
    Mini)

    Category: temp

    Manufacturer: seeed

    Link:http://www.seeedstudio.com/wiki/Grove_-
    _Tempture%26Humidity_Sensor_ (High-Accuracy_%26Mini)_v1.0

    Connection: i2c  This module defines the TH02 interface for libth02

    Note: For use on Intel(R) Edison with an Arduino* breakout board,
    Intel Edison must be set to 3 V rather than 5 V.

    C++ includes: th02.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TH02, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TH02, name)
    __repr__ = _swig_repr
    def __init__(self, bus=0, addr=0x40): 
        """
        __init__(upm::TH02 self, int bus=0, uint8_t addr=0x40) -> TH02

        Parameters:
            bus: int
            addr: uint8_t

        __init__(upm::TH02 self, int bus=0) -> TH02

        Parameters:
            bus: int

        __init__(upm::TH02 self) -> TH02

        TH02(int bus=0, uint8_t
        addr=TH02_ADDR)

        Instantiates a TH02 object 
        """
        this = _pyupm_th02.new_TH02(bus, addr)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_th02.delete_TH02
    __del__ = lambda self : None;
    def getTemperature(self):
        """
        getTemperature(TH02 self) -> float

        Parameters:
            self: upm::TH02 *


        float
        getTemperature()

        Gets the temperature value from the sensor. 
        """
        return _pyupm_th02.TH02_getTemperature(self)

    def getHumidity(self):
        """
        getHumidity(TH02 self) -> float

        Parameters:
            self: upm::TH02 *


        float getHumidity()

        Gets the humidity value from the sensor. 
        """
        return _pyupm_th02.TH02_getHumidity(self)

    def getStatus(self):
        """
        getStatus(TH02 self) -> bool

        Parameters:
            self: upm::TH02 *


        bool getStatus()

        Gets the sensor status. 
        """
        return _pyupm_th02.TH02_getStatus(self)

    def name(self):
        """
        name(TH02 self) -> std::string

        Parameters:
            self: upm::TH02 *


        std::string name()

        Returns the name of the component 
        """
        return _pyupm_th02.TH02_name(self)

TH02_swigregister = _pyupm_th02.TH02_swigregister
TH02_swigregister(TH02)

# This file is compatible with both classic and new-style classes.


