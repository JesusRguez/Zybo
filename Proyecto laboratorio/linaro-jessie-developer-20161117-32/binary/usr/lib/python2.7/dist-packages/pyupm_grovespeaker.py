# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_grovespeaker', [dirname(__file__)])
        except ImportError:
            import _pyupm_grovespeaker
            return _pyupm_grovespeaker
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_grovespeaker', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_grovespeaker = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_grovespeaker
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


HIGH = _pyupm_grovespeaker.HIGH
LOW = _pyupm_grovespeaker.LOW
class NoteData(_object):
    """Proxy of C++ upm::NoteData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoteData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NoteData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["delayTimeLow"] = _pyupm_grovespeaker.NoteData_delayTimeLow_set
    __swig_getmethods__["delayTimeLow"] = _pyupm_grovespeaker.NoteData_delayTimeLow_get
    if _newclass:delayTimeLow = _swig_property(_pyupm_grovespeaker.NoteData_delayTimeLow_get, _pyupm_grovespeaker.NoteData_delayTimeLow_set)
    __swig_setmethods__["delayTimeLowSharp"] = _pyupm_grovespeaker.NoteData_delayTimeLowSharp_set
    __swig_getmethods__["delayTimeLowSharp"] = _pyupm_grovespeaker.NoteData_delayTimeLowSharp_get
    if _newclass:delayTimeLowSharp = _swig_property(_pyupm_grovespeaker.NoteData_delayTimeLowSharp_get, _pyupm_grovespeaker.NoteData_delayTimeLowSharp_set)
    __swig_setmethods__["delayTimeMed"] = _pyupm_grovespeaker.NoteData_delayTimeMed_set
    __swig_getmethods__["delayTimeMed"] = _pyupm_grovespeaker.NoteData_delayTimeMed_get
    if _newclass:delayTimeMed = _swig_property(_pyupm_grovespeaker.NoteData_delayTimeMed_get, _pyupm_grovespeaker.NoteData_delayTimeMed_set)
    __swig_setmethods__["delayTimeMedSharp"] = _pyupm_grovespeaker.NoteData_delayTimeMedSharp_set
    __swig_getmethods__["delayTimeMedSharp"] = _pyupm_grovespeaker.NoteData_delayTimeMedSharp_get
    if _newclass:delayTimeMedSharp = _swig_property(_pyupm_grovespeaker.NoteData_delayTimeMedSharp_get, _pyupm_grovespeaker.NoteData_delayTimeMedSharp_set)
    __swig_setmethods__["delayTimeHigh"] = _pyupm_grovespeaker.NoteData_delayTimeHigh_set
    __swig_getmethods__["delayTimeHigh"] = _pyupm_grovespeaker.NoteData_delayTimeHigh_get
    if _newclass:delayTimeHigh = _swig_property(_pyupm_grovespeaker.NoteData_delayTimeHigh_get, _pyupm_grovespeaker.NoteData_delayTimeHigh_set)
    __swig_setmethods__["delayTimeHighSharp"] = _pyupm_grovespeaker.NoteData_delayTimeHighSharp_set
    __swig_getmethods__["delayTimeHighSharp"] = _pyupm_grovespeaker.NoteData_delayTimeHighSharp_get
    if _newclass:delayTimeHighSharp = _swig_property(_pyupm_grovespeaker.NoteData_delayTimeHighSharp_get, _pyupm_grovespeaker.NoteData_delayTimeHighSharp_set)
    def __init__(self): 
        """__init__(upm::NoteData self) -> NoteData"""
        this = _pyupm_grovespeaker.new_NoteData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_grovespeaker.delete_NoteData
    __del__ = lambda self : None;
NoteData_swigregister = _pyupm_grovespeaker.NoteData_swigregister
NoteData_swigregister(NoteData)

class GroveSpeaker(_object):
    """
    API for the Grove Speaker.

    ID: grovespeaker

    Name: Grove Speaker

    Category: sound

    Manufacturer: seeed

    Connection: gpio

    Kit: hak  UPM module for the Grove Speaker. This sensor can generate
    different tones and sounds depending on the frequency of the input
    signal.

    C++ includes: grovespeaker.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroveSpeaker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GroveSpeaker, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::GroveSpeaker self, int pin) -> GroveSpeaker

        Parameters:
            pin: int


        GroveSpeaker(int pin)

        Grove Speaker constructor

        Parameters:
        -----------

        pin:  Digital pin to use 
        """
        this = _pyupm_grovespeaker.new_GroveSpeaker(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_grovespeaker.delete_GroveSpeaker
    __del__ = lambda self : None;
    def playAll(self):
        """
        playAll(GroveSpeaker self)

        Parameters:
            self: upm::GroveSpeaker *


        void playAll()

        Plays all alto notes (lowest notes) 
        """
        return _pyupm_grovespeaker.GroveSpeaker_playAll(self)

    def playSound(self, *args):
        """
        playSound(GroveSpeaker self, char letter, bool sharp, std::string vocalWeight)

        Parameters:
            letter: char
            sharp: bool
            vocalWeight: std::string


        void
        playSound(char letter, bool sharp, std::string vocalWeight)

        Plays a sound and a note whether it's sharp or not

        Parameters:
        -----------

        letter:  Character name of the note ('a', 'b', 'c', 'd', 'e', 'f', or
        'g')

        sharp:  If true, plays a sharp version of the note; otherwise, does
        not play the note

        vocalWeight:  String to determine whether to play a low ("low"), a
        medium ("med"), or a high ("high") note 
        """
        return _pyupm_grovespeaker.GroveSpeaker_playSound(self, *args)

GroveSpeaker_swigregister = _pyupm_grovespeaker.GroveSpeaker_swigregister
GroveSpeaker_swigregister(GroveSpeaker)

# This file is compatible with both classic and new-style classes.


