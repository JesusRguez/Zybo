# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyupm_otp538u', [dirname(__file__)])
        except ImportError:
            import _pyupm_otp538u
            return _pyupm_otp538u
        if fp is not None:
            try:
                _mod = imp.load_module('_pyupm_otp538u', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyupm_otp538u = swig_import_helper()
    del swig_import_helper
else:
    import _pyupm_otp538u
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class OTP538U(_object):
    """
    API for the OTP538U IR Temperature Sensor.

    ID: otp538u

    Name: OTP538U IR Temperature Sensor

    Other Names: Grove IR Temperature Sensor

    Category: light

    Manufacturer: generic

    Connection: analog

    Kit: hak  UPM module for the OTP538U IR temperature sensor

    This module was tested with the Grove IR non-contact temperature
    sensor.

    The sensor provides 2 analog outputs: one for the thermistor that
    measures the ambient temperature, and the other for the thermopile
    that measures the object temperature.

    Much of the code depends on analyzing Seeed Studio* examples and the
    circuit design. As a result, there are several 'magic' numbers derived
    from their circuit design. These values are used by default.

    The tables used came from the "538U VT Table__20_200(v1.3).pdf" and
    "538RT_table.pdf" datasheets.

    These tables assume the object to be measured is 9 cm (3.54 inches)
    from the sensor.

    C++ includes: otp538u.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OTP538U, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OTP538U, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(upm::OTP538U self, int pinA, int pinO, float aref=5.0) -> OTP538U

        Parameters:
            pinA: int
            pinO: int
            aref: float

        __init__(upm::OTP538U self, int pinA, int pinO) -> OTP538U

        Parameters:
            pinA: int
            pinO: int


        OTP538U(int pinA, int
        pinO, float aref=5.0)

        OTP538U constructor

        Parameters:
        -----------

        pinA:  Analog pin to use for the ambient temperature

        pinO:  Analog pin to use for the object temperature

        aref:  Analog reference voltage; default is 5.0 V 
        """
        this = _pyupm_otp538u.new_OTP538U(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyupm_otp538u.delete_OTP538U
    __del__ = lambda self : None;
    def ambientTemperature(self):
        """
        ambientTemperature(OTP538U self) -> float

        Parameters:
            self: upm::OTP538U *


        float
        ambientTemperature()

        Gets the ambient temperature in Celsius

        Ambient temperature 
        """
        return _pyupm_otp538u.OTP538U_ambientTemperature(self)

    def objectTemperature(self):
        """
        objectTemperature(OTP538U self) -> float

        Parameters:
            self: upm::OTP538U *


        float
        objectTemperature()

        Gets the object temperature in Celsius

        Object temperature 
        """
        return _pyupm_otp538u.OTP538U_objectTemperature(self)

    def setVoltageOffset(self, *args):
        """
        setVoltageOffset(OTP538U self, float vOffset)

        Parameters:
            vOffset: float


        void
        setVoltageOffset(float vOffset)

        Sets the offset voltage

        The Seeed Studio wiki gives an example of calibrating the sensor and
        calculating the offset voltage to apply. Currently, the default value
        is set, but you can use the function to set one of your own.

        Parameters:
        -----------

        vOffset:  Desired offset voltage 
        """
        return _pyupm_otp538u.OTP538U_setVoltageOffset(self, *args)

    def setOutputResistence(self, *args):
        """
        setOutputResistence(OTP538U self, int outResistance)

        Parameters:
            outResistance: int


        void
        setOutputResistence(int outResistance)

        Sets the output resistance value

        The Seeed Studio wiki example uses a value of 2,000,000 in one of the
        equations used to calculate voltage. The value is the resistance of a
        resistor they use in the output stage of their SIG2 output. This was
        'decoded' by looking at the EAGLE* files containing their schematics
        for this device.

        Parameters:
        -----------

        outResistance:  Value of the output resistor; default is 2M Ohm 
        """
        return _pyupm_otp538u.OTP538U_setOutputResistence(self, *args)

    def setVRef(self, *args):
        """
        setVRef(OTP538U self, float vref)

        Parameters:
            vref: float


        void setVRef(float
        vref)

        Sets the reference voltage of the internal Seeed Studio voltage
        regulator on the sensor board.

        The Seeed Studio wiki example uses a value of 2.5 in one of the
        equations used to calculate the resistance of the ambient thermistor.
        The value is the voltage of an internal voltage regulator used on the
        sensor board. This was 'decoded' by looking at the EAGLE files
        containing their schematics for this device.

        Parameters:
        -----------

        vref:  Reference voltage of the internal sensor; default is 2.5 V 
        """
        return _pyupm_otp538u.OTP538U_setVRef(self, *args)

OTP538U_swigregister = _pyupm_otp538u.OTP538U_swigregister
OTP538U_swigregister(OTP538U)

# This file is compatible with both classic and new-style classes.


